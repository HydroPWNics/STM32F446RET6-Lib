ARM GAS  /tmp/ccGyomqm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_hal_rcc.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.global	APBAHBPrescTable
  22              		.section	.rodata.APBAHBPrescTable,"a",%progbits
  23              		.align	2
  26              	APBAHBPrescTable:
  27 0000 00       		.byte	0
  28 0001 00       		.byte	0
  29 0002 00       		.byte	0
  30 0003 00       		.byte	0
  31 0004 01       		.byte	1
  32 0005 02       		.byte	2
  33 0006 03       		.byte	3
  34 0007 04       		.byte	4
  35 0008 01       		.byte	1
  36 0009 02       		.byte	2
  37 000a 03       		.byte	3
  38 000b 04       		.byte	4
  39 000c 06       		.byte	6
  40 000d 07       		.byte	7
  41 000e 08       		.byte	8
  42 000f 09       		.byte	9
  43              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  44              		.align	2
  45              		.weak	HAL_RCC_DeInit
  46              		.thumb
  47              		.thumb_func
  49              	HAL_RCC_DeInit:
  50              	.LFB126:
  51              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @file    stm32f4xx_hal_rcc.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @version V1.5.2
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @date    22-September-2016
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following 
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
ARM GAS  /tmp/ccGyomqm.s 			page 2


  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           + Peripheral Control functions
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *       
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   @verbatim                
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                       ##### RCC specific features #####
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]  
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       SRAM, Flash and JTAG.
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]          
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       Once the device started from reset, the user application has to:        
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                       ##### RCC Limitations #####
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]  
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral 
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write 
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       from/to registers.
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) If peripheral is mapped on AHB: the delay is 2 AHB clock cycle 
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) If peripheral is mapped on APB: the delay is 2 APB clock cycle 
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]  
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       Implemented Workaround:
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) For AHB & APB peripherals, a dummy read to the peripheral register has been
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   @endverbatim
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @attention
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
ARM GAS  /tmp/ccGyomqm.s 			page 3


  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      without specific prior written permission.
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */ 
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #include "stm32f4xx_hal.h"
  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @addtogroup STM32F4xx_HAL_Driver
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC RCC
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief RCC HAL module driver
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @addtogroup RCC_Private_Constants
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define CLOCKSWITCH_TIMEOUT_VALUE  ((uint32_t)5000U) /* 5 s    */
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define __MCO1_CLK_ENABLE()   __HAL_RCC_GPIOA_CLK_ENABLE()
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8 
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define __MCO2_CLK_ENABLE()   __HAL_RCC_GPIOC_CLK_ENABLE()
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO2_GPIO_PORT         GPIOC
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO2_PIN               GPIO_PIN_9
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @}
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */    
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** const uint8_t APBAHBPrescTable[16] = {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9
ARM GAS  /tmp/ccGyomqm.s 			page 4


 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @}
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private functions ---------------------------------------------------------*/
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *  @{
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions 
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *  @brief    Initialization and Configuration functions 
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @verbatim    
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System busses clocks (SYSCLK, AHB, APB1 
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        and APB2).
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              the PLL as System clock source.
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock source.
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock source), the System clocks automatically switched to HSI and an interrupt
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              is generated if enabled. The interrupt is linked to the Cortex-M4 NMI 
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              (Non-Maskable Interrupt) exception vector.   
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock (through a configurable prescaler) on PA8 pin.
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock (through a configurable prescaler) on PC9 pin.
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration  
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              HSE and PLL.
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable 
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              prescaler and used to clock the CPU, memory and peripherals mapped 
ARM GAS  /tmp/ccGyomqm.s 			page 5


 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              from AHB clock through configurable prescalers and used to clock 
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              the peripherals mapped on these busses. You can use 
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.  
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F405xx/07xx and STM32F415xx/17xx devices, the maximum
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              frequency of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. 
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F42xxx, STM32F43xxx, STM32F446xx, STM32F469xx and STM32F479xx devices,
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              the maximum frequency of the SYSCLK and HCLK is 180 MHz, PCLK2 90 MHz and PCLK1 45 MHz
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F401xx, the maximum frequency of the SYSCLK and HCLK is 84 MHz,
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              PCLK2 84 MHz and PCLK1 42 MHz. 
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F41xxx, the maximum frequency of the SYSCLK and HCLK is 100 MHz,
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              PCLK2 100 MHz and PCLK1 50 MHz. 
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @endverbatim
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - HSE and PLL OFF
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - All interrupts disabled
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - Peripheral clocks  
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks 
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak void HAL_RCC_DeInit(void)
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {}
  52              		.loc 1 224 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57 0000 80B4     		push	{r7}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 4
  60              		.cfi_offset 7, -4
  61 0002 00AF     		add	r7, sp, #0
  62              	.LCFI1:
  63              		.cfi_def_cfa_register 7
  64              		.loc 1 224 0
ARM GAS  /tmp/ccGyomqm.s 			page 6


  65 0004 00BF     		nop
  66 0006 BD46     		mov	sp, r7
  67              	.LCFI2:
  68              		.cfi_def_cfa_register 13
  69              		@ sp needed
  70 0008 5DF8047B 		ldr	r7, [sp], #4
  71              	.LCFI3:
  72              		.cfi_restore 7
  73              		.cfi_def_cfa_offset 0
  74 000c 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE126:
  78 000e 00BF     		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
  79              		.align	2
  80              		.weak	HAL_RCC_OscConfig
  81              		.thumb
  82              		.thumb_func
  84              	HAL_RCC_OscConfig:
  85              	.LFB127:
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         supported by this API. User should request a transition to LSE Off
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         supported by this API. User should request a transition to HSE Off
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval HAL status
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
  86              		.loc 1 241 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 56
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90 0000 80B5     		push	{r7, lr}
  91              	.LCFI4:
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 7, -8
  94              		.cfi_offset 14, -4
  95 0002 8EB0     		sub	sp, sp, #56
  96              	.LCFI5:
  97              		.cfi_def_cfa_offset 64
  98 0004 00AF     		add	r7, sp, #0
  99              	.LCFI6:
 100              		.cfi_def_cfa_register 7
 101 0006 7860     		str	r0, [r7, #4]
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  uint32_t tickstart = 0U;  
 102              		.loc 1 242 0
 103 0008 0023     		movs	r3, #0
 104 000a 7B63     		str	r3, [r7, #52]
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
ARM GAS  /tmp/ccGyomqm.s 			page 7


 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 105              		.loc 1 247 0
 106 000c 7B68     		ldr	r3, [r7, #4]
 107 000e 1B68     		ldr	r3, [r3]
 108 0010 03F00103 		and	r3, r3, #1
 109 0014 002B     		cmp	r3, #0
 110 0016 4FD0     		beq	.L3
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not dis
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 111              		.loc 1 252 0
 112 0018 A44B     		ldr	r3, .L51
 113 001a 9B68     		ldr	r3, [r3, #8]
 114 001c 03F00C03 		and	r3, r3, #12
 115 0020 042B     		cmp	r3, #4
 116 0022 0BD0     		beq	.L4
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 117              		.loc 1 253 0 discriminator 1
 118 0024 A14B     		ldr	r3, .L51
 119 0026 9B68     		ldr	r3, [r3, #8]
 120 0028 03F00C03 		and	r3, r3, #12
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 121              		.loc 1 252 0 discriminator 1
 122 002c 082B     		cmp	r3, #8
 123 002e 11D1     		bne	.L5
 124              		.loc 1 253 0
 125 0030 9E4B     		ldr	r3, .L51
 126 0032 5B68     		ldr	r3, [r3, #4]
 127 0034 03F48003 		and	r3, r3, #4194304
 128 0038 002B     		cmp	r3, #0
 129 003a 0BD0     		beq	.L5
 130              	.L4:
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 131              		.loc 1 255 0
 132 003c 9B4B     		ldr	r3, .L51
 133 003e 1B68     		ldr	r3, [r3]
 134 0040 03F40033 		and	r3, r3, #131072
 135 0044 002B     		cmp	r3, #0
 136 0046 36D0     		beq	.L50
 137              		.loc 1 255 0 is_stmt 0 discriminator 1
 138 0048 7B68     		ldr	r3, [r7, #4]
 139 004a 5B68     		ldr	r3, [r3, #4]
 140 004c 002B     		cmp	r3, #0
 141 004e 32D1     		bne	.L50
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 142              		.loc 1 257 0 is_stmt 1
 143 0050 0123     		movs	r3, #1
 144 0052 DFE1     		b	.L7
 145              	.L5:
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccGyomqm.s 			page 8


 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 146              		.loc 1 263 0
 147 0054 964A     		ldr	r2, .L51+4
 148 0056 7B68     		ldr	r3, [r7, #4]
 149 0058 5B68     		ldr	r3, [r3, #4]
 150 005a DBB2     		uxtb	r3, r3
 151 005c 1370     		strb	r3, [r2]
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSE State */
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 152              		.loc 1 266 0
 153 005e 7B68     		ldr	r3, [r7, #4]
 154 0060 5B68     		ldr	r3, [r3, #4]
 155 0062 002B     		cmp	r3, #0
 156 0064 13D0     		beq	.L8
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 157              		.loc 1 269 0
 158 0066 FFF7FEFF 		bl	HAL_GetTick
 159 006a 7863     		str	r0, [r7, #52]
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSE is ready */  
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 160              		.loc 1 272 0
 161 006c 08E0     		b	.L9
 162              	.L10:
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 163              		.loc 1 274 0
 164 006e FFF7FEFF 		bl	HAL_GetTick
 165 0072 0246     		mov	r2, r0
 166 0074 7B6B     		ldr	r3, [r7, #52]
 167 0076 D31A     		subs	r3, r2, r3
 168 0078 642B     		cmp	r3, #100
 169 007a 01D9     		bls	.L9
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 170              		.loc 1 276 0
 171 007c 0323     		movs	r3, #3
 172 007e C9E1     		b	.L7
 173              	.L9:
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 174              		.loc 1 272 0
 175 0080 8A4B     		ldr	r3, .L51
 176 0082 1B68     		ldr	r3, [r3]
 177 0084 03F40033 		and	r3, r3, #131072
 178 0088 002B     		cmp	r3, #0
 179 008a F0D0     		beq	.L10
 180 008c 14E0     		b	.L3
 181              	.L8:
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
ARM GAS  /tmp/ccGyomqm.s 			page 9


 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 182              		.loc 1 283 0
 183 008e FFF7FEFF 		bl	HAL_GetTick
 184 0092 7863     		str	r0, [r7, #52]
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSE is bypassed or disabled */
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 185              		.loc 1 286 0
 186 0094 08E0     		b	.L11
 187              	.L12:
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 188              		.loc 1 288 0
 189 0096 FFF7FEFF 		bl	HAL_GetTick
 190 009a 0246     		mov	r2, r0
 191 009c 7B6B     		ldr	r3, [r7, #52]
 192 009e D31A     		subs	r3, r2, r3
 193 00a0 642B     		cmp	r3, #100
 194 00a2 01D9     		bls	.L11
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 195              		.loc 1 290 0
 196 00a4 0323     		movs	r3, #3
 197 00a6 B5E1     		b	.L7
 198              	.L11:
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 199              		.loc 1 286 0
 200 00a8 804B     		ldr	r3, .L51
 201 00aa 1B68     		ldr	r3, [r3]
 202 00ac 03F40033 		and	r3, r3, #131072
 203 00b0 002B     		cmp	r3, #0
 204 00b2 F0D1     		bne	.L12
 205 00b4 00E0     		b	.L3
 206              	.L50:
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 207              		.loc 1 255 0
 208 00b6 00BF     		nop
 209              	.L3:
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 210              		.loc 1 297 0
 211 00b8 7B68     		ldr	r3, [r7, #4]
 212 00ba 1B68     		ldr	r3, [r3]
 213 00bc 03F00203 		and	r3, r3, #2
 214 00c0 002B     		cmp	r3, #0
 215 00c2 77D0     		beq	.L13
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
ARM GAS  /tmp/ccGyomqm.s 			page 10


 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 216              		.loc 1 304 0
 217 00c4 794B     		ldr	r3, .L51
 218 00c6 9B68     		ldr	r3, [r3, #8]
 219 00c8 03F00C03 		and	r3, r3, #12
 220 00cc 002B     		cmp	r3, #0
 221 00ce 0BD0     		beq	.L14
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 222              		.loc 1 305 0 discriminator 1
 223 00d0 764B     		ldr	r3, .L51
 224 00d2 9B68     		ldr	r3, [r3, #8]
 225 00d4 03F00C03 		and	r3, r3, #12
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 226              		.loc 1 304 0 discriminator 1
 227 00d8 082B     		cmp	r3, #8
 228 00da 26D1     		bne	.L15
 229              		.loc 1 305 0
 230 00dc 734B     		ldr	r3, .L51
 231 00de 5B68     		ldr	r3, [r3, #4]
 232 00e0 03F48003 		and	r3, r3, #4194304
 233 00e4 002B     		cmp	r3, #0
 234 00e6 20D1     		bne	.L15
 235              	.L14:
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 236              		.loc 1 308 0
 237 00e8 704B     		ldr	r3, .L51
 238 00ea 1B68     		ldr	r3, [r3]
 239 00ec 03F00203 		and	r3, r3, #2
 240 00f0 002B     		cmp	r3, #0
 241 00f2 05D0     		beq	.L16
 242              		.loc 1 308 0 is_stmt 0 discriminator 1
 243 00f4 7B68     		ldr	r3, [r7, #4]
 244 00f6 DB68     		ldr	r3, [r3, #12]
 245 00f8 012B     		cmp	r3, #1
 246 00fa 01D0     		beq	.L16
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 247              		.loc 1 310 0 is_stmt 1
 248 00fc 0123     		movs	r3, #1
 249 00fe 89E1     		b	.L7
 250              	.L16:
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 251              		.loc 1 316 0
 252 0100 6A48     		ldr	r0, .L51
 253 0102 6A4B     		ldr	r3, .L51
 254 0104 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccGyomqm.s 			page 11


 255 0106 23F0F802 		bic	r2, r3, #248
 256 010a 7B68     		ldr	r3, [r7, #4]
 257 010c 1969     		ldr	r1, [r3, #16]
 258 010e F823     		movs	r3, #248
 259 0110 3B62     		str	r3, [r7, #32]
 260              	.LBB33:
 261              	.LBB34:
 262              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  /tmp/ccGyomqm.s 			page 12


  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccGyomqm.s 			page 13


 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccGyomqm.s 			page 14


 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccGyomqm.s 			page 15


 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccGyomqm.s 			page 16


 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccGyomqm.s 			page 17


 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
ARM GAS  /tmp/ccGyomqm.s 			page 18


 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccGyomqm.s 			page 19


 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccGyomqm.s 			page 20


 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 263              		.loc 2 531 0
 264 0112 3B6A     		ldr	r3, [r7, #32]
 265              		.syntax unified
 266              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 267 0114 93FAA3F3 		rbit r3, r3
 268              	@ 0 "" 2
 269              		.thumb
 270              		.syntax unified
 271 0118 FB61     		str	r3, [r7, #28]
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 272              		.loc 2 544 0
 273 011a FB69     		ldr	r3, [r7, #28]
 274              	.LBE34:
 275              	.LBE33:
 276              		.loc 1 316 0
 277 011c B3FA83F3 		clz	r3, r3
 278 0120 01FA03F3 		lsl	r3, r1, r3
 279 0124 1343     		orrs	r3, r3, r2
 280 0126 0360     		str	r3, [r0]
ARM GAS  /tmp/ccGyomqm.s 			page 21


 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 281              		.loc 1 308 0
 282 0128 44E0     		b	.L13
 283              	.L15:
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSI State */
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 284              		.loc 1 322 0
 285 012a 7B68     		ldr	r3, [r7, #4]
 286 012c DB68     		ldr	r3, [r3, #12]
 287 012e 002B     		cmp	r3, #0
 288 0130 2AD0     		beq	.L18
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 289              		.loc 1 325 0
 290 0132 604B     		ldr	r3, .L51+8
 291 0134 0122     		movs	r2, #1
 292 0136 1A60     		str	r2, [r3]
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 293              		.loc 1 328 0
 294 0138 FFF7FEFF 		bl	HAL_GetTick
 295 013c 7863     		str	r0, [r7, #52]
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 296              		.loc 1 331 0
 297 013e 08E0     		b	.L19
 298              	.L20:
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 299              		.loc 1 333 0
 300 0140 FFF7FEFF 		bl	HAL_GetTick
 301 0144 0246     		mov	r2, r0
 302 0146 7B6B     		ldr	r3, [r7, #52]
 303 0148 D31A     		subs	r3, r2, r3
 304 014a 022B     		cmp	r3, #2
 305 014c 01D9     		bls	.L19
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 306              		.loc 1 335 0
 307 014e 0323     		movs	r3, #3
 308 0150 60E1     		b	.L7
 309              	.L19:
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 310              		.loc 1 331 0
 311 0152 564B     		ldr	r3, .L51
 312 0154 1B68     		ldr	r3, [r3]
 313 0156 03F00203 		and	r3, r3, #2
 314 015a 002B     		cmp	r3, #0
 315 015c F0D0     		beq	.L20
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }       
ARM GAS  /tmp/ccGyomqm.s 			page 22


 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 316              		.loc 1 340 0
 317 015e 5348     		ldr	r0, .L51
 318 0160 524B     		ldr	r3, .L51
 319 0162 1B68     		ldr	r3, [r3]
 320 0164 23F0F802 		bic	r2, r3, #248
 321 0168 7B68     		ldr	r3, [r7, #4]
 322 016a 1969     		ldr	r1, [r3, #16]
 323 016c F823     		movs	r3, #248
 324 016e FB62     		str	r3, [r7, #44]
 325              	.LBB35:
 326              	.LBB36:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 327              		.loc 2 531 0
 328 0170 FB6A     		ldr	r3, [r7, #44]
 329              		.syntax unified
 330              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 331 0172 93FAA3F3 		rbit r3, r3
 332              	@ 0 "" 2
 333              		.thumb
 334              		.syntax unified
 335 0176 BB61     		str	r3, [r7, #24]
 336              		.loc 2 544 0
 337 0178 BB69     		ldr	r3, [r7, #24]
 338              	.LBE36:
 339              	.LBE35:
 340              		.loc 1 340 0
 341 017a B3FA83F3 		clz	r3, r3
 342 017e 01FA03F3 		lsl	r3, r1, r3
 343 0182 1343     		orrs	r3, r3, r2
 344 0184 0360     		str	r3, [r0]
 345 0186 15E0     		b	.L13
 346              	.L18:
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 347              		.loc 1 345 0
 348 0188 4A4B     		ldr	r3, .L51+8
 349 018a 0022     		movs	r2, #0
 350 018c 1A60     		str	r2, [r3]
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 351              		.loc 1 348 0
 352 018e FFF7FEFF 		bl	HAL_GetTick
 353 0192 7863     		str	r0, [r7, #52]
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 354              		.loc 1 351 0
 355 0194 08E0     		b	.L22
 356              	.L23:
ARM GAS  /tmp/ccGyomqm.s 			page 23


 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 357              		.loc 1 353 0
 358 0196 FFF7FEFF 		bl	HAL_GetTick
 359 019a 0246     		mov	r2, r0
 360 019c 7B6B     		ldr	r3, [r7, #52]
 361 019e D31A     		subs	r3, r2, r3
 362 01a0 022B     		cmp	r3, #2
 363 01a2 01D9     		bls	.L22
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 364              		.loc 1 355 0
 365 01a4 0323     		movs	r3, #3
 366 01a6 35E1     		b	.L7
 367              	.L22:
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 368              		.loc 1 351 0
 369 01a8 404B     		ldr	r3, .L51
 370 01aa 1B68     		ldr	r3, [r3]
 371 01ac 03F00203 		and	r3, r3, #2
 372 01b0 002B     		cmp	r3, #0
 373 01b2 F0D1     		bne	.L23
 374              	.L13:
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 375              		.loc 1 362 0
 376 01b4 7B68     		ldr	r3, [r7, #4]
 377 01b6 1B68     		ldr	r3, [r3]
 378 01b8 03F00803 		and	r3, r3, #8
 379 01bc 002B     		cmp	r3, #0
 380 01be 30D0     		beq	.L24
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSI State */
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 381              		.loc 1 368 0
 382 01c0 7B68     		ldr	r3, [r7, #4]
 383 01c2 5B69     		ldr	r3, [r3, #20]
 384 01c4 002B     		cmp	r3, #0
 385 01c6 16D0     		beq	.L25
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 386              		.loc 1 371 0
 387 01c8 3B4B     		ldr	r3, .L51+12
 388 01ca 0122     		movs	r2, #1
 389 01cc 1A60     		str	r2, [r3]
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
ARM GAS  /tmp/ccGyomqm.s 			page 24


 390              		.loc 1 374 0
 391 01ce FFF7FEFF 		bl	HAL_GetTick
 392 01d2 7863     		str	r0, [r7, #52]
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSI is ready */
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 393              		.loc 1 377 0
 394 01d4 08E0     		b	.L26
 395              	.L27:
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 396              		.loc 1 379 0
 397 01d6 FFF7FEFF 		bl	HAL_GetTick
 398 01da 0246     		mov	r2, r0
 399 01dc 7B6B     		ldr	r3, [r7, #52]
 400 01de D31A     		subs	r3, r2, r3
 401 01e0 022B     		cmp	r3, #2
 402 01e2 01D9     		bls	.L26
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 403              		.loc 1 381 0
 404 01e4 0323     		movs	r3, #3
 405 01e6 15E1     		b	.L7
 406              	.L26:
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 407              		.loc 1 377 0
 408 01e8 304B     		ldr	r3, .L51
 409 01ea 5B6F     		ldr	r3, [r3, #116]
 410 01ec 03F00203 		and	r3, r3, #2
 411 01f0 002B     		cmp	r3, #0
 412 01f2 F0D0     		beq	.L27
 413 01f4 15E0     		b	.L24
 414              	.L25:
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 415              		.loc 1 388 0
 416 01f6 304B     		ldr	r3, .L51+12
 417 01f8 0022     		movs	r2, #0
 418 01fa 1A60     		str	r2, [r3]
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 419              		.loc 1 391 0
 420 01fc FFF7FEFF 		bl	HAL_GetTick
 421 0200 7863     		str	r0, [r7, #52]
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 422              		.loc 1 394 0
 423 0202 08E0     		b	.L28
 424              	.L29:
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccGyomqm.s 			page 25


 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 425              		.loc 1 396 0
 426 0204 FFF7FEFF 		bl	HAL_GetTick
 427 0208 0246     		mov	r2, r0
 428 020a 7B6B     		ldr	r3, [r7, #52]
 429 020c D31A     		subs	r3, r2, r3
 430 020e 022B     		cmp	r3, #2
 431 0210 01D9     		bls	.L28
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 432              		.loc 1 398 0
 433 0212 0323     		movs	r3, #3
 434 0214 FEE0     		b	.L7
 435              	.L28:
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 436              		.loc 1 394 0
 437 0216 254B     		ldr	r3, .L51
 438 0218 5B6F     		ldr	r3, [r3, #116]
 439 021a 03F00203 		and	r3, r3, #2
 440 021e 002B     		cmp	r3, #0
 441 0220 F0D1     		bne	.L29
 442              	.L24:
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       } 
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 443              		.loc 1 404 0
 444 0222 7B68     		ldr	r3, [r7, #4]
 445 0224 1B68     		ldr	r3, [r3]
 446 0226 03F00403 		and	r3, r3, #4
 447 022a 002B     		cmp	r3, #0
 448 022c 66D0     		beq	.L30
 449              	.LBB37:
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Enable Power Clock*/
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 450              		.loc 1 410 0
 451 022e 0023     		movs	r3, #0
 452 0230 BB60     		str	r3, [r7, #8]
 453 0232 1E4A     		ldr	r2, .L51
 454 0234 1D4B     		ldr	r3, .L51
 455 0236 1B6C     		ldr	r3, [r3, #64]
 456 0238 43F08053 		orr	r3, r3, #268435456
 457 023c 1364     		str	r3, [r2, #64]
 458 023e 1B4B     		ldr	r3, .L51
 459 0240 1B6C     		ldr	r3, [r3, #64]
 460 0242 03F08053 		and	r3, r3, #268435456
 461 0246 BB60     		str	r3, [r7, #8]
 462 0248 BB68     		ldr	r3, [r7, #8]
 463              	.LBE37:
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Enable write access to Backup domain */
ARM GAS  /tmp/ccGyomqm.s 			page 26


 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     PWR->CR |= PWR_CR_DBP;
 464              		.loc 1 413 0
 465 024a 1C4A     		ldr	r2, .L51+16
 466 024c 1B4B     		ldr	r3, .L51+16
 467 024e 1B68     		ldr	r3, [r3]
 468 0250 43F48073 		orr	r3, r3, #256
 469 0254 1360     		str	r3, [r2]
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Wait for Backup domain Write protection enable */
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 470              		.loc 1 416 0
 471 0256 FFF7FEFF 		bl	HAL_GetTick
 472 025a 7863     		str	r0, [r7, #52]
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
 473              		.loc 1 418 0
 474 025c 08E0     		b	.L31
 475              	.L32:
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 476              		.loc 1 420 0
 477 025e FFF7FEFF 		bl	HAL_GetTick
 478 0262 0246     		mov	r2, r0
 479 0264 7B6B     		ldr	r3, [r7, #52]
 480 0266 D31A     		subs	r3, r2, r3
 481 0268 022B     		cmp	r3, #2
 482 026a 01D9     		bls	.L31
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_TIMEOUT;
 483              		.loc 1 422 0
 484 026c 0323     		movs	r3, #3
 485 026e D1E0     		b	.L7
 486              	.L31:
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 487              		.loc 1 418 0
 488 0270 124B     		ldr	r3, .L51+16
 489 0272 1B68     		ldr	r3, [r3]
 490 0274 03F48073 		and	r3, r3, #256
 491 0278 002B     		cmp	r3, #0
 492 027a F0D0     		beq	.L32
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }      
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 493              		.loc 1 427 0
 494 027c 104A     		ldr	r2, .L51+20
 495 027e 7B68     		ldr	r3, [r7, #4]
 496 0280 9B68     		ldr	r3, [r3, #8]
 497 0282 DBB2     		uxtb	r3, r3
 498 0284 1370     		strb	r3, [r2]
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSE State */
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 499              		.loc 1 429 0
 500 0286 7B68     		ldr	r3, [r7, #4]
 501 0288 9B68     		ldr	r3, [r3, #8]
 502 028a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccGyomqm.s 			page 27


 503 028c 21D0     		beq	.L33
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 504              		.loc 1 432 0
 505 028e FFF7FEFF 		bl	HAL_GetTick
 506 0292 7863     		str	r0, [r7, #52]
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 507              		.loc 1 435 0
 508 0294 16E0     		b	.L34
 509              	.L35:
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 510              		.loc 1 437 0
 511 0296 FFF7FEFF 		bl	HAL_GetTick
 512 029a 0246     		mov	r2, r0
 513 029c 7B6B     		ldr	r3, [r7, #52]
 514 029e D31A     		subs	r3, r2, r3
 515 02a0 41F28832 		movw	r2, #5000
 516 02a4 9342     		cmp	r3, r2
 517 02a6 0DD9     		bls	.L34
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 518              		.loc 1 439 0
 519 02a8 0323     		movs	r3, #3
 520 02aa B3E0     		b	.L7
 521              	.L52:
 522              		.align	2
 523              	.L51:
 524 02ac 00380240 		.word	1073887232
 525 02b0 02380240 		.word	1073887234
 526 02b4 00004742 		.word	1111949312
 527 02b8 800E4742 		.word	1111953024
 528 02bc 00700040 		.word	1073770496
 529 02c0 70380240 		.word	1073887344
 530              	.L34:
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 531              		.loc 1 435 0
 532 02c4 554B     		ldr	r3, .L53
 533 02c6 1B6F     		ldr	r3, [r3, #112]
 534 02c8 03F00203 		and	r3, r3, #2
 535 02cc 002B     		cmp	r3, #0
 536 02ce E2D0     		beq	.L35
 537 02d0 14E0     		b	.L30
 538              	.L33:
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 539              		.loc 1 446 0
 540 02d2 FFF7FEFF 		bl	HAL_GetTick
 541 02d6 7863     		str	r0, [r7, #52]
ARM GAS  /tmp/ccGyomqm.s 			page 28


 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 542              		.loc 1 449 0
 543 02d8 0AE0     		b	.L36
 544              	.L37:
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 545              		.loc 1 451 0
 546 02da FFF7FEFF 		bl	HAL_GetTick
 547 02de 0246     		mov	r2, r0
 548 02e0 7B6B     		ldr	r3, [r7, #52]
 549 02e2 D31A     		subs	r3, r2, r3
 550 02e4 41F28832 		movw	r2, #5000
 551 02e8 9342     		cmp	r3, r2
 552 02ea 01D9     		bls	.L36
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 553              		.loc 1 453 0
 554 02ec 0323     		movs	r3, #3
 555 02ee 91E0     		b	.L7
 556              	.L36:
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 557              		.loc 1 449 0
 558 02f0 4A4B     		ldr	r3, .L53
 559 02f2 1B6F     		ldr	r3, [r3, #112]
 560 02f4 03F00203 		and	r3, r3, #2
 561 02f8 002B     		cmp	r3, #0
 562 02fa EED1     		bne	.L37
 563              	.L30:
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 564              		.loc 1 461 0
 565 02fc 7B68     		ldr	r3, [r7, #4]
 566 02fe 9B69     		ldr	r3, [r3, #24]
 567 0300 002B     		cmp	r3, #0
 568 0302 00F08680 		beq	.L38
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 569              		.loc 1 464 0
 570 0306 454B     		ldr	r3, .L53
 571 0308 9B68     		ldr	r3, [r3, #8]
 572 030a 03F00C03 		and	r3, r3, #12
 573 030e 082B     		cmp	r3, #8
 574 0310 7DD0     		beq	.L39
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     { 
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 575              		.loc 1 466 0
 576 0312 7B68     		ldr	r3, [r7, #4]
 577 0314 9B69     		ldr	r3, [r3, #24]
ARM GAS  /tmp/ccGyomqm.s 			page 29


 578 0316 022B     		cmp	r3, #2
 579 0318 62D1     		bne	.L40
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the parameters */
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the main PLL. */
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 580              		.loc 1 476 0
 581 031a 414B     		ldr	r3, .L53+4
 582 031c 0022     		movs	r2, #0
 583 031e 1A60     		str	r2, [r3]
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 584              		.loc 1 479 0
 585 0320 FFF7FEFF 		bl	HAL_GetTick
 586 0324 7863     		str	r0, [r7, #52]
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 587              		.loc 1 482 0
 588 0326 08E0     		b	.L41
 589              	.L42:
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 590              		.loc 1 484 0
 591 0328 FFF7FEFF 		bl	HAL_GetTick
 592 032c 0246     		mov	r2, r0
 593 032e 7B6B     		ldr	r3, [r7, #52]
 594 0330 D31A     		subs	r3, r2, r3
 595 0332 022B     		cmp	r3, #2
 596 0334 01D9     		bls	.L41
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 597              		.loc 1 486 0
 598 0336 0323     		movs	r3, #3
 599 0338 6CE0     		b	.L7
 600              	.L41:
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 601              		.loc 1 482 0
 602 033a 384B     		ldr	r3, .L53
 603 033c 1B68     		ldr	r3, [r3]
 604 033e 03F00073 		and	r3, r3, #33554432
 605 0342 002B     		cmp	r3, #0
 606 0344 F0D1     		bne	.L42
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }        
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                  
 607              		.loc 1 491 0
 608 0346 3548     		ldr	r0, .L53
ARM GAS  /tmp/ccGyomqm.s 			page 30


 609 0348 7B68     		ldr	r3, [r7, #4]
 610 034a DA69     		ldr	r2, [r3, #28]
 611 034c 7B68     		ldr	r3, [r7, #4]
 612 034e 1B6A     		ldr	r3, [r3, #32]
 613 0350 1A43     		orrs	r2, r2, r3
 614 0352 7B68     		ldr	r3, [r7, #4]
 615 0354 596A     		ldr	r1, [r3, #36]
 616 0356 47F6C073 		movw	r3, #32704
 617 035a BB62     		str	r3, [r7, #40]
 618              	.LBB38:
 619              	.LBB39:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620              		.loc 2 531 0
 621 035c BB6A     		ldr	r3, [r7, #40]
 622              		.syntax unified
 623              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 624 035e 93FAA3F3 		rbit r3, r3
 625              	@ 0 "" 2
 626              		.thumb
 627              		.syntax unified
 628 0362 FB60     		str	r3, [r7, #12]
 629              		.loc 2 544 0
 630 0364 FB68     		ldr	r3, [r7, #12]
 631              	.LBE39:
 632              	.LBE38:
 633              		.loc 1 491 0
 634 0366 B3FA83F3 		clz	r3, r3
 635 036a 01FA03F3 		lsl	r3, r1, r3
 636 036e 1A43     		orrs	r2, r2, r3
 637 0370 7B68     		ldr	r3, [r7, #4]
 638 0372 9B6A     		ldr	r3, [r3, #40]
 639 0374 5B08     		lsrs	r3, r3, #1
 640 0376 591E     		subs	r1, r3, #1
 641 0378 4FF44033 		mov	r3, #196608
 642 037c 7B62     		str	r3, [r7, #36]
 643              	.LBB40:
 644              	.LBB41:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 645              		.loc 2 531 0
 646 037e 7B6A     		ldr	r3, [r7, #36]
 647              		.syntax unified
 648              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 649 0380 93FAA3F3 		rbit r3, r3
 650              	@ 0 "" 2
 651              		.thumb
 652              		.syntax unified
 653 0384 3B61     		str	r3, [r7, #16]
 654              		.loc 2 544 0
 655 0386 3B69     		ldr	r3, [r7, #16]
 656              	.LBE41:
 657              	.LBE40:
 658              		.loc 1 491 0
 659 0388 B3FA83F3 		clz	r3, r3
 660 038c 01FA03F3 		lsl	r3, r1, r3
 661 0390 1A43     		orrs	r2, r2, r3
 662 0392 7B68     		ldr	r3, [r7, #4]
 663 0394 D96A     		ldr	r1, [r3, #44]
ARM GAS  /tmp/ccGyomqm.s 			page 31


 664 0396 4FF07063 		mov	r3, #251658240
 665 039a 3B63     		str	r3, [r7, #48]
 666              	.LBB42:
 667              	.LBB43:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 668              		.loc 2 531 0
 669 039c 3B6B     		ldr	r3, [r7, #48]
 670              		.syntax unified
 671              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 672 039e 93FAA3F3 		rbit r3, r3
 673              	@ 0 "" 2
 674              		.thumb
 675              		.syntax unified
 676 03a2 7B61     		str	r3, [r7, #20]
 677              		.loc 2 544 0
 678 03a4 7B69     		ldr	r3, [r7, #20]
 679              	.LBE43:
 680              	.LBE42:
 681              		.loc 1 491 0
 682 03a6 B3FA83F3 		clz	r3, r3
 683 03aa 01FA03F3 		lsl	r3, r1, r3
 684 03ae 1343     		orrs	r3, r3, r2
 685 03b0 4360     		str	r3, [r0, #4]
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                                  RCC_OscInitStruct->PLL.PLLM                                       
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                                  (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))   
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                                  (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PL
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                                  (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Enable the main PLL. */
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 686              		.loc 1 497 0
 687 03b2 1B4B     		ldr	r3, .L53+4
 688 03b4 0122     		movs	r2, #1
 689 03b6 1A60     		str	r2, [r3]
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 690              		.loc 1 500 0
 691 03b8 FFF7FEFF 		bl	HAL_GetTick
 692 03bc 7863     		str	r0, [r7, #52]
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 693              		.loc 1 503 0
 694 03be 08E0     		b	.L46
 695              	.L47:
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 696              		.loc 1 505 0
 697 03c0 FFF7FEFF 		bl	HAL_GetTick
 698 03c4 0246     		mov	r2, r0
 699 03c6 7B6B     		ldr	r3, [r7, #52]
 700 03c8 D31A     		subs	r3, r2, r3
 701 03ca 022B     		cmp	r3, #2
 702 03cc 01D9     		bls	.L46
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 703              		.loc 1 507 0
ARM GAS  /tmp/ccGyomqm.s 			page 32


 704 03ce 0323     		movs	r3, #3
 705 03d0 20E0     		b	.L7
 706              	.L46:
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 707              		.loc 1 503 0
 708 03d2 124B     		ldr	r3, .L53
 709 03d4 1B68     		ldr	r3, [r3]
 710 03d6 03F00073 		and	r3, r3, #33554432
 711 03da 002B     		cmp	r3, #0
 712 03dc F0D0     		beq	.L47
 713 03de 18E0     		b	.L38
 714              	.L40:
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the main PLL. */
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 715              		.loc 1 514 0
 716 03e0 0F4B     		ldr	r3, .L53+4
 717 03e2 0022     		movs	r2, #0
 718 03e4 1A60     		str	r2, [r3]
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 719              		.loc 1 517 0
 720 03e6 FFF7FEFF 		bl	HAL_GetTick
 721 03ea 7863     		str	r0, [r7, #52]
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 722              		.loc 1 520 0
 723 03ec 08E0     		b	.L48
 724              	.L49:
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 725              		.loc 1 522 0
 726 03ee FFF7FEFF 		bl	HAL_GetTick
 727 03f2 0246     		mov	r2, r0
 728 03f4 7B6B     		ldr	r3, [r7, #52]
 729 03f6 D31A     		subs	r3, r2, r3
 730 03f8 022B     		cmp	r3, #2
 731 03fa 01D9     		bls	.L48
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 732              		.loc 1 524 0
 733 03fc 0323     		movs	r3, #3
 734 03fe 09E0     		b	.L7
 735              	.L48:
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 736              		.loc 1 520 0
 737 0400 064B     		ldr	r3, .L53
 738 0402 1B68     		ldr	r3, [r3]
 739 0404 03F00073 		and	r3, r3, #33554432
 740 0408 002B     		cmp	r3, #0
 741 040a F0D1     		bne	.L49
ARM GAS  /tmp/ccGyomqm.s 			page 33


 742 040c 01E0     		b	.L38
 743              	.L39:
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 744              		.loc 1 531 0
 745 040e 0123     		movs	r3, #1
 746 0410 00E0     		b	.L7
 747              	.L38:
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 748              		.loc 1 534 0
 749 0412 0023     		movs	r3, #0
 750              	.L7:
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 751              		.loc 1 535 0
 752 0414 1846     		mov	r0, r3
 753 0416 3837     		adds	r7, r7, #56
 754              	.LCFI7:
 755              		.cfi_def_cfa_offset 8
 756 0418 BD46     		mov	sp, r7
 757              	.LCFI8:
 758              		.cfi_def_cfa_register 13
 759              		@ sp needed
 760 041a 80BD     		pop	{r7, pc}
 761              	.L54:
 762              		.align	2
 763              	.L53:
 764 041c 00380240 		.word	1073887232
 765 0420 60004742 		.word	1111949408
 766              		.cfi_endproc
 767              	.LFE127:
 769              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 770              		.align	2
 771              		.global	HAL_RCC_ClockConfig
 772              		.thumb
 773              		.thumb_func
 775              	HAL_RCC_ClockConfig:
 776              	.LFB128:
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified 
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_OscInitTypeDef structure that
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  FLatency: FLASH Latency, this parameter depend on device selected
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * 
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
ARM GAS  /tmp/ccGyomqm.s 			page 34


 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 777              		.loc 1 563 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 24
 780              		@ frame_needed = 1, uses_anonymous_args = 0
 781 0000 80B5     		push	{r7, lr}
 782              	.LCFI9:
 783              		.cfi_def_cfa_offset 8
 784              		.cfi_offset 7, -8
 785              		.cfi_offset 14, -4
 786 0002 86B0     		sub	sp, sp, #24
 787              	.LCFI10:
 788              		.cfi_def_cfa_offset 32
 789 0004 00AF     		add	r7, sp, #0
 790              	.LCFI11:
 791              		.cfi_def_cfa_register 7
 792 0006 7860     		str	r0, [r7, #4]
 793 0008 3960     		str	r1, [r7]
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart = 0U;   
 794              		.loc 1 564 0
 795 000a 0023     		movs	r3, #0
 796 000c 7B61     		str	r3, [r7, #20]
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     must be correctly programmed according to the frequency of the CPU clock 
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     (HCLK) and the supply voltage of the device. */
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 797              		.loc 1 575 0
 798 000e 814B     		ldr	r3, .L80
 799 0010 1B68     		ldr	r3, [r3]
 800 0012 03F00F02 		and	r2, r3, #15
 801 0016 3B68     		ldr	r3, [r7]
 802 0018 9A42     		cmp	r2, r3
 803 001a 0CD2     		bcs	.L56
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {    
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
ARM GAS  /tmp/ccGyomqm.s 			page 35


 804              		.loc 1 578 0
 805 001c 7D4B     		ldr	r3, .L80
 806 001e 3A68     		ldr	r2, [r7]
 807 0020 D2B2     		uxtb	r2, r2
 808 0022 1A70     		strb	r2, [r3]
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 809              		.loc 1 582 0
 810 0024 7B4B     		ldr	r3, .L80
 811 0026 1B68     		ldr	r3, [r3]
 812 0028 03F00F02 		and	r2, r3, #15
 813 002c 3B68     		ldr	r3, [r7]
 814 002e 9A42     		cmp	r2, r3
 815 0030 01D0     		beq	.L56
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 816              		.loc 1 584 0
 817 0032 0123     		movs	r3, #1
 818 0034 EAE0     		b	.L57
 819              	.L56:
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 820              		.loc 1 589 0
 821 0036 7B68     		ldr	r3, [r7, #4]
 822 0038 1B68     		ldr	r3, [r3]
 823 003a 03F00203 		and	r3, r3, #2
 824 003e 002B     		cmp	r3, #0
 825 0040 08D0     		beq	.L58
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 826              		.loc 1 592 0
 827 0042 7549     		ldr	r1, .L80+4
 828 0044 744B     		ldr	r3, .L80+4
 829 0046 9B68     		ldr	r3, [r3, #8]
 830 0048 23F0F002 		bic	r2, r3, #240
 831 004c 7B68     		ldr	r3, [r7, #4]
 832 004e 9B68     		ldr	r3, [r3, #8]
 833 0050 1343     		orrs	r3, r3, r2
 834 0052 8B60     		str	r3, [r1, #8]
 835              	.L58:
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 836              		.loc 1 596 0
 837 0054 7B68     		ldr	r3, [r7, #4]
 838 0056 1B68     		ldr	r3, [r3]
 839 0058 03F00103 		and	r3, r3, #1
 840 005c 002B     		cmp	r3, #0
 841 005e 00F08680 		beq	.L59
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {    
ARM GAS  /tmp/ccGyomqm.s 			page 36


 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 842              		.loc 1 601 0
 843 0062 7B68     		ldr	r3, [r7, #4]
 844 0064 5B68     		ldr	r3, [r3, #4]
 845 0066 012B     		cmp	r3, #1
 846 0068 07D1     		bne	.L60
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSE ready flag */  
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 847              		.loc 1 604 0
 848 006a 6B4B     		ldr	r3, .L80+4
 849 006c 1B68     		ldr	r3, [r3]
 850 006e 03F40033 		and	r3, r3, #131072
 851 0072 002B     		cmp	r3, #0
 852 0074 19D1     		bne	.L61
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 853              		.loc 1 606 0
 854 0076 0123     		movs	r3, #1
 855 0078 C8E0     		b	.L57
 856              	.L60:
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 857              		.loc 1 610 0
 858 007a 7B68     		ldr	r3, [r7, #4]
 859 007c 5B68     		ldr	r3, [r3, #4]
 860 007e 022B     		cmp	r3, #2
 861 0080 03D0     		beq	.L62
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 862              		.loc 1 611 0 discriminator 1
 863 0082 7B68     		ldr	r3, [r7, #4]
 864 0084 5B68     		ldr	r3, [r3, #4]
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 865              		.loc 1 610 0 discriminator 1
 866 0086 032B     		cmp	r3, #3
 867 0088 07D1     		bne	.L63
 868              	.L62:
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the PLL ready flag */  
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 869              		.loc 1 614 0
 870 008a 634B     		ldr	r3, .L80+4
 871 008c 1B68     		ldr	r3, [r3]
 872 008e 03F00073 		and	r3, r3, #33554432
 873 0092 002B     		cmp	r3, #0
 874 0094 09D1     		bne	.L61
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 875              		.loc 1 616 0
 876 0096 0123     		movs	r3, #1
 877 0098 B8E0     		b	.L57
 878              	.L63:
ARM GAS  /tmp/ccGyomqm.s 			page 37


 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSI ready flag */  
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 879              		.loc 1 623 0
 880 009a 5F4B     		ldr	r3, .L80+4
 881 009c 1B68     		ldr	r3, [r3]
 882 009e 03F00203 		and	r3, r3, #2
 883 00a2 002B     		cmp	r3, #0
 884 00a4 01D1     		bne	.L61
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 885              		.loc 1 625 0
 886 00a6 0123     		movs	r3, #1
 887 00a8 B0E0     		b	.L57
 888              	.L61:
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 889              		.loc 1 629 0
 890 00aa 5B49     		ldr	r1, .L80+4
 891 00ac 5A4B     		ldr	r3, .L80+4
 892 00ae 9B68     		ldr	r3, [r3, #8]
 893 00b0 23F00302 		bic	r2, r3, #3
 894 00b4 7B68     		ldr	r3, [r7, #4]
 895 00b6 5B68     		ldr	r3, [r3, #4]
 896 00b8 1343     		orrs	r3, r3, r2
 897 00ba 8B60     		str	r3, [r1, #8]
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Get Start Tick*/
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 898              		.loc 1 631 0
 899 00bc FFF7FEFF 		bl	HAL_GetTick
 900 00c0 7861     		str	r0, [r7, #20]
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 901              		.loc 1 633 0
 902 00c2 7B68     		ldr	r3, [r7, #4]
 903 00c4 5B68     		ldr	r3, [r3, #4]
 904 00c6 012B     		cmp	r3, #1
 905 00c8 12D1     		bne	.L65
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 906              		.loc 1 635 0
 907 00ca 0AE0     		b	.L66
 908              	.L67:
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 909              		.loc 1 637 0
 910 00cc FFF7FEFF 		bl	HAL_GetTick
 911 00d0 0246     		mov	r2, r0
 912 00d2 7B69     		ldr	r3, [r7, #20]
 913 00d4 D31A     		subs	r3, r2, r3
 914 00d6 41F28832 		movw	r2, #5000
ARM GAS  /tmp/ccGyomqm.s 			page 38


 915 00da 9342     		cmp	r3, r2
 916 00dc 01D9     		bls	.L66
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 917              		.loc 1 639 0
 918 00de 0323     		movs	r3, #3
 919 00e0 94E0     		b	.L57
 920              	.L66:
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 921              		.loc 1 635 0
 922 00e2 4D4B     		ldr	r3, .L80+4
 923 00e4 9B68     		ldr	r3, [r3, #8]
 924 00e6 03F00C03 		and	r3, r3, #12
 925 00ea 042B     		cmp	r3, #4
 926 00ec EED1     		bne	.L67
 927 00ee 3EE0     		b	.L59
 928              	.L65:
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 929              		.loc 1 643 0
 930 00f0 7B68     		ldr	r3, [r7, #4]
 931 00f2 5B68     		ldr	r3, [r3, #4]
 932 00f4 022B     		cmp	r3, #2
 933 00f6 12D1     		bne	.L68
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 934              		.loc 1 645 0
 935 00f8 0AE0     		b	.L69
 936              	.L70:
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 937              		.loc 1 647 0
 938 00fa FFF7FEFF 		bl	HAL_GetTick
 939 00fe 0246     		mov	r2, r0
 940 0100 7B69     		ldr	r3, [r7, #20]
 941 0102 D31A     		subs	r3, r2, r3
 942 0104 41F28832 		movw	r2, #5000
 943 0108 9342     		cmp	r3, r2
 944 010a 01D9     		bls	.L69
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 945              		.loc 1 649 0
 946 010c 0323     		movs	r3, #3
 947 010e 7DE0     		b	.L57
 948              	.L69:
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 949              		.loc 1 645 0
 950 0110 414B     		ldr	r3, .L80+4
 951 0112 9B68     		ldr	r3, [r3, #8]
 952 0114 03F00C03 		and	r3, r3, #12
 953 0118 082B     		cmp	r3, #8
 954 011a EED1     		bne	.L70
 955 011c 27E0     		b	.L59
 956              	.L68:
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
ARM GAS  /tmp/ccGyomqm.s 			page 39


 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 957              		.loc 1 653 0
 958 011e 7B68     		ldr	r3, [r7, #4]
 959 0120 5B68     		ldr	r3, [r3, #4]
 960 0122 032B     		cmp	r3, #3
 961 0124 1DD1     		bne	.L74
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 962              		.loc 1 655 0
 963 0126 0AE0     		b	.L72
 964              	.L73:
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 965              		.loc 1 657 0
 966 0128 FFF7FEFF 		bl	HAL_GetTick
 967 012c 0246     		mov	r2, r0
 968 012e 7B69     		ldr	r3, [r7, #20]
 969 0130 D31A     		subs	r3, r2, r3
 970 0132 41F28832 		movw	r2, #5000
 971 0136 9342     		cmp	r3, r2
 972 0138 01D9     		bls	.L72
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 973              		.loc 1 659 0
 974 013a 0323     		movs	r3, #3
 975 013c 66E0     		b	.L57
 976              	.L72:
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 977              		.loc 1 655 0
 978 013e 364B     		ldr	r3, .L80+4
 979 0140 9B68     		ldr	r3, [r3, #8]
 980 0142 03F00C03 		and	r3, r3, #12
 981 0146 0C2B     		cmp	r3, #12
 982 0148 EED1     		bne	.L73
 983 014a 10E0     		b	.L59
 984              	.L75:
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 985              		.loc 1 667 0
 986 014c FFF7FEFF 		bl	HAL_GetTick
 987 0150 0246     		mov	r2, r0
 988 0152 7B69     		ldr	r3, [r7, #20]
 989 0154 D31A     		subs	r3, r2, r3
 990 0156 41F28832 		movw	r2, #5000
 991 015a 9342     		cmp	r3, r2
 992 015c 01D9     		bls	.L74
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 993              		.loc 1 669 0
ARM GAS  /tmp/ccGyomqm.s 			page 40


 994 015e 0323     		movs	r3, #3
 995 0160 54E0     		b	.L57
 996              	.L74:
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 997              		.loc 1 665 0
 998 0162 2D4B     		ldr	r3, .L80+4
 999 0164 9B68     		ldr	r3, [r3, #8]
 1000 0166 03F00C03 		and	r3, r3, #12
 1001 016a 002B     		cmp	r3, #0
 1002 016c EED1     		bne	.L75
 1003              	.L59:
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }    
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 1004              		.loc 1 676 0
 1005 016e 294B     		ldr	r3, .L80
 1006 0170 1B68     		ldr	r3, [r3]
 1007 0172 03F00F02 		and	r2, r3, #15
 1008 0176 3B68     		ldr	r3, [r7]
 1009 0178 9A42     		cmp	r2, r3
 1010 017a 0CD9     		bls	.L76
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   { 
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****      /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1011              		.loc 1 679 0
 1012 017c 254B     		ldr	r3, .L80
 1013 017e 3A68     		ldr	r2, [r7]
 1014 0180 D2B2     		uxtb	r2, r2
 1015 0182 1A70     		strb	r2, [r3]
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1016              		.loc 1 683 0
 1017 0184 234B     		ldr	r3, .L80
 1018 0186 1B68     		ldr	r3, [r3]
 1019 0188 03F00F02 		and	r2, r3, #15
 1020 018c 3B68     		ldr	r3, [r7]
 1021 018e 9A42     		cmp	r2, r3
 1022 0190 01D0     		beq	.L76
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 1023              		.loc 1 685 0
 1024 0192 0123     		movs	r3, #1
 1025 0194 3AE0     		b	.L57
 1026              	.L76:
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  }
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1027              		.loc 1 690 0
 1028 0196 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccGyomqm.s 			page 41


 1029 0198 1B68     		ldr	r3, [r3]
 1030 019a 03F00403 		and	r3, r3, #4
 1031 019e 002B     		cmp	r3, #0
 1032 01a0 08D0     		beq	.L77
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1033              		.loc 1 693 0
 1034 01a2 1D49     		ldr	r1, .L80+4
 1035 01a4 1C4B     		ldr	r3, .L80+4
 1036 01a6 9B68     		ldr	r3, [r3, #8]
 1037 01a8 23F4E052 		bic	r2, r3, #7168
 1038 01ac 7B68     		ldr	r3, [r7, #4]
 1039 01ae DB68     		ldr	r3, [r3, #12]
 1040 01b0 1343     		orrs	r3, r3, r2
 1041 01b2 8B60     		str	r3, [r1, #8]
 1042              	.L77:
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1043              		.loc 1 697 0
 1044 01b4 7B68     		ldr	r3, [r7, #4]
 1045 01b6 1B68     		ldr	r3, [r3]
 1046 01b8 03F00803 		and	r3, r3, #8
 1047 01bc 002B     		cmp	r3, #0
 1048 01be 09D0     		beq	.L78
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 1049              		.loc 1 700 0
 1050 01c0 1549     		ldr	r1, .L80+4
 1051 01c2 154B     		ldr	r3, .L80+4
 1052 01c4 9B68     		ldr	r3, [r3, #8]
 1053 01c6 23F46042 		bic	r2, r3, #57344
 1054 01ca 7B68     		ldr	r3, [r7, #4]
 1055 01cc 1B69     		ldr	r3, [r3, #16]
 1056 01ce DB00     		lsls	r3, r3, #3
 1057 01d0 1343     		orrs	r3, r3, r2
 1058 01d2 8B60     		str	r3, [r1, #8]
 1059              	.L78:
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POS
 1060              		.loc 1 704 0
 1061 01d4 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1062 01d8 0146     		mov	r1, r0
 1063 01da 0F4B     		ldr	r3, .L80+4
 1064 01dc 9B68     		ldr	r3, [r3, #8]
 1065 01de 03F0F002 		and	r2, r3, #240
 1066 01e2 F023     		movs	r3, #240
 1067 01e4 3B61     		str	r3, [r7, #16]
 1068              	.LBB44:
 1069              	.LBB45:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1070              		.loc 2 531 0
ARM GAS  /tmp/ccGyomqm.s 			page 42


 1071 01e6 3B69     		ldr	r3, [r7, #16]
 1072              		.syntax unified
 1073              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1074 01e8 93FAA3F3 		rbit r3, r3
 1075              	@ 0 "" 2
 1076              		.thumb
 1077              		.syntax unified
 1078 01ec FB60     		str	r3, [r7, #12]
 1079              		.loc 2 544 0
 1080 01ee FB68     		ldr	r3, [r7, #12]
 1081              	.LBE45:
 1082              	.LBE44:
 1083              		.loc 1 704 0
 1084 01f0 B3FA83F3 		clz	r3, r3
 1085 01f4 22FA03F3 		lsr	r3, r2, r3
 1086 01f8 084A     		ldr	r2, .L80+8
 1087 01fa D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1088 01fc 21FA03F3 		lsr	r3, r1, r3
 1089 0200 074A     		ldr	r2, .L80+12
 1090 0202 1360     		str	r3, [r2]
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1091              		.loc 1 707 0
 1092 0204 0020     		movs	r0, #0
 1093 0206 FFF7FEFF 		bl	HAL_InitTick
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 1094              		.loc 1 709 0
 1095 020a 0023     		movs	r3, #0
 1096              	.L57:
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1097              		.loc 1 710 0
 1098 020c 1846     		mov	r0, r3
 1099 020e 1837     		adds	r7, r7, #24
 1100              	.LCFI12:
 1101              		.cfi_def_cfa_offset 8
 1102 0210 BD46     		mov	sp, r7
 1103              	.LCFI13:
 1104              		.cfi_def_cfa_register 13
 1105              		@ sp needed
 1106 0212 80BD     		pop	{r7, pc}
 1107              	.L81:
 1108              		.align	2
 1109              	.L80:
 1110 0214 003C0240 		.word	1073888256
 1111 0218 00380240 		.word	1073887232
 1112 021c 00000000 		.word	APBAHBPrescTable
 1113 0220 00000000 		.word	SystemCoreClock
 1114              		.cfi_endproc
 1115              	.LFE128:
 1117              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1118              		.align	2
 1119              		.global	HAL_RCC_MCOConfig
 1120              		.thumb
 1121              		.thumb_func
 1123              	HAL_RCC_MCOConfig:
ARM GAS  /tmp/ccGyomqm.s 			page 43


 1124              	.LFB129:
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @}
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions 
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *  @brief   RCC clocks control functions 
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @verbatim   
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                       ##### Peripheral Control functions #####
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================  
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     frequencies.
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @endverbatim
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8) or on MCO2 pin(PC9).
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   PA8/PC9 should be configured in alternate function mode.
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCOx: specifies the output direction for the clock source.
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1: Clock source to output on MCO1 pin(PA8).
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2: Clock source to output on MCO2 pin(PC9).
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI: HSI clock selected as MCO1 source
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_LSE: LSE clock selected as MCO1 source
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSE: HSE clock selected as MCO1 source
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_PLLCLK: main PLL clock selected as MCO1 source
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source, available for a
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_I2SCLK: I2SCLK clock selected as MCO2 source, available only for
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_HSE: HSE clock selected as MCO2 source
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLCLK: main PLL clock selected as MCO2 source
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCODiv: specifies the MCOx prescaler.
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_1: no division applied to MCOx clock
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_2: division by 2 applied to MCOx clock
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_3: division by 3 applied to MCOx clock
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1125              		.loc 1 761 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 48
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccGyomqm.s 			page 44


 1130              	.LCFI14:
 1131              		.cfi_def_cfa_offset 8
 1132              		.cfi_offset 7, -8
 1133              		.cfi_offset 14, -4
 1134 0002 8CB0     		sub	sp, sp, #48
 1135              	.LCFI15:
 1136              		.cfi_def_cfa_offset 56
 1137 0004 00AF     		add	r7, sp, #0
 1138              	.LCFI16:
 1139              		.cfi_def_cfa_register 7
 1140 0006 F860     		str	r0, [r7, #12]
 1141 0008 B960     		str	r1, [r7, #8]
 1142 000a 7A60     		str	r2, [r7, #4]
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* RCC_MCO1 */
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(RCC_MCOx == RCC_MCO1)
 1143              		.loc 1 767 0
 1144 000c FB68     		ldr	r3, [r7, #12]
 1145 000e 002B     		cmp	r3, #0
 1146 0010 29D1     		bne	.L83
 1147              	.LBB46:
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* MCO1 Clock Enable */
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __MCO1_CLK_ENABLE();
 1148              		.loc 1 772 0
 1149 0012 0023     		movs	r3, #0
 1150 0014 BB61     		str	r3, [r7, #24]
 1151 0016 2B4A     		ldr	r2, .L86
 1152 0018 2A4B     		ldr	r3, .L86
 1153 001a 1B6B     		ldr	r3, [r3, #48]
 1154 001c 43F00103 		orr	r3, r3, #1
 1155 0020 1363     		str	r3, [r2, #48]
 1156 0022 284B     		ldr	r3, .L86
 1157 0024 1B6B     		ldr	r3, [r3, #48]
 1158 0026 03F00103 		and	r3, r3, #1
 1159 002a BB61     		str	r3, [r7, #24]
 1160 002c BB69     		ldr	r3, [r7, #24]
 1161              	.LBE46:
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Configure the MCO1 pin in alternate function mode */    
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO1_PIN;
 1162              		.loc 1 775 0
 1163 002e 4FF48073 		mov	r3, #256
 1164 0032 FB61     		str	r3, [r7, #28]
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1165              		.loc 1 776 0
 1166 0034 0223     		movs	r3, #2
 1167 0036 3B62     		str	r3, [r7, #32]
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 1168              		.loc 1 777 0
 1169 0038 0323     		movs	r3, #3
 1170 003a BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/ccGyomqm.s 			page 45


 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1171              		.loc 1 778 0
 1172 003c 0023     		movs	r3, #0
 1173 003e 7B62     		str	r3, [r7, #36]
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1174              		.loc 1 779 0
 1175 0040 0023     		movs	r3, #0
 1176 0042 FB62     		str	r3, [r7, #44]
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 1177              		.loc 1 780 0
 1178 0044 07F11C03 		add	r3, r7, #28
 1179 0048 1946     		mov	r1, r3
 1180 004a 1F48     		ldr	r0, .L86+4
 1181 004c FFF7FEFF 		bl	HAL_GPIO_Init
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 1182              		.loc 1 783 0
 1183 0050 1C48     		ldr	r0, .L86
 1184 0052 1C4B     		ldr	r3, .L86
 1185 0054 9B68     		ldr	r3, [r3, #8]
 1186 0056 23F0EC62 		bic	r2, r3, #123731968
 1187 005a B968     		ldr	r1, [r7, #8]
 1188 005c 7B68     		ldr	r3, [r7, #4]
 1189 005e 0B43     		orrs	r3, r3, r1
 1190 0060 1343     		orrs	r3, r3, r2
 1191 0062 8360     		str	r3, [r0, #8]
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****    /* This RCC MCO1 enable feature is available only on STM32F410xx devices */
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #if defined(RCC_CFGR_MCO1EN)
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_MCO1_ENABLE();
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #endif /* RCC_CFGR_MCO1EN */    
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #if defined(RCC_CFGR_MCO2)
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* MCO2 Clock Enable */
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __MCO2_CLK_ENABLE();
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Configure the MCO2 pin in alternate function mode */
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO2_PIN;
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)))
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****    /* This RCC MCO2 enable feature is available only on STM32F410Rx devices */
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #if defined(RCC_CFGR_MCO2EN)
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_MCO2_ENABLE();
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #endif /* RCC_CFGR_MCO2EN */
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
ARM GAS  /tmp/ccGyomqm.s 			page 46


 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #endif /* RCC_CFGR_MCO2 */
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1192              		.loc 1 815 0
 1193 0064 29E0     		b	.L85
 1194              	.L83:
 1195              	.LBB47:
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 1196              		.loc 1 796 0
 1197 0066 0023     		movs	r3, #0
 1198 0068 7B61     		str	r3, [r7, #20]
 1199 006a 164A     		ldr	r2, .L86
 1200 006c 154B     		ldr	r3, .L86
 1201 006e 1B6B     		ldr	r3, [r3, #48]
 1202 0070 43F00403 		orr	r3, r3, #4
 1203 0074 1363     		str	r3, [r2, #48]
 1204 0076 134B     		ldr	r3, .L86
 1205 0078 1B6B     		ldr	r3, [r3, #48]
 1206 007a 03F00403 		and	r3, r3, #4
 1207 007e 7B61     		str	r3, [r7, #20]
 1208 0080 7B69     		ldr	r3, [r7, #20]
 1209              	.LBE47:
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1210              		.loc 1 799 0
 1211 0082 4FF40073 		mov	r3, #512
 1212 0086 FB61     		str	r3, [r7, #28]
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 1213              		.loc 1 800 0
 1214 0088 0223     		movs	r3, #2
 1215 008a 3B62     		str	r3, [r7, #32]
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1216              		.loc 1 801 0
 1217 008c 0323     		movs	r3, #3
 1218 008e BB62     		str	r3, [r7, #40]
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1219              		.loc 1 802 0
 1220 0090 0023     		movs	r3, #0
 1221 0092 7B62     		str	r3, [r7, #36]
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 1222              		.loc 1 803 0
 1223 0094 0023     		movs	r3, #0
 1224 0096 FB62     		str	r3, [r7, #44]
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 1225              		.loc 1 804 0
 1226 0098 07F11C03 		add	r3, r7, #28
 1227 009c 1946     		mov	r1, r3
 1228 009e 0B48     		ldr	r0, .L86+8
 1229 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 1230              		.loc 1 807 0
 1231 00a4 0748     		ldr	r0, .L86
 1232 00a6 074B     		ldr	r3, .L86
 1233 00a8 9B68     		ldr	r3, [r3, #8]
 1234 00aa 23F07842 		bic	r2, r3, #-134217728
 1235 00ae 7B68     		ldr	r3, [r7, #4]
 1236 00b0 D900     		lsls	r1, r3, #3
 1237 00b2 BB68     		ldr	r3, [r7, #8]
 1238 00b4 0B43     		orrs	r3, r3, r1
ARM GAS  /tmp/ccGyomqm.s 			page 47


 1239 00b6 1343     		orrs	r3, r3, r2
 1240 00b8 8360     		str	r3, [r0, #8]
 1241              	.L85:
 1242              		.loc 1 815 0
 1243 00ba 00BF     		nop
 1244 00bc 3037     		adds	r7, r7, #48
 1245              	.LCFI17:
 1246              		.cfi_def_cfa_offset 8
 1247 00be BD46     		mov	sp, r7
 1248              	.LCFI18:
 1249              		.cfi_def_cfa_register 13
 1250              		@ sp needed
 1251 00c0 80BD     		pop	{r7, pc}
 1252              	.L87:
 1253 00c2 00BF     		.align	2
 1254              	.L86:
 1255 00c4 00380240 		.word	1073887232
 1256 00c8 00000240 		.word	1073872896
 1257 00cc 00080240 		.word	1073874944
 1258              		.cfi_endproc
 1259              	.LFE129:
 1261              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1262              		.align	2
 1263              		.global	HAL_RCC_EnableCSS
 1264              		.thumb
 1265              		.thumb_func
 1267              	HAL_RCC_EnableCSS:
 1268              	.LFB130:
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1269              		.loc 1 827 0
 1270              		.cfi_startproc
 1271              		@ args = 0, pretend = 0, frame = 0
 1272              		@ frame_needed = 1, uses_anonymous_args = 0
 1273              		@ link register save eliminated.
 1274 0000 80B4     		push	{r7}
 1275              	.LCFI19:
 1276              		.cfi_def_cfa_offset 4
 1277              		.cfi_offset 7, -4
 1278 0002 00AF     		add	r7, sp, #0
 1279              	.LCFI20:
 1280              		.cfi_def_cfa_register 7
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 1281              		.loc 1 828 0
 1282 0004 034B     		ldr	r3, .L89
 1283 0006 0122     		movs	r2, #1
 1284 0008 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccGyomqm.s 			page 48


 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1285              		.loc 1 829 0
 1286 000a 00BF     		nop
 1287 000c BD46     		mov	sp, r7
 1288              	.LCFI21:
 1289              		.cfi_def_cfa_register 13
 1290              		@ sp needed
 1291 000e 5DF8047B 		ldr	r7, [sp], #4
 1292              	.LCFI22:
 1293              		.cfi_restore 7
 1294              		.cfi_def_cfa_offset 0
 1295 0012 7047     		bx	lr
 1296              	.L90:
 1297              		.align	2
 1298              	.L89:
 1299 0014 4C004742 		.word	1111949388
 1300              		.cfi_endproc
 1301              	.LFE130:
 1303              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 1304              		.align	2
 1305              		.global	HAL_RCC_DisableCSS
 1306              		.thumb
 1307              		.thumb_func
 1309              	HAL_RCC_DisableCSS:
 1310              	.LFB131:
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1311              		.loc 1 836 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 0
 1314              		@ frame_needed = 1, uses_anonymous_args = 0
 1315              		@ link register save eliminated.
 1316 0000 80B4     		push	{r7}
 1317              	.LCFI23:
 1318              		.cfi_def_cfa_offset 4
 1319              		.cfi_offset 7, -4
 1320 0002 00AF     		add	r7, sp, #0
 1321              	.LCFI24:
 1322              		.cfi_def_cfa_register 7
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 1323              		.loc 1 837 0
 1324 0004 034B     		ldr	r3, .L92
 1325 0006 0022     		movs	r2, #0
 1326 0008 1A60     		str	r2, [r3]
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1327              		.loc 1 838 0
 1328 000a 00BF     		nop
 1329 000c BD46     		mov	sp, r7
 1330              	.LCFI25:
 1331              		.cfi_def_cfa_register 13
 1332              		@ sp needed
 1333 000e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccGyomqm.s 			page 49


 1334              	.LCFI26:
 1335              		.cfi_restore 7
 1336              		.cfi_def_cfa_offset 0
 1337 0012 7047     		bx	lr
 1338              	.L93:
 1339              		.align	2
 1340              	.L92:
 1341 0014 4C004742 		.word	1111949388
 1342              		.cfi_endproc
 1343              	.LFE131:
 1345              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1346              		.align	2
 1347              		.weak	HAL_RCC_GetSysClockFreq
 1348              		.thumb
 1349              		.thumb_func
 1351              	HAL_RCC_GetSysClockFreq:
 1352              	.LFB132:
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *        
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         constant and the selected clock source:
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               in voltage and temperature.
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                have wrong result.
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                  
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         value for HSE crystal.
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval SYSCLK frequency
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak uint32_t HAL_RCC_GetSysClockFreq(void)
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1353              		.loc 1 871 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 40
 1356              		@ frame_needed = 1, uses_anonymous_args = 0
 1357              		@ link register save eliminated.
 1358 0000 80B4     		push	{r7}
 1359              	.LCFI27:
ARM GAS  /tmp/ccGyomqm.s 			page 50


 1360              		.cfi_def_cfa_offset 4
 1361              		.cfi_offset 7, -4
 1362 0002 8BB0     		sub	sp, sp, #44
 1363              	.LCFI28:
 1364              		.cfi_def_cfa_offset 48
 1365 0004 00AF     		add	r7, sp, #0
 1366              	.LCFI29:
 1367              		.cfi_def_cfa_register 7
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 1368              		.loc 1 872 0
 1369 0006 0023     		movs	r3, #0
 1370 0008 FB61     		str	r3, [r7, #28]
 1371 000a 0023     		movs	r3, #0
 1372 000c 7B62     		str	r3, [r7, #36]
 1373 000e 0023     		movs	r3, #0
 1374 0010 BB61     		str	r3, [r7, #24]
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t sysclockfreq = 0U;
 1375              		.loc 1 873 0
 1376 0012 0023     		movs	r3, #0
 1377 0014 3B62     		str	r3, [r7, #32]
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 1378              		.loc 1 876 0
 1379 0016 364B     		ldr	r3, .L107
 1380 0018 9B68     		ldr	r3, [r3, #8]
 1381 001a 03F00C03 		and	r3, r3, #12
 1382 001e 042B     		cmp	r3, #4
 1383 0020 06D0     		beq	.L96
 1384 0022 082B     		cmp	r3, #8
 1385 0024 07D0     		beq	.L97
 1386 0026 002B     		cmp	r3, #0
 1387 0028 58D1     		bne	.L106
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1388              		.loc 1 880 0
 1389 002a 324B     		ldr	r3, .L107+4
 1390 002c 3B62     		str	r3, [r7, #32]
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        break;
 1391              		.loc 1 881 0
 1392 002e 58E0     		b	.L99
 1393              	.L96:
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 1394              		.loc 1 885 0
 1395 0030 314B     		ldr	r3, .L107+8
 1396 0032 3B62     		str	r3, [r7, #32]
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 1397              		.loc 1 886 0
 1398 0034 55E0     		b	.L99
 1399              	.L97:
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
ARM GAS  /tmp/ccGyomqm.s 			page 51


 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       SYSCLK = PLL_VCO / PLLP */
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1400              		.loc 1 892 0
 1401 0036 2E4B     		ldr	r3, .L107
 1402 0038 5B68     		ldr	r3, [r3, #4]
 1403 003a 03F03F03 		and	r3, r3, #63
 1404 003e FB61     		str	r3, [r7, #28]
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 1405              		.loc 1 893 0
 1406 0040 2B4B     		ldr	r3, .L107
 1407 0042 5B68     		ldr	r3, [r3, #4]
 1408 0044 03F48003 		and	r3, r3, #4194304
 1409 0048 002B     		cmp	r3, #0
 1410 004a 17D0     		beq	.L100
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* HSE used as PLL clock source */
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 1411              		.loc 1 896 0
 1412 004c 2A4A     		ldr	r2, .L107+8
 1413 004e FB69     		ldr	r3, [r7, #28]
 1414 0050 B2FBF3F2 		udiv	r2, r2, r3
 1415 0054 264B     		ldr	r3, .L107
 1416 0056 5968     		ldr	r1, [r3, #4]
 1417 0058 47F6C073 		movw	r3, #32704
 1418 005c 0B40     		ands	r3, r3, r1
 1419 005e 47F6C071 		movw	r1, #32704
 1420 0062 F960     		str	r1, [r7, #12]
 1421              	.LBB48:
 1422              	.LBB49:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1423              		.loc 2 531 0
 1424 0064 F968     		ldr	r1, [r7, #12]
 1425              		.syntax unified
 1426              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1427 0066 91FAA1F1 		rbit r1, r1
 1428              	@ 0 "" 2
 1429              		.thumb
 1430              		.syntax unified
 1431 006a B960     		str	r1, [r7, #8]
 1432              		.loc 2 544 0
 1433 006c B968     		ldr	r1, [r7, #8]
 1434              	.LBE49:
 1435              	.LBE48:
 1436              		.loc 1 896 0
 1437 006e B1FA81F1 		clz	r1, r1
 1438 0072 CB40     		lsrs	r3, r3, r1
 1439 0074 03FB02F3 		mul	r3, r3, r2
 1440 0078 7B62     		str	r3, [r7, #36]
 1441 007a 16E0     		b	.L102
 1442              	.L100:
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* HSI used as PLL clock source */
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
ARM GAS  /tmp/ccGyomqm.s 			page 52


 1443              		.loc 1 901 0
 1444 007c 1D4A     		ldr	r2, .L107+4
 1445 007e FB69     		ldr	r3, [r7, #28]
 1446 0080 B2FBF3F2 		udiv	r2, r2, r3
 1447 0084 1A4B     		ldr	r3, .L107
 1448 0086 5968     		ldr	r1, [r3, #4]
 1449 0088 47F6C073 		movw	r3, #32704
 1450 008c 0B40     		ands	r3, r3, r1
 1451 008e 47F6C071 		movw	r1, #32704
 1452 0092 7961     		str	r1, [r7, #20]
 1453              	.LBB50:
 1454              	.LBB51:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1455              		.loc 2 531 0
 1456 0094 7969     		ldr	r1, [r7, #20]
 1457              		.syntax unified
 1458              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1459 0096 91FAA1F1 		rbit r1, r1
 1460              	@ 0 "" 2
 1461              		.thumb
 1462              		.syntax unified
 1463 009a 7960     		str	r1, [r7, #4]
 1464              		.loc 2 544 0
 1465 009c 7968     		ldr	r1, [r7, #4]
 1466              	.LBE51:
 1467              	.LBE50:
 1468              		.loc 1 901 0
 1469 009e B1FA81F1 		clz	r1, r1
 1470 00a2 CB40     		lsrs	r3, r3, r1
 1471 00a4 03FB02F3 		mul	r3, r3, r2
 1472 00a8 7B62     		str	r3, [r7, #36]
 1473              	.L102:
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 1474              		.loc 1 903 0
 1475 00aa 114B     		ldr	r3, .L107
 1476 00ac 5B68     		ldr	r3, [r3, #4]
 1477 00ae 03F44032 		and	r2, r3, #196608
 1478 00b2 4FF44033 		mov	r3, #196608
 1479 00b6 3B61     		str	r3, [r7, #16]
 1480              	.LBB52:
 1481              	.LBB53:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1482              		.loc 2 531 0
 1483 00b8 3B69     		ldr	r3, [r7, #16]
 1484              		.syntax unified
 1485              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1486 00ba 93FAA3F3 		rbit r3, r3
 1487              	@ 0 "" 2
 1488              		.thumb
 1489              		.syntax unified
 1490 00be 3B60     		str	r3, [r7]
 1491              		.loc 2 544 0
 1492 00c0 3B68     		ldr	r3, [r7]
 1493              	.LBE53:
 1494              	.LBE52:
 1495              		.loc 1 903 0
ARM GAS  /tmp/ccGyomqm.s 			page 53


 1496 00c2 B3FA83F3 		clz	r3, r3
 1497 00c6 22FA03F3 		lsr	r3, r2, r3
 1498 00ca 0133     		adds	r3, r3, #1
 1499 00cc 5B00     		lsls	r3, r3, #1
 1500 00ce BB61     		str	r3, [r7, #24]
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = pllvco/pllp;
 1501              		.loc 1 905 0
 1502 00d0 7A6A     		ldr	r2, [r7, #36]
 1503 00d2 BB69     		ldr	r3, [r7, #24]
 1504 00d4 B2FBF3F3 		udiv	r3, r2, r3
 1505 00d8 3B62     		str	r3, [r7, #32]
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 1506              		.loc 1 906 0
 1507 00da 02E0     		b	.L99
 1508              	.L106:
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     default:
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1509              		.loc 1 910 0
 1510 00dc 054B     		ldr	r3, .L107+4
 1511 00de 3B62     		str	r3, [r7, #32]
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 1512              		.loc 1 911 0
 1513 00e0 00BF     		nop
 1514              	.L99:
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return sysclockfreq;
 1515              		.loc 1 914 0
 1516 00e2 3B6A     		ldr	r3, [r7, #32]
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1517              		.loc 1 915 0
 1518 00e4 1846     		mov	r0, r3
 1519 00e6 2C37     		adds	r7, r7, #44
 1520              	.LCFI30:
 1521              		.cfi_def_cfa_offset 4
 1522 00e8 BD46     		mov	sp, r7
 1523              	.LCFI31:
 1524              		.cfi_def_cfa_register 13
 1525              		@ sp needed
 1526 00ea 5DF8047B 		ldr	r7, [sp], #4
 1527              	.LCFI32:
 1528              		.cfi_restore 7
 1529              		.cfi_def_cfa_offset 0
 1530 00ee 7047     		bx	lr
 1531              	.L108:
 1532              		.align	2
 1533              	.L107:
 1534 00f0 00380240 		.word	1073887232
 1535 00f4 0024F400 		.word	16000000
 1536 00f8 00127A00 		.word	8000000
 1537              		.cfi_endproc
 1538              	.LFE132:
 1540              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1541              		.align	2
ARM GAS  /tmp/ccGyomqm.s 			page 54


 1542              		.global	HAL_RCC_GetHCLKFreq
 1543              		.thumb
 1544              		.thumb_func
 1546              	HAL_RCC_GetHCLKFreq:
 1547              	.LFB133:
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * 
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         and updated within this function
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval HCLK frequency
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1548              		.loc 1 927 0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 0
 1551              		@ frame_needed = 1, uses_anonymous_args = 0
 1552              		@ link register save eliminated.
 1553 0000 80B4     		push	{r7}
 1554              	.LCFI33:
 1555              		.cfi_def_cfa_offset 4
 1556              		.cfi_offset 7, -4
 1557 0002 00AF     		add	r7, sp, #0
 1558              	.LCFI34:
 1559              		.cfi_def_cfa_register 7
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return SystemCoreClock;
 1560              		.loc 1 928 0
 1561 0004 034B     		ldr	r3, .L111
 1562 0006 1B68     		ldr	r3, [r3]
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1563              		.loc 1 929 0
 1564 0008 1846     		mov	r0, r3
 1565 000a BD46     		mov	sp, r7
 1566              	.LCFI35:
 1567              		.cfi_def_cfa_register 13
 1568              		@ sp needed
 1569 000c 5DF8047B 		ldr	r7, [sp], #4
 1570              	.LCFI36:
 1571              		.cfi_restore 7
 1572              		.cfi_def_cfa_offset 0
 1573 0010 7047     		bx	lr
 1574              	.L112:
 1575 0012 00BF     		.align	2
 1576              	.L111:
 1577 0014 00000000 		.word	SystemCoreClock
 1578              		.cfi_endproc
 1579              	.LFE133:
 1581              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1582              		.align	2
 1583              		.global	HAL_RCC_GetPCLK1Freq
 1584              		.thumb
 1585              		.thumb_func
 1587              	HAL_RCC_GetPCLK1Freq:
ARM GAS  /tmp/ccGyomqm.s 			page 55


 1588              	.LFB134:
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval PCLK1 frequency
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {  
 1589              		.loc 1 938 0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 8
 1592              		@ frame_needed = 1, uses_anonymous_args = 0
 1593 0000 80B5     		push	{r7, lr}
 1594              	.LCFI37:
 1595              		.cfi_def_cfa_offset 8
 1596              		.cfi_offset 7, -8
 1597              		.cfi_offset 14, -4
 1598 0002 82B0     		sub	sp, sp, #8
 1599              	.LCFI38:
 1600              		.cfi_def_cfa_offset 16
 1601 0004 00AF     		add	r7, sp, #0
 1602              	.LCFI39:
 1603              		.cfi_def_cfa_register 7
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC
 1604              		.loc 1 940 0
 1605 0006 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1606 000a 0146     		mov	r1, r0
 1607 000c 0B4B     		ldr	r3, .L116
 1608 000e 9B68     		ldr	r3, [r3, #8]
 1609 0010 03F4E052 		and	r2, r3, #7168
 1610 0014 4FF4E053 		mov	r3, #7168
 1611 0018 7B60     		str	r3, [r7, #4]
 1612              	.LBB54:
 1613              	.LBB55:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1614              		.loc 2 531 0
 1615 001a 7B68     		ldr	r3, [r7, #4]
 1616              		.syntax unified
 1617              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1618 001c 93FAA3F3 		rbit r3, r3
 1619              	@ 0 "" 2
 1620              		.thumb
 1621              		.syntax unified
 1622 0020 3B60     		str	r3, [r7]
 1623              		.loc 2 544 0
 1624 0022 3B68     		ldr	r3, [r7]
 1625              	.LBE55:
 1626              	.LBE54:
 1627              		.loc 1 940 0
 1628 0024 B3FA83F3 		clz	r3, r3
 1629 0028 22FA03F3 		lsr	r3, r2, r3
 1630 002c 044A     		ldr	r2, .L116+4
 1631 002e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1632 0030 21FA03F3 		lsr	r3, r1, r3
ARM GAS  /tmp/ccGyomqm.s 			page 56


 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1633              		.loc 1 941 0
 1634 0034 1846     		mov	r0, r3
 1635 0036 0837     		adds	r7, r7, #8
 1636              	.LCFI40:
 1637              		.cfi_def_cfa_offset 8
 1638 0038 BD46     		mov	sp, r7
 1639              	.LCFI41:
 1640              		.cfi_def_cfa_register 13
 1641              		@ sp needed
 1642 003a 80BD     		pop	{r7, pc}
 1643              	.L117:
 1644              		.align	2
 1645              	.L116:
 1646 003c 00380240 		.word	1073887232
 1647 0040 00000000 		.word	APBAHBPrescTable
 1648              		.cfi_endproc
 1649              	.LFE134:
 1651              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1652              		.align	2
 1653              		.global	HAL_RCC_GetPCLK2Freq
 1654              		.thumb
 1655              		.thumb_func
 1657              	HAL_RCC_GetPCLK2Freq:
 1658              	.LFB135:
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency     
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval PCLK2 frequency
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1659              		.loc 1 950 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 8
 1662              		@ frame_needed = 1, uses_anonymous_args = 0
 1663 0000 80B5     		push	{r7, lr}
 1664              	.LCFI42:
 1665              		.cfi_def_cfa_offset 8
 1666              		.cfi_offset 7, -8
 1667              		.cfi_offset 14, -4
 1668 0002 82B0     		sub	sp, sp, #8
 1669              	.LCFI43:
 1670              		.cfi_def_cfa_offset 16
 1671 0004 00AF     		add	r7, sp, #0
 1672              	.LCFI44:
 1673              		.cfi_def_cfa_register 7
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_
 1674              		.loc 1 952 0
 1675 0006 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1676 000a 0146     		mov	r1, r0
 1677 000c 0B4B     		ldr	r3, .L121
 1678 000e 9B68     		ldr	r3, [r3, #8]
 1679 0010 03F46042 		and	r2, r3, #57344
ARM GAS  /tmp/ccGyomqm.s 			page 57


 1680 0014 4FF46043 		mov	r3, #57344
 1681 0018 7B60     		str	r3, [r7, #4]
 1682              	.LBB56:
 1683              	.LBB57:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1684              		.loc 2 531 0
 1685 001a 7B68     		ldr	r3, [r7, #4]
 1686              		.syntax unified
 1687              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1688 001c 93FAA3F3 		rbit r3, r3
 1689              	@ 0 "" 2
 1690              		.thumb
 1691              		.syntax unified
 1692 0020 3B60     		str	r3, [r7]
 1693              		.loc 2 544 0
 1694 0022 3B68     		ldr	r3, [r7]
 1695              	.LBE57:
 1696              	.LBE56:
 1697              		.loc 1 952 0
 1698 0024 B3FA83F3 		clz	r3, r3
 1699 0028 22FA03F3 		lsr	r3, r2, r3
 1700 002c 044A     		ldr	r2, .L121+4
 1701 002e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1702 0030 21FA03F3 		lsr	r3, r1, r3
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** } 
 1703              		.loc 1 953 0
 1704 0034 1846     		mov	r0, r3
 1705 0036 0837     		adds	r7, r7, #8
 1706              	.LCFI45:
 1707              		.cfi_def_cfa_offset 8
 1708 0038 BD46     		mov	sp, r7
 1709              	.LCFI46:
 1710              		.cfi_def_cfa_register 13
 1711              		@ sp needed
 1712 003a 80BD     		pop	{r7, pc}
 1713              	.L122:
 1714              		.align	2
 1715              	.L121:
 1716 003c 00380240 		.word	1073887232
 1717 0040 00000000 		.word	APBAHBPrescTable
 1718              		.cfi_endproc
 1719              	.LFE135:
 1721              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1722              		.align	2
 1723              		.weak	HAL_RCC_GetOscConfig
 1724              		.thumb
 1725              		.thumb_func
 1727              	HAL_RCC_GetOscConfig:
 1728              	.LFB136:
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * RCC configuration registers.
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * will be configured.
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
ARM GAS  /tmp/ccGyomqm.s 			page 58


 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1729              		.loc 1 963 0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 40
 1732              		@ frame_needed = 1, uses_anonymous_args = 0
 1733              		@ link register save eliminated.
 1734 0000 80B4     		push	{r7}
 1735              	.LCFI47:
 1736              		.cfi_def_cfa_offset 4
 1737              		.cfi_offset 7, -4
 1738 0002 8BB0     		sub	sp, sp, #44
 1739              	.LCFI48:
 1740              		.cfi_def_cfa_offset 48
 1741 0004 00AF     		add	r7, sp, #0
 1742              	.LCFI49:
 1743              		.cfi_def_cfa_register 7
 1744 0006 7860     		str	r0, [r7, #4]
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
 1745              		.loc 1 965 0
 1746 0008 7B68     		ldr	r3, [r7, #4]
 1747 000a 0F22     		movs	r2, #15
 1748 000c 1A60     		str	r2, [r3]
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1749              		.loc 1 968 0
 1750 000e 574B     		ldr	r3, .L140
 1751 0010 1B68     		ldr	r3, [r3]
 1752 0012 03F48023 		and	r3, r3, #262144
 1753 0016 002B     		cmp	r3, #0
 1754 0018 03D0     		beq	.L124
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1755              		.loc 1 970 0
 1756 001a 7B68     		ldr	r3, [r7, #4]
 1757 001c 0522     		movs	r2, #5
 1758 001e 5A60     		str	r2, [r3, #4]
 1759 0020 0CE0     		b	.L125
 1760              	.L124:
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 1761              		.loc 1 972 0
 1762 0022 524B     		ldr	r3, .L140
 1763 0024 1B68     		ldr	r3, [r3]
 1764 0026 03F48033 		and	r3, r3, #65536
 1765 002a 002B     		cmp	r3, #0
 1766 002c 03D0     		beq	.L126
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 1767              		.loc 1 974 0
 1768 002e 7B68     		ldr	r3, [r7, #4]
 1769 0030 0122     		movs	r2, #1
 1770 0032 5A60     		str	r2, [r3, #4]
 1771 0034 02E0     		b	.L125
 1772              	.L126:
ARM GAS  /tmp/ccGyomqm.s 			page 59


 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 1773              		.loc 1 978 0
 1774 0036 7B68     		ldr	r3, [r7, #4]
 1775 0038 0022     		movs	r2, #0
 1776 003a 5A60     		str	r2, [r3, #4]
 1777              	.L125:
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1778              		.loc 1 982 0
 1779 003c 4B4B     		ldr	r3, .L140
 1780 003e 1B68     		ldr	r3, [r3]
 1781 0040 03F00103 		and	r3, r3, #1
 1782 0044 002B     		cmp	r3, #0
 1783 0046 03D0     		beq	.L127
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1784              		.loc 1 984 0
 1785 0048 7B68     		ldr	r3, [r7, #4]
 1786 004a 0122     		movs	r2, #1
 1787 004c DA60     		str	r2, [r3, #12]
 1788 004e 02E0     		b	.L128
 1789              	.L127:
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 1790              		.loc 1 988 0
 1791 0050 7B68     		ldr	r3, [r7, #4]
 1792 0052 0022     		movs	r2, #0
 1793 0054 DA60     		str	r2, [r3, #12]
 1794              	.L128:
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC
 1795              		.loc 1 991 0
 1796 0056 454B     		ldr	r3, .L140
 1797 0058 1B68     		ldr	r3, [r3]
 1798 005a 03F0F802 		and	r2, r3, #248
 1799 005e F823     		movs	r3, #248
 1800 0060 BB61     		str	r3, [r7, #24]
 1801              	.LBB58:
 1802              	.LBB59:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1803              		.loc 2 531 0
 1804 0062 BB69     		ldr	r3, [r7, #24]
 1805              		.syntax unified
 1806              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1807 0064 93FAA3F3 		rbit r3, r3
 1808              	@ 0 "" 2
 1809              		.thumb
 1810              		.syntax unified
 1811 0068 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccGyomqm.s 			page 60


 1812              		.loc 2 544 0
 1813 006a 7B69     		ldr	r3, [r7, #20]
 1814              	.LBE59:
 1815              	.LBE58:
 1816              		.loc 1 991 0
 1817 006c B3FA83F3 		clz	r3, r3
 1818 0070 DA40     		lsrs	r2, r2, r3
 1819 0072 7B68     		ldr	r3, [r7, #4]
 1820 0074 1A61     		str	r2, [r3, #16]
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 1821              		.loc 1 994 0
 1822 0076 3D4B     		ldr	r3, .L140
 1823 0078 1B6F     		ldr	r3, [r3, #112]
 1824 007a 03F00403 		and	r3, r3, #4
 1825 007e 002B     		cmp	r3, #0
 1826 0080 03D0     		beq	.L130
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 1827              		.loc 1 996 0
 1828 0082 7B68     		ldr	r3, [r7, #4]
 1829 0084 0522     		movs	r2, #5
 1830 0086 9A60     		str	r2, [r3, #8]
 1831 0088 0CE0     		b	.L131
 1832              	.L130:
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 1833              		.loc 1 998 0
 1834 008a 384B     		ldr	r3, .L140
 1835 008c 1B6F     		ldr	r3, [r3, #112]
 1836 008e 03F00103 		and	r3, r3, #1
 1837 0092 002B     		cmp	r3, #0
 1838 0094 03D0     		beq	.L132
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 1839              		.loc 1 1000 0
 1840 0096 7B68     		ldr	r3, [r7, #4]
 1841 0098 0122     		movs	r2, #1
 1842 009a 9A60     		str	r2, [r3, #8]
 1843 009c 02E0     		b	.L131
 1844              	.L132:
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 1845              		.loc 1 1004 0
 1846 009e 7B68     		ldr	r3, [r7, #4]
 1847 00a0 0022     		movs	r2, #0
 1848 00a2 9A60     		str	r2, [r3, #8]
 1849              	.L131:
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 1850              		.loc 1 1008 0
 1851 00a4 314B     		ldr	r3, .L140
ARM GAS  /tmp/ccGyomqm.s 			page 61


 1852 00a6 5B6F     		ldr	r3, [r3, #116]
 1853 00a8 03F00103 		and	r3, r3, #1
 1854 00ac 002B     		cmp	r3, #0
 1855 00ae 03D0     		beq	.L133
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 1856              		.loc 1 1010 0
 1857 00b0 7B68     		ldr	r3, [r7, #4]
 1858 00b2 0122     		movs	r2, #1
 1859 00b4 5A61     		str	r2, [r3, #20]
 1860 00b6 02E0     		b	.L134
 1861              	.L133:
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 1862              		.loc 1 1014 0
 1863 00b8 7B68     		ldr	r3, [r7, #4]
 1864 00ba 0022     		movs	r2, #0
 1865 00bc 5A61     		str	r2, [r3, #20]
 1866              	.L134:
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 1867              		.loc 1 1018 0
 1868 00be 2B4B     		ldr	r3, .L140
 1869 00c0 1B68     		ldr	r3, [r3]
 1870 00c2 03F08073 		and	r3, r3, #16777216
 1871 00c6 002B     		cmp	r3, #0
 1872 00c8 03D0     		beq	.L135
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 1873              		.loc 1 1020 0
 1874 00ca 7B68     		ldr	r3, [r7, #4]
 1875 00cc 0222     		movs	r2, #2
 1876 00ce 9A61     		str	r2, [r3, #24]
 1877 00d0 02E0     		b	.L136
 1878              	.L135:
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 1879              		.loc 1 1024 0
 1880 00d2 7B68     		ldr	r3, [r7, #4]
 1881 00d4 0122     		movs	r2, #1
 1882 00d6 9A61     		str	r2, [r3, #24]
 1883              	.L136:
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 1884              		.loc 1 1026 0
 1885 00d8 244B     		ldr	r3, .L140
 1886 00da 5B68     		ldr	r3, [r3, #4]
 1887 00dc 03F48002 		and	r2, r3, #4194304
 1888 00e0 7B68     		ldr	r3, [r7, #4]
 1889 00e2 DA61     		str	r2, [r3, #28]
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
ARM GAS  /tmp/ccGyomqm.s 			page 62


 1890              		.loc 1 1027 0
 1891 00e4 214B     		ldr	r3, .L140
 1892 00e6 5B68     		ldr	r3, [r3, #4]
 1893 00e8 03F03F02 		and	r2, r3, #63
 1894 00ec 7B68     		ldr	r3, [r7, #4]
 1895 00ee 1A62     		str	r2, [r3, #32]
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PL
 1896              		.loc 1 1028 0
 1897 00f0 1E4B     		ldr	r3, .L140
 1898 00f2 5A68     		ldr	r2, [r3, #4]
 1899 00f4 47F6C073 		movw	r3, #32704
 1900 00f8 1340     		ands	r3, r3, r2
 1901 00fa 47F6C072 		movw	r2, #32704
 1902 00fe 3A62     		str	r2, [r7, #32]
 1903              	.LBB60:
 1904              	.LBB61:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1905              		.loc 2 531 0
 1906 0100 3A6A     		ldr	r2, [r7, #32]
 1907              		.syntax unified
 1908              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1909 0102 92FAA2F2 		rbit r2, r2
 1910              	@ 0 "" 2
 1911              		.thumb
 1912              		.syntax unified
 1913 0106 BA60     		str	r2, [r7, #8]
 1914              		.loc 2 544 0
 1915 0108 BA68     		ldr	r2, [r7, #8]
 1916              	.LBE61:
 1917              	.LBE60:
 1918              		.loc 1 1028 0
 1919 010a B2FA82F2 		clz	r2, r2
 1920 010e 23FA02F2 		lsr	r2, r3, r2
 1921 0112 7B68     		ldr	r3, [r7, #4]
 1922 0114 5A62     		str	r2, [r3, #36]
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0
 1923              		.loc 1 1029 0
 1924 0116 154B     		ldr	r3, .L140
 1925 0118 5B68     		ldr	r3, [r3, #4]
 1926 011a 03F44033 		and	r3, r3, #196608
 1927 011e 03F58033 		add	r3, r3, #65536
 1928 0122 5A00     		lsls	r2, r3, #1
 1929 0124 4FF44033 		mov	r3, #196608
 1930 0128 FB61     		str	r3, [r7, #28]
 1931              	.LBB62:
 1932              	.LBB63:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1933              		.loc 2 531 0
 1934 012a FB69     		ldr	r3, [r7, #28]
 1935              		.syntax unified
 1936              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1937 012c 93FAA3F3 		rbit r3, r3
 1938              	@ 0 "" 2
 1939              		.thumb
 1940              		.syntax unified
 1941 0130 FB60     		str	r3, [r7, #12]
 1942              		.loc 2 544 0
ARM GAS  /tmp/ccGyomqm.s 			page 63


 1943 0132 FB68     		ldr	r3, [r7, #12]
 1944              	.LBE63:
 1945              	.LBE62:
 1946              		.loc 1 1029 0
 1947 0134 B3FA83F3 		clz	r3, r3
 1948 0138 DA40     		lsrs	r2, r2, r3
 1949 013a 7B68     		ldr	r3, [r7, #4]
 1950 013c 9A62     		str	r2, [r3, #40]
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PL
 1951              		.loc 1 1030 0
 1952 013e 0B4B     		ldr	r3, .L140
 1953 0140 5B68     		ldr	r3, [r3, #4]
 1954 0142 03F07062 		and	r2, r3, #251658240
 1955 0146 4FF07063 		mov	r3, #251658240
 1956 014a 7B62     		str	r3, [r7, #36]
 1957              	.LBB64:
 1958              	.LBB65:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1959              		.loc 2 531 0
 1960 014c 7B6A     		ldr	r3, [r7, #36]
 1961              		.syntax unified
 1962              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1963 014e 93FAA3F3 		rbit r3, r3
 1964              	@ 0 "" 2
 1965              		.thumb
 1966              		.syntax unified
 1967 0152 3B61     		str	r3, [r7, #16]
 1968              		.loc 2 544 0
 1969 0154 3B69     		ldr	r3, [r7, #16]
 1970              	.LBE65:
 1971              	.LBE64:
 1972              		.loc 1 1030 0
 1973 0156 B3FA83F3 		clz	r3, r3
 1974 015a DA40     		lsrs	r2, r2, r3
 1975 015c 7B68     		ldr	r3, [r7, #4]
 1976 015e DA62     		str	r2, [r3, #44]
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1977              		.loc 1 1031 0
 1978 0160 00BF     		nop
 1979 0162 2C37     		adds	r7, r7, #44
 1980              	.LCFI50:
 1981              		.cfi_def_cfa_offset 4
 1982 0164 BD46     		mov	sp, r7
 1983              	.LCFI51:
 1984              		.cfi_def_cfa_register 13
 1985              		@ sp needed
 1986 0166 5DF8047B 		ldr	r7, [sp], #4
 1987              	.LCFI52:
 1988              		.cfi_restore 7
 1989              		.cfi_def_cfa_offset 0
 1990 016a 7047     		bx	lr
 1991              	.L141:
 1992              		.align	2
 1993              	.L140:
 1994 016c 00380240 		.word	1073887232
 1995              		.cfi_endproc
 1996              	.LFE136:
ARM GAS  /tmp/ccGyomqm.s 			page 64


 1998              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 1999              		.align	2
 2000              		.global	HAL_RCC_GetClockConfig
 2001              		.thumb
 2002              		.thumb_func
 2004              	HAL_RCC_GetClockConfig:
 2005              	.LFB137:
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Configures the RCC_ClkInitStruct according to the internal 
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * RCC configuration registers.
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_ClkInitTypeDef structure that 
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * will be configured.
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  pFLatency: Pointer on the Flash Latency.
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 2006              		.loc 1 1042 0
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 8
 2009              		@ frame_needed = 1, uses_anonymous_args = 0
 2010              		@ link register save eliminated.
 2011 0000 80B4     		push	{r7}
 2012              	.LCFI53:
 2013              		.cfi_def_cfa_offset 4
 2014              		.cfi_offset 7, -4
 2015 0002 83B0     		sub	sp, sp, #12
 2016              	.LCFI54:
 2017              		.cfi_def_cfa_offset 16
 2018 0004 00AF     		add	r7, sp, #0
 2019              	.LCFI55:
 2020              		.cfi_def_cfa_register 7
 2021 0006 7860     		str	r0, [r7, #4]
 2022 0008 3960     		str	r1, [r7]
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 2023              		.loc 1 1044 0
 2024 000a 7B68     		ldr	r3, [r7, #4]
 2025 000c 0F22     		movs	r2, #15
 2026 000e 1A60     		str	r2, [r3]
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****    
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2027              		.loc 1 1047 0
 2028 0010 124B     		ldr	r3, .L143
 2029 0012 9B68     		ldr	r3, [r3, #8]
 2030 0014 03F00302 		and	r2, r3, #3
 2031 0018 7B68     		ldr	r3, [r7, #4]
 2032 001a 5A60     		str	r2, [r3, #4]
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 2033              		.loc 1 1050 0
 2034 001c 0F4B     		ldr	r3, .L143
 2035 001e 9B68     		ldr	r3, [r3, #8]
 2036 0020 03F0F002 		and	r2, r3, #240
ARM GAS  /tmp/ccGyomqm.s 			page 65


 2037 0024 7B68     		ldr	r3, [r7, #4]
 2038 0026 9A60     		str	r2, [r3, #8]
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 2039              		.loc 1 1053 0
 2040 0028 0C4B     		ldr	r3, .L143
 2041 002a 9B68     		ldr	r3, [r3, #8]
 2042 002c 03F4E052 		and	r2, r3, #7168
 2043 0030 7B68     		ldr	r3, [r7, #4]
 2044 0032 DA60     		str	r2, [r3, #12]
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/ 
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 2045              		.loc 1 1056 0
 2046 0034 094B     		ldr	r3, .L143
 2047 0036 9B68     		ldr	r3, [r3, #8]
 2048 0038 03F46043 		and	r3, r3, #57344
 2049 003c DA08     		lsrs	r2, r3, #3
 2050 003e 7B68     		ldr	r3, [r7, #4]
 2051 0040 1A61     		str	r2, [r3, #16]
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 2052              		.loc 1 1059 0
 2053 0042 074B     		ldr	r3, .L143+4
 2054 0044 1B68     		ldr	r3, [r3]
 2055 0046 03F00F02 		and	r2, r3, #15
 2056 004a 3B68     		ldr	r3, [r7]
 2057 004c 1A60     		str	r2, [r3]
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 2058              		.loc 1 1060 0
 2059 004e 00BF     		nop
 2060 0050 0C37     		adds	r7, r7, #12
 2061              	.LCFI56:
 2062              		.cfi_def_cfa_offset 4
 2063 0052 BD46     		mov	sp, r7
 2064              	.LCFI57:
 2065              		.cfi_def_cfa_register 13
 2066              		@ sp needed
 2067 0054 5DF8047B 		ldr	r7, [sp], #4
 2068              	.LCFI58:
 2069              		.cfi_restore 7
 2070              		.cfi_def_cfa_offset 0
 2071 0058 7047     		bx	lr
 2072              	.L144:
 2073 005a 00BF     		.align	2
 2074              	.L143:
 2075 005c 00380240 		.word	1073887232
 2076 0060 003C0240 		.word	1073888256
 2077              		.cfi_endproc
 2078              	.LFE137:
 2080              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2081              		.align	2
 2082              		.global	HAL_RCC_NMI_IRQHandler
 2083              		.thumb
 2084              		.thumb_func
ARM GAS  /tmp/ccGyomqm.s 			page 66


 2086              	HAL_RCC_NMI_IRQHandler:
 2087              	.LFB138:
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 2088              		.loc 1 1068 0
 2089              		.cfi_startproc
 2090              		@ args = 0, pretend = 0, frame = 0
 2091              		@ frame_needed = 1, uses_anonymous_args = 0
 2092 0000 80B5     		push	{r7, lr}
 2093              	.LCFI59:
 2094              		.cfi_def_cfa_offset 8
 2095              		.cfi_offset 7, -8
 2096              		.cfi_offset 14, -4
 2097 0002 00AF     		add	r7, sp, #0
 2098              	.LCFI60:
 2099              		.cfi_def_cfa_register 7
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2100              		.loc 1 1070 0
 2101 0004 064B     		ldr	r3, .L148
 2102 0006 DB68     		ldr	r3, [r3, #12]
 2103 0008 03F08003 		and	r3, r3, #128
 2104 000c 002B     		cmp	r3, #0
 2105 000e 04D0     		beq	.L147
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
 2106              		.loc 1 1073 0
 2107 0010 FFF7FEFF 		bl	HAL_RCC_CSSCallback
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2108              		.loc 1 1076 0
 2109 0014 034B     		ldr	r3, .L148+4
 2110 0016 8022     		movs	r2, #128
 2111 0018 1A70     		strb	r2, [r3]
 2112              	.L147:
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 2113              		.loc 1 1078 0
 2114 001a 00BF     		nop
 2115 001c 80BD     		pop	{r7, pc}
 2116              	.L149:
 2117 001e 00BF     		.align	2
 2118              	.L148:
 2119 0020 00380240 		.word	1073887232
 2120 0024 0E380240 		.word	1073887246
 2121              		.cfi_endproc
 2122              	.LFE138:
 2124              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2125              		.align	2
ARM GAS  /tmp/ccGyomqm.s 			page 67


 2126              		.weak	HAL_RCC_CSSCallback
 2127              		.thumb
 2128              		.thumb_func
 2130              	HAL_RCC_CSSCallback:
 2131              	.LFB139:
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 2132              		.loc 1 1085 0
 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 0
 2135              		@ frame_needed = 1, uses_anonymous_args = 0
 2136              		@ link register save eliminated.
 2137 0000 80B4     		push	{r7}
 2138              	.LCFI61:
 2139              		.cfi_def_cfa_offset 4
 2140              		.cfi_offset 7, -4
 2141 0002 00AF     		add	r7, sp, #0
 2142              	.LCFI62:
 2143              		.cfi_def_cfa_register 7
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             the HAL_RCC_CSSCallback could be implemented in the user file
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****    */ 
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 2144              		.loc 1 1089 0
 2145 0004 00BF     		nop
 2146 0006 BD46     		mov	sp, r7
 2147              	.LCFI63:
 2148              		.cfi_def_cfa_register 13
 2149              		@ sp needed
 2150 0008 5DF8047B 		ldr	r7, [sp], #4
 2151              	.LCFI64:
 2152              		.cfi_restore 7
 2153              		.cfi_def_cfa_offset 0
 2154 000c 7047     		bx	lr
 2155              		.cfi_endproc
 2156              	.LFE139:
 2158 000e 00BF     		.text
 2159              	.Letext0:
 2160              		.file 3 "/usr/local/gcc-arm-none-eabi-5_4-2016q2/arm-none-eabi/include/machine/_default_types.h"
 2161              		.file 4 "/usr/local/gcc-arm-none-eabi-5_4-2016q2/arm-none-eabi/include/sys/_stdint.h"
 2162              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2163              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2164              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2165              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2166              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2167              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2168              		.file 11 "Drivers/CMSIS/Include/core_cm4.h"
 2169              		.file 12 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
ARM GAS  /tmp/ccGyomqm.s 			page 68


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hal_rcc.c
     /tmp/ccGyomqm.s:26     .rodata.APBAHBPrescTable:00000000 APBAHBPrescTable
     /tmp/ccGyomqm.s:23     .rodata.APBAHBPrescTable:00000000 $d
     /tmp/ccGyomqm.s:44     .text.HAL_RCC_DeInit:00000000 $t
     /tmp/ccGyomqm.s:49     .text.HAL_RCC_DeInit:00000000 HAL_RCC_DeInit
     /tmp/ccGyomqm.s:79     .text.HAL_RCC_OscConfig:00000000 $t
     /tmp/ccGyomqm.s:84     .text.HAL_RCC_OscConfig:00000000 HAL_RCC_OscConfig
     /tmp/ccGyomqm.s:524    .text.HAL_RCC_OscConfig:000002ac $d
     /tmp/ccGyomqm.s:532    .text.HAL_RCC_OscConfig:000002c4 $t
     /tmp/ccGyomqm.s:764    .text.HAL_RCC_OscConfig:0000041c $d
     /tmp/ccGyomqm.s:770    .text.HAL_RCC_ClockConfig:00000000 $t
     /tmp/ccGyomqm.s:775    .text.HAL_RCC_ClockConfig:00000000 HAL_RCC_ClockConfig
     /tmp/ccGyomqm.s:1351   .text.HAL_RCC_GetSysClockFreq:00000000 HAL_RCC_GetSysClockFreq
     /tmp/ccGyomqm.s:1110   .text.HAL_RCC_ClockConfig:00000214 $d
     /tmp/ccGyomqm.s:1118   .text.HAL_RCC_MCOConfig:00000000 $t
     /tmp/ccGyomqm.s:1123   .text.HAL_RCC_MCOConfig:00000000 HAL_RCC_MCOConfig
     /tmp/ccGyomqm.s:1255   .text.HAL_RCC_MCOConfig:000000c4 $d
     /tmp/ccGyomqm.s:1262   .text.HAL_RCC_EnableCSS:00000000 $t
     /tmp/ccGyomqm.s:1267   .text.HAL_RCC_EnableCSS:00000000 HAL_RCC_EnableCSS
     /tmp/ccGyomqm.s:1299   .text.HAL_RCC_EnableCSS:00000014 $d
     /tmp/ccGyomqm.s:1304   .text.HAL_RCC_DisableCSS:00000000 $t
     /tmp/ccGyomqm.s:1309   .text.HAL_RCC_DisableCSS:00000000 HAL_RCC_DisableCSS
     /tmp/ccGyomqm.s:1341   .text.HAL_RCC_DisableCSS:00000014 $d
     /tmp/ccGyomqm.s:1346   .text.HAL_RCC_GetSysClockFreq:00000000 $t
     /tmp/ccGyomqm.s:1534   .text.HAL_RCC_GetSysClockFreq:000000f0 $d
     /tmp/ccGyomqm.s:1541   .text.HAL_RCC_GetHCLKFreq:00000000 $t
     /tmp/ccGyomqm.s:1546   .text.HAL_RCC_GetHCLKFreq:00000000 HAL_RCC_GetHCLKFreq
     /tmp/ccGyomqm.s:1577   .text.HAL_RCC_GetHCLKFreq:00000014 $d
     /tmp/ccGyomqm.s:1582   .text.HAL_RCC_GetPCLK1Freq:00000000 $t
     /tmp/ccGyomqm.s:1587   .text.HAL_RCC_GetPCLK1Freq:00000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccGyomqm.s:1646   .text.HAL_RCC_GetPCLK1Freq:0000003c $d
     /tmp/ccGyomqm.s:1652   .text.HAL_RCC_GetPCLK2Freq:00000000 $t
     /tmp/ccGyomqm.s:1657   .text.HAL_RCC_GetPCLK2Freq:00000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccGyomqm.s:1716   .text.HAL_RCC_GetPCLK2Freq:0000003c $d
     /tmp/ccGyomqm.s:1722   .text.HAL_RCC_GetOscConfig:00000000 $t
     /tmp/ccGyomqm.s:1727   .text.HAL_RCC_GetOscConfig:00000000 HAL_RCC_GetOscConfig
     /tmp/ccGyomqm.s:1994   .text.HAL_RCC_GetOscConfig:0000016c $d
     /tmp/ccGyomqm.s:1999   .text.HAL_RCC_GetClockConfig:00000000 $t
     /tmp/ccGyomqm.s:2004   .text.HAL_RCC_GetClockConfig:00000000 HAL_RCC_GetClockConfig
     /tmp/ccGyomqm.s:2075   .text.HAL_RCC_GetClockConfig:0000005c $d
     /tmp/ccGyomqm.s:2081   .text.HAL_RCC_NMI_IRQHandler:00000000 $t
     /tmp/ccGyomqm.s:2086   .text.HAL_RCC_NMI_IRQHandler:00000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccGyomqm.s:2130   .text.HAL_RCC_CSSCallback:00000000 HAL_RCC_CSSCallback
     /tmp/ccGyomqm.s:2119   .text.HAL_RCC_NMI_IRQHandler:00000020 $d
     /tmp/ccGyomqm.s:2125   .text.HAL_RCC_CSSCallback:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
SystemCoreClock
HAL_GPIO_Init
