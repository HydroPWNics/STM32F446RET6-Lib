ARM GAS  /tmp/ccMRyWhv.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_hal_adc.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.HAL_ADC_Init,"ax",%progbits
  22              		.align	2
  23              		.global	HAL_ADC_Init
  24              		.thumb
  25              		.thumb_func
  27              	HAL_ADC_Init:
  28              	.LFB126:
  29              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @file    stm32f4xx_hal_adc.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @version V1.5.2
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @date    22-September-2016
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           + Initialization and de-initialization functions
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           + IO operation functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           + State and errors functions
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   @verbatim
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                     ##### ADC Peripheral features #####
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   [..] 
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Interrupt generation at the end of conversion, end of injected conversion,  
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       and in case of analog watchdog or overrun events
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Single and continuous conversion modes.
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Scan mode for automatic conversion of channel 0 to channel x.
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Data alignment with in-built data coherency.
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Channel-wise programmable sampling time.
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) External trigger option with configurable polarity for both regular and 
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       injected conversion.
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Dual/Triple mode (on devices with 2 ADCs or more).
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Configurable DMA data storage in Dual/Triple ADC mode. 
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Configurable delay between conversions in Dual/Triple interleaved mode.
ARM GAS  /tmp/ccMRyWhv.s 			page 2


  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) ADC conversion type (refer to the datasheets).
  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       slower speed.
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) ADC input range: VREF(minus) = VIN = VREF(plus).
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) DMA request generation during regular channel conversion.
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                      ##### How to use this driver #####
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   [..]
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#)Initialize the ADC low level resources by implementing the HAL_ADC_MspInit():
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (##) Enable the ADC interface clock using __HAL_RCC_ADC_CLK_ENABLE()
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (##) ADC pins configuration
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Enable the clock for the ADC GPIOs using the following function:
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                    __HAL_RCC_GPIOx_CLK_ENABLE()  
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Configure these ADC pins in analog mode using HAL_GPIO_Init() 
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (##) In case of using interrupts (e.g. HAL_ADC_Start_IT())
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Configure the ADC interrupt priority using HAL_NVIC_SetPriority()
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Enable the ADC IRQ handler using HAL_NVIC_EnableIRQ()
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) In ADC IRQ handler, call HAL_ADC_IRQHandler()
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (##) In case of using DMA to control data transfer (e.g. HAL_ADC_Start_DMA())
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Enable the DMAx interface clock using __HAL_RCC_DMAx_CLK_ENABLE()
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Configure and enable two DMA streams stream for managing data
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                  transfer from peripheral to memory (output stream)
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Associate the initialized DMA handle to the CRYP DMA handle
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                  using  __HAL_LINKDMA()
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              (+++) Configure the priority and enable the NVIC for the transfer complete
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                  interrupt on the two DMA Streams. The output stream should have higher
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                  priority than the input stream.
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                        
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     *** Configuration of ADC, groups regular/injected, channels parameters ***
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   [..]
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Configure the ADC parameters (resolution, data alignment, ...)
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       and regular group parameters (conversion trigger, sequencer, ...)
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       using function HAL_ADC_Init().
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Configure the channels for regular group parameters (channel number, 
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       channel rank into sequencer, ..., into regular group)
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       using function HAL_ADC_ConfigChannel().
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Optionally, configure the injected group parameters (conversion trigger, 
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       sequencer, ..., of injected group)
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       and the channels for injected group parameters (channel number, 
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       channel rank into sequencer, ..., into injected group)
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       using function HAL_ADCEx_InjectedConfigChannel().
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Optionally, configure the analog watchdog parameters (channels
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       monitored, thresholds, ...) using function HAL_ADC_AnalogWDGConfig().
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Optionally, for devices with several ADC instances: configure the 
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       multimode parameters using function HAL_ADCEx_MultiModeConfigChannel().
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                        *** Execution of ADC conversions ***
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   [..]  
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) ADC driver can be used among three modes: polling, interruption,
ARM GAS  /tmp/ccMRyWhv.s 			page 3


  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       transfer by DMA.    
  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      *** Polling mode IO operation ***
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      =================================
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      [..]    
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start() 
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Wait for end of conversion using HAL_ADC_PollForConversion(), at this stage
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            user can specify the value of timeout according to his end application      
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) To read the ADC converted values, use the HAL_ADC_GetValue() function.
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop()
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      *** Interrupt mode IO operation ***    
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      ===================================
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      [..]    
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_IT() 
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Use HAL_ADC_IRQHandler() called under ADC_IRQHandler() Interrupt subroutine
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) At ADC end of conversion HAL_ADC_ConvCpltCallback() function is executed and user can 
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) In case of ADC Error, HAL_ADC_ErrorCallback() function is executed and user can 
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_IT()     
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      *** DMA mode IO operation ***    
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      ==============================
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      [..]    
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_DMA(), at this stage the user specify the l
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            of data to be transferred at each end of conversion 
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) At The end of data transfer by HAL_ADC_ConvCpltCallback() function is executed and user 
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) In case of transfer Error, HAL_ADC_ErrorCallback() function is executed and user can 
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_DMA()
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                     
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      *** ADC HAL driver macros list ***
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      ============================================= 
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      [..]
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        Below the list of most used macros in ADC HAL driver.
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE : Enable the ADC peripheral
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE : Disable the ADC peripheral
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE_IT: Enable the ADC end of conversion interrupt
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE_IT: Disable the ADC end of conversion interrupt
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_GET_IT_SOURCE: Check if the specified ADC interrupt source is enabled or disabl
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_CLEAR_FLAG: Clear the ADC's pending flags
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) __HAL_ADC_GET_FLAG: Get the selected ADC's flag status
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) ADC_GET_RESOLUTION: Return resolution bits in CR1 register 
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      [..] 
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (@) You can refer to the ADC HAL driver header file for more useful macros 
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       *** Deinitialization of ADC ***
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ==============================================================================
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   [..]
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Disable the ADC interface
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (++) ADC clock can be hard reset and disabled at RCC top level.
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (++) Hard reset of ADC peripherals
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****           using macro __HAL_RCC_ADC_FORCE_RESET(), __HAL_RCC_ADC_RELEASE_RESET().
ARM GAS  /tmp/ccMRyWhv.s 			page 4


 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (++) ADC clock disable using the equivalent macro/functions as configuration step.
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                (+++) Example:
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                    other device clock parameters configuration:
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                (+++) HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) ADC pins configuration
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (++) Disable the clock for the ADC GPIOs using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Optionally, in case of usage of ADC with interruptions:
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (++) Disable the NVIC for ADC using function HAL_NVIC_DisableIRQ(ADCx_IRQn)
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   (#) Optionally, in case of usage of DMA:
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (++) Deinitialize the DMA using function HAL_DMA_DeInit().
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (++) Disable the NVIC for DMA using function HAL_NVIC_DisableIRQ(DMAx_Channelx_IRQn)   
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     @endverbatim
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ******************************************************************************
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @attention
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *      without specific prior written permission.
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ******************************************************************************
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */ 
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #include "stm32f4xx_hal.h"
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @addtogroup STM32F4xx_HAL_Driver
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
ARM GAS  /tmp/ccMRyWhv.s 			page 5


 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC ADC
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief ADC driver modules
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */ 
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @addtogroup ADC_Private_Functions
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc);
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @}
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions 
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @verbatim    
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) De-initialize the ADC. 
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****          
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @endverbatim
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         in the ADC_InitStruct and initializes the ADC MSP.
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         ClockPrescaler, Resolution, Data Alignment and number of conversion), however,
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the rest of the configuration parameters are specific to the regular
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         channels group (scan mode activation, continuous mode activation,
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         External trigger source and edge, DMA continuous request after the  
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         last transfer and End of conversion selection).
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *             
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
ARM GAS  /tmp/ccMRyWhv.s 			page 6


 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
  30              		.loc 1 259 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  46              		.loc 1 260 0
  47 0008 0023     		movs	r3, #0
  48 000a FB73     		strb	r3, [r7, #15]
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check ADC handle */
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc == NULL)
  49              		.loc 1 263 0
  50 000c 7B68     		ldr	r3, [r7, #4]
  51 000e 002B     		cmp	r3, #0
  52 0010 01D1     		bne	.L2
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     return HAL_ERROR;
  53              		.loc 1 265 0
  54 0012 0123     		movs	r3, #1
  55 0014 33E0     		b	.L3
  56              	.L2:
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
  57              		.loc 1 286 0
ARM GAS  /tmp/ccMRyWhv.s 			page 7


  58 0016 7B68     		ldr	r3, [r7, #4]
  59 0018 1B6C     		ldr	r3, [r3, #64]
  60 001a 002B     		cmp	r3, #0
  61 001c 09D1     		bne	.L4
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Initialize ADC error code */
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
  62              		.loc 1 289 0
  63 001e 7B68     		ldr	r3, [r7, #4]
  64 0020 0022     		movs	r2, #0
  65 0022 5A64     		str	r2, [r3, #68]
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
  66              		.loc 1 292 0
  67 0024 7B68     		ldr	r3, [r7, #4]
  68 0026 0022     		movs	r2, #0
  69 0028 83F83C20 		strb	r2, [r3, #60]
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Init the low level hardware */
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
  70              		.loc 1 295 0
  71 002c 7868     		ldr	r0, [r7, #4]
  72 002e FFF7FEFF 		bl	HAL_ADC_MspInit
  73              	.L4:
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* correctly completed.                                                     */
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
  74              		.loc 1 300 0
  75 0032 7B68     		ldr	r3, [r7, #4]
  76 0034 1B6C     		ldr	r3, [r3, #64]
  77 0036 03F01003 		and	r3, r3, #16
  78 003a 002B     		cmp	r3, #0
  79 003c 18D1     		bne	.L5
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
  80              		.loc 1 303 0
  81 003e 7B68     		ldr	r3, [r7, #4]
  82 0040 1B6C     		ldr	r3, [r3, #64]
  83 0042 23F48853 		bic	r3, r3, #4352
  84 0046 23F00203 		bic	r3, r3, #2
  85 004a 43F00202 		orr	r2, r3, #2
  86 004e 7B68     		ldr	r3, [r7, #4]
  87 0050 1A64     		str	r2, [r3, #64]
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC parameters */
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_Init(hadc);
  88              		.loc 1 308 0
  89 0052 7868     		ldr	r0, [r7, #4]
  90 0054 FFF7FEFF 		bl	ADC_Init
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC error code to none */
ARM GAS  /tmp/ccMRyWhv.s 			page 8


 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
  91              		.loc 1 311 0
  92 0058 7B68     		ldr	r3, [r7, #4]
  93 005a 0022     		movs	r2, #0
  94 005c 5A64     		str	r2, [r3, #68]
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the ADC state */
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
  95              		.loc 1 314 0
  96 005e 7B68     		ldr	r3, [r7, #4]
  97 0060 1B6C     		ldr	r3, [r3, #64]
  98 0062 23F00303 		bic	r3, r3, #3
  99 0066 43F00102 		orr	r2, r3, #1
 100 006a 7B68     		ldr	r3, [r7, #4]
 101 006c 1A64     		str	r2, [r3, #64]
 102 006e 01E0     		b	.L6
 103              	.L5:
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 104              		.loc 1 320 0
 105 0070 0123     		movs	r3, #1
 106 0072 FB73     		strb	r3, [r7, #15]
 107              	.L6:
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Release Lock */
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 108              		.loc 1 324 0
 109 0074 7B68     		ldr	r3, [r7, #4]
 110 0076 0022     		movs	r2, #0
 111 0078 83F83C20 		strb	r2, [r3, #60]
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return tmp_hal_status;
 112              		.loc 1 327 0
 113 007c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 114              	.L3:
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 115              		.loc 1 328 0
 116 007e 1846     		mov	r0, r3
 117 0080 1037     		adds	r7, r7, #16
 118              	.LCFI3:
 119              		.cfi_def_cfa_offset 8
 120 0082 BD46     		mov	sp, r7
 121              	.LCFI4:
 122              		.cfi_def_cfa_register 13
 123              		@ sp needed
 124 0084 80BD     		pop	{r7, pc}
 125              		.cfi_endproc
 126              	.LFE126:
 128 0086 00BF     		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 129              		.align	2
 130              		.global	HAL_ADC_DeInit
ARM GAS  /tmp/ccMRyWhv.s 			page 9


 131              		.thumb
 132              		.thumb_func
 134              	HAL_ADC_DeInit:
 135              	.LFB127:
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values. 
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 136              		.loc 1 337 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 16
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140 0000 80B5     		push	{r7, lr}
 141              	.LCFI5:
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 7, -8
 144              		.cfi_offset 14, -4
 145 0002 84B0     		sub	sp, sp, #16
 146              	.LCFI6:
 147              		.cfi_def_cfa_offset 24
 148 0004 00AF     		add	r7, sp, #0
 149              	.LCFI7:
 150              		.cfi_def_cfa_register 7
 151 0006 7860     		str	r0, [r7, #4]
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 152              		.loc 1 338 0
 153 0008 0023     		movs	r3, #0
 154 000a FB73     		strb	r3, [r7, #15]
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check ADC handle */
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc == NULL)
 155              		.loc 1 341 0
 156 000c 7B68     		ldr	r3, [r7, #4]
 157 000e 002B     		cmp	r3, #0
 158 0010 01D1     		bne	.L8
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     return HAL_ERROR;
 159              		.loc 1 343 0
 160 0012 0123     		movs	r3, #1
 161 0014 22E0     		b	.L9
 162              	.L8:
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC state */
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 163              		.loc 1 350 0
 164 0016 7B68     		ldr	r3, [r7, #4]
 165 0018 1B6C     		ldr	r3, [r3, #64]
 166 001a 43F00202 		orr	r2, r3, #2
ARM GAS  /tmp/ccMRyWhv.s 			page 10


 167 001e 7B68     		ldr	r3, [r7, #4]
 168 0020 1A64     		str	r2, [r3, #64]
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Disable ADC peripheral */
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 169              		.loc 1 354 0
 170 0022 7B68     		ldr	r3, [r7, #4]
 171 0024 1B68     		ldr	r3, [r3]
 172 0026 7A68     		ldr	r2, [r7, #4]
 173 0028 1268     		ldr	r2, [r2]
 174 002a 9268     		ldr	r2, [r2, #8]
 175 002c 22F00102 		bic	r2, r2, #1
 176 0030 9A60     		str	r2, [r3, #8]
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* correctly completed.                                                     */
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 177              		.loc 1 358 0
 178 0032 7B68     		ldr	r3, [r7, #4]
 179 0034 1B68     		ldr	r3, [r3]
 180 0036 9B68     		ldr	r3, [r3, #8]
 181 0038 03F00103 		and	r3, r3, #1
 182 003c 002B     		cmp	r3, #0
 183 003e 08D1     		bne	.L10
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* DeInit the low level hardware */
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 184              		.loc 1 361 0
 185 0040 7868     		ldr	r0, [r7, #4]
 186 0042 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC error code to none */
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 187              		.loc 1 364 0
 188 0046 7B68     		ldr	r3, [r7, #4]
 189 0048 0022     		movs	r2, #0
 190 004a 5A64     		str	r2, [r3, #68]
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 191              		.loc 1 367 0
 192 004c 7B68     		ldr	r3, [r7, #4]
 193 004e 0022     		movs	r2, #0
 194 0050 1A64     		str	r2, [r3, #64]
 195              	.L10:
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 196              		.loc 1 371 0
 197 0052 7B68     		ldr	r3, [r7, #4]
 198 0054 0022     		movs	r2, #0
 199 0056 83F83C20 		strb	r2, [r3, #60]
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return tmp_hal_status;
ARM GAS  /tmp/ccMRyWhv.s 			page 11


 200              		.loc 1 374 0
 201 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 202              	.L9:
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 203              		.loc 1 375 0
 204 005c 1846     		mov	r0, r3
 205 005e 1037     		adds	r7, r7, #16
 206              	.LCFI8:
 207              		.cfi_def_cfa_offset 8
 208 0060 BD46     		mov	sp, r7
 209              	.LCFI9:
 210              		.cfi_def_cfa_register 13
 211              		@ sp needed
 212 0062 80BD     		pop	{r7, pc}
 213              		.cfi_endproc
 214              	.LFE127:
 216              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 217              		.align	2
 218              		.weak	HAL_ADC_MspInit
 219              		.thumb
 220              		.thumb_func
 222              	HAL_ADC_MspInit:
 223              	.LFB128:
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 224              		.loc 1 384 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 8
 227              		@ frame_needed = 1, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 229 0000 80B4     		push	{r7}
 230              	.LCFI10:
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 7, -4
 233 0002 83B0     		sub	sp, sp, #12
 234              	.LCFI11:
 235              		.cfi_def_cfa_offset 16
 236 0004 00AF     		add	r7, sp, #0
 237              	.LCFI12:
 238              		.cfi_def_cfa_register 7
 239 0006 7860     		str	r0, [r7, #4]
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_MspInit could be implemented in the user file
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */ 
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 240              		.loc 1 390 0
 241 0008 00BF     		nop
 242 000a 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccMRyWhv.s 			page 12


 243              	.LCFI13:
 244              		.cfi_def_cfa_offset 4
 245 000c BD46     		mov	sp, r7
 246              	.LCFI14:
 247              		.cfi_def_cfa_register 13
 248              		@ sp needed
 249 000e 5DF8047B 		ldr	r7, [sp], #4
 250              	.LCFI15:
 251              		.cfi_restore 7
 252              		.cfi_def_cfa_offset 0
 253 0012 7047     		bx	lr
 254              		.cfi_endproc
 255              	.LFE128:
 257              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 258              		.align	2
 259              		.weak	HAL_ADC_MspDeInit
 260              		.thumb
 261              		.thumb_func
 263              	HAL_ADC_MspDeInit:
 264              	.LFB129:
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 265              		.loc 1 399 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 8
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269              		@ link register save eliminated.
 270 0000 80B4     		push	{r7}
 271              	.LCFI16:
 272              		.cfi_def_cfa_offset 4
 273              		.cfi_offset 7, -4
 274 0002 83B0     		sub	sp, sp, #12
 275              	.LCFI17:
 276              		.cfi_def_cfa_offset 16
 277 0004 00AF     		add	r7, sp, #0
 278              	.LCFI18:
 279              		.cfi_def_cfa_register 7
 280 0006 7860     		str	r0, [r7, #4]
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_MspDeInit could be implemented in the user file
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */ 
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 281              		.loc 1 405 0
 282 0008 00BF     		nop
 283 000a 0C37     		adds	r7, r7, #12
 284              	.LCFI19:
 285              		.cfi_def_cfa_offset 4
 286 000c BD46     		mov	sp, r7
ARM GAS  /tmp/ccMRyWhv.s 			page 13


 287              	.LCFI20:
 288              		.cfi_def_cfa_register 13
 289              		@ sp needed
 290 000e 5DF8047B 		ldr	r7, [sp], #4
 291              	.LCFI21:
 292              		.cfi_restore 7
 293              		.cfi_def_cfa_offset 0
 294 0012 7047     		bx	lr
 295              		.cfi_endproc
 296              	.LFE129:
 298              		.section	.text.HAL_ADC_Start,"ax",%progbits
 299              		.align	2
 300              		.global	HAL_ADC_Start
 301              		.thumb
 302              		.thumb_func
 304              	HAL_ADC_Start:
 305              	.LFB130:
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @}
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *  @brief    IO operation functions 
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @verbatim   
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              ##### IO operation functions #####
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================  
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Start conversion of regular channel.
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Stop conversion of regular channel.
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Start conversion of regular channel and enable interrupt.
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable interrupt.
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Start conversion of regular channel and enable DMA transfer.
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable DMA transfer.
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Handle ADC interrupt request. 
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @endverbatim
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Enables ADC and starts conversion of the regular channels.
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 306              		.loc 1 438 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 16
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 311 0000 80B4     		push	{r7}
 312              	.LCFI22:
ARM GAS  /tmp/ccMRyWhv.s 			page 14


 313              		.cfi_def_cfa_offset 4
 314              		.cfi_offset 7, -4
 315 0002 85B0     		sub	sp, sp, #20
 316              	.LCFI23:
 317              		.cfi_def_cfa_offset 24
 318 0004 00AF     		add	r7, sp, #0
 319              	.LCFI24:
 320              		.cfi_def_cfa_register 7
 321 0006 7860     		str	r0, [r7, #4]
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 322              		.loc 1 439 0
 323 0008 0023     		movs	r3, #0
 324 000a FB60     		str	r3, [r7, #12]
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 325              		.loc 1 446 0
 326 000c 7B68     		ldr	r3, [r7, #4]
 327 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 328 0012 012B     		cmp	r3, #1
 329 0014 01D1     		bne	.L14
 330              		.loc 1 446 0 is_stmt 0 discriminator 1
 331 0016 0223     		movs	r3, #2
 332 0018 87E0     		b	.L15
 333              	.L14:
 334              		.loc 1 446 0 discriminator 2
 335 001a 7B68     		ldr	r3, [r7, #4]
 336 001c 0122     		movs	r2, #1
 337 001e 83F83C20 		strb	r2, [r3, #60]
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable the ADC peripheral */
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   Tstab time the ADC's stabilization */
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 338              		.loc 1 451 0 is_stmt 1 discriminator 2
 339 0022 7B68     		ldr	r3, [r7, #4]
 340 0024 1B68     		ldr	r3, [r3]
 341 0026 9B68     		ldr	r3, [r3, #8]
 342 0028 03F00103 		and	r3, r3, #1
 343 002c 002B     		cmp	r3, #0
 344 002e 18D1     		bne	.L16
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {  
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the Peripheral */
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 345              		.loc 1 454 0
 346 0030 7B68     		ldr	r3, [r7, #4]
 347 0032 1B68     		ldr	r3, [r3]
 348 0034 7A68     		ldr	r2, [r7, #4]
 349 0036 1268     		ldr	r2, [r2]
 350 0038 9268     		ldr	r2, [r2, #8]
 351 003a 42F00102 		orr	r2, r2, #1
 352 003e 9A60     		str	r2, [r3, #8]
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
ARM GAS  /tmp/ccMRyWhv.s 			page 15


 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 353              		.loc 1 458 0
 354 0040 3D4B     		ldr	r3, .L25
 355 0042 1B68     		ldr	r3, [r3]
 356 0044 3D4A     		ldr	r2, .L25+4
 357 0046 A2FB0323 		umull	r2, r3, r2, r3
 358 004a 9A0C     		lsrs	r2, r3, #18
 359 004c 1346     		mov	r3, r2
 360 004e 5B00     		lsls	r3, r3, #1
 361 0050 1344     		add	r3, r3, r2
 362 0052 FB60     		str	r3, [r7, #12]
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 363              		.loc 1 459 0
 364 0054 02E0     		b	.L17
 365              	.L18:
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       counter--;
 366              		.loc 1 461 0
 367 0056 FB68     		ldr	r3, [r7, #12]
 368 0058 013B     		subs	r3, r3, #1
 369 005a FB60     		str	r3, [r7, #12]
 370              	.L17:
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 371              		.loc 1 459 0
 372 005c FB68     		ldr	r3, [r7, #12]
 373 005e 002B     		cmp	r3, #0
 374 0060 F9D1     		bne	.L18
 375              	.L16:
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 376              		.loc 1 466 0
 377 0062 7B68     		ldr	r3, [r7, #4]
 378 0064 1B68     		ldr	r3, [r3]
 379 0066 9B68     		ldr	r3, [r3, #8]
 380 0068 03F00103 		and	r3, r3, #1
 381 006c 002B     		cmp	r3, #0
 382 006e 5BD0     		beq	.L19
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state                                                          */
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 383              		.loc 1 471 0
 384 0070 7B68     		ldr	r3, [r7, #4]
 385 0072 1B6C     		ldr	r3, [r3, #64]
 386 0074 23F4E063 		bic	r3, r3, #1792
 387 0078 23F00103 		bic	r3, r3, #1
 388 007c 43F48072 		orr	r2, r3, #256
 389 0080 7B68     		ldr	r3, [r7, #4]
 390 0082 1A64     		str	r2, [r3, #64]
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
ARM GAS  /tmp/ccMRyWhv.s 			page 16


 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* update ADC state.                                                      */
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 391              		.loc 1 477 0
 392 0084 7B68     		ldr	r3, [r7, #4]
 393 0086 1B68     		ldr	r3, [r3]
 394 0088 5B68     		ldr	r3, [r3, #4]
 395 008a 03F48063 		and	r3, r3, #1024
 396 008e 002B     		cmp	r3, #0
 397 0090 07D0     		beq	.L20
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 398              		.loc 1 479 0
 399 0092 7B68     		ldr	r3, [r7, #4]
 400 0094 1B6C     		ldr	r3, [r3, #64]
 401 0096 23F44053 		bic	r3, r3, #12288
 402 009a 43F48052 		orr	r2, r3, #4096
 403 009e 7B68     		ldr	r3, [r7, #4]
 404 00a0 1A64     		str	r2, [r3, #64]
 405              	.L20:
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 406              		.loc 1 483 0
 407 00a2 7B68     		ldr	r3, [r7, #4]
 408 00a4 1B6C     		ldr	r3, [r3, #64]
 409 00a6 03F48053 		and	r3, r3, #4096
 410 00aa 002B     		cmp	r3, #0
 411 00ac 06D0     		beq	.L21
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 412              		.loc 1 486 0
 413 00ae 7B68     		ldr	r3, [r7, #4]
 414 00b0 5B6C     		ldr	r3, [r3, #68]
 415 00b2 23F00602 		bic	r2, r3, #6
 416 00b6 7B68     		ldr	r3, [r7, #4]
 417 00b8 5A64     		str	r2, [r3, #68]
 418 00ba 02E0     		b	.L22
 419              	.L21:
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC all error code fields */
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 420              		.loc 1 491 0
 421 00bc 7B68     		ldr	r3, [r7, #4]
 422 00be 0022     		movs	r2, #0
 423 00c0 5A64     		str	r2, [r3, #68]
 424              	.L22:
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Process unlocked */
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
ARM GAS  /tmp/ccMRyWhv.s 			page 17


 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 425              		.loc 1 497 0
 426 00c2 7B68     		ldr	r3, [r7, #4]
 427 00c4 0022     		movs	r2, #0
 428 00c6 83F83C20 		strb	r2, [r3, #60]
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 429              		.loc 1 501 0
 430 00ca 7B68     		ldr	r3, [r7, #4]
 431 00cc 1B68     		ldr	r3, [r3]
 432 00ce 6FF02202 		mvn	r2, #34
 433 00d2 1A60     		str	r2, [r3]
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Check if Multimode enabled */
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 434              		.loc 1 504 0
 435 00d4 1A4B     		ldr	r3, .L25+8
 436 00d6 5B68     		ldr	r3, [r3, #4]
 437 00d8 03F01F03 		and	r3, r3, #31
 438 00dc 002B     		cmp	r3, #0
 439 00de 0FD1     		bne	.L23
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 440              		.loc 1 507 0
 441 00e0 7B68     		ldr	r3, [r7, #4]
 442 00e2 1B68     		ldr	r3, [r3]
 443 00e4 9B68     		ldr	r3, [r3, #8]
 444 00e6 03F04053 		and	r3, r3, #805306368
 445 00ea 002B     		cmp	r3, #0
 446 00ec 1CD1     		bne	.L19
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 447              		.loc 1 510 0
 448 00ee 7B68     		ldr	r3, [r7, #4]
 449 00f0 1B68     		ldr	r3, [r3]
 450 00f2 7A68     		ldr	r2, [r7, #4]
 451 00f4 1268     		ldr	r2, [r2]
 452 00f6 9268     		ldr	r2, [r2, #8]
 453 00f8 42F08042 		orr	r2, r2, #1073741824
 454 00fc 9A60     		str	r2, [r3, #8]
 455 00fe 13E0     		b	.L19
 456              	.L23:
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 457              		.loc 1 516 0
 458 0100 7B68     		ldr	r3, [r7, #4]
 459 0102 1B68     		ldr	r3, [r3]
 460 0104 0F4A     		ldr	r2, .L25+12
 461 0106 9342     		cmp	r3, r2
ARM GAS  /tmp/ccMRyWhv.s 			page 18


 462 0108 0ED1     		bne	.L19
 463              		.loc 1 516 0 is_stmt 0 discriminator 1
 464 010a 7B68     		ldr	r3, [r7, #4]
 465 010c 1B68     		ldr	r3, [r3]
 466 010e 9B68     		ldr	r3, [r3, #8]
 467 0110 03F04053 		and	r3, r3, #805306368
 468 0114 002B     		cmp	r3, #0
 469 0116 07D1     		bne	.L19
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 470              		.loc 1 519 0 is_stmt 1
 471 0118 7B68     		ldr	r3, [r7, #4]
 472 011a 1B68     		ldr	r3, [r3]
 473 011c 7A68     		ldr	r2, [r7, #4]
 474 011e 1268     		ldr	r2, [r2]
 475 0120 9268     		ldr	r2, [r2, #8]
 476 0122 42F08042 		orr	r2, r2, #1073741824
 477 0126 9A60     		str	r2, [r3, #8]
 478              	.L19:
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 479              		.loc 1 525 0
 480 0128 0023     		movs	r3, #0
 481              	.L15:
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 482              		.loc 1 526 0
 483 012a 1846     		mov	r0, r3
 484 012c 1437     		adds	r7, r7, #20
 485              	.LCFI25:
 486              		.cfi_def_cfa_offset 4
 487 012e BD46     		mov	sp, r7
 488              	.LCFI26:
 489              		.cfi_def_cfa_register 13
 490              		@ sp needed
 491 0130 5DF8047B 		ldr	r7, [sp], #4
 492              	.LCFI27:
 493              		.cfi_restore 7
 494              		.cfi_def_cfa_offset 0
 495 0134 7047     		bx	lr
 496              	.L26:
 497 0136 00BF     		.align	2
 498              	.L25:
 499 0138 00000000 		.word	SystemCoreClock
 500 013c 83DE1B43 		.word	1125899907
 501 0140 00230140 		.word	1073816320
 502 0144 00200140 		.word	1073815552
 503              		.cfi_endproc
 504              	.LFE130:
 506              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 507              		.align	2
 508              		.global	HAL_ADC_Stop
 509              		.thumb
ARM GAS  /tmp/ccMRyWhv.s 			page 19


 510              		.thumb_func
 512              	HAL_ADC_Stop:
 513              	.LFB131:
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Disables ADC and stop conversion of regular channels.
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * 
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status.
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 514              		.loc 1 539 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 8
 517              		@ frame_needed = 1, uses_anonymous_args = 0
 518              		@ link register save eliminated.
 519 0000 80B4     		push	{r7}
 520              	.LCFI28:
 521              		.cfi_def_cfa_offset 4
 522              		.cfi_offset 7, -4
 523 0002 83B0     		sub	sp, sp, #12
 524              	.LCFI29:
 525              		.cfi_def_cfa_offset 16
 526 0004 00AF     		add	r7, sp, #0
 527              	.LCFI30:
 528              		.cfi_def_cfa_register 7
 529 0006 7860     		str	r0, [r7, #4]
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 530              		.loc 1 544 0
 531 0008 7B68     		ldr	r3, [r7, #4]
 532 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 533 000e 012B     		cmp	r3, #1
 534 0010 01D1     		bne	.L28
 535              		.loc 1 544 0 is_stmt 0 discriminator 1
 536 0012 0223     		movs	r3, #2
 537 0014 21E0     		b	.L29
 538              	.L28:
 539              		.loc 1 544 0 discriminator 2
 540 0016 7B68     		ldr	r3, [r7, #4]
 541 0018 0122     		movs	r2, #1
 542 001a 83F83C20 		strb	r2, [r3, #60]
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Disable ADC peripheral */
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 543              		.loc 1 548 0 is_stmt 1 discriminator 2
 544 001e 7B68     		ldr	r3, [r7, #4]
 545 0020 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccMRyWhv.s 			page 20


 546 0022 7A68     		ldr	r2, [r7, #4]
 547 0024 1268     		ldr	r2, [r2]
 548 0026 9268     		ldr	r2, [r2, #8]
 549 0028 22F00102 		bic	r2, r2, #1
 550 002c 9A60     		str	r2, [r3, #8]
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 551              		.loc 1 551 0 discriminator 2
 552 002e 7B68     		ldr	r3, [r7, #4]
 553 0030 1B68     		ldr	r3, [r3]
 554 0032 9B68     		ldr	r3, [r3, #8]
 555 0034 03F00103 		and	r3, r3, #1
 556 0038 002B     		cmp	r3, #0
 557 003a 09D1     		bne	.L30
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 558              		.loc 1 554 0
 559 003c 7B68     		ldr	r3, [r7, #4]
 560 003e 1B6C     		ldr	r3, [r3, #64]
 561 0040 23F48853 		bic	r3, r3, #4352
 562 0044 23F00103 		bic	r3, r3, #1
 563 0048 43F00102 		orr	r2, r3, #1
 564 004c 7B68     		ldr	r3, [r7, #4]
 565 004e 1A64     		str	r2, [r3, #64]
 566              	.L30:
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 567              		.loc 1 560 0
 568 0050 7B68     		ldr	r3, [r7, #4]
 569 0052 0022     		movs	r2, #0
 570 0054 83F83C20 		strb	r2, [r3, #60]
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 571              		.loc 1 563 0
 572 0058 0023     		movs	r3, #0
 573              	.L29:
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 574              		.loc 1 564 0
 575 005a 1846     		mov	r0, r3
 576 005c 0C37     		adds	r7, r7, #12
 577              	.LCFI31:
 578              		.cfi_def_cfa_offset 4
 579 005e BD46     		mov	sp, r7
 580              	.LCFI32:
 581              		.cfi_def_cfa_register 13
 582              		@ sp needed
 583 0060 5DF8047B 		ldr	r7, [sp], #4
 584              	.LCFI33:
 585              		.cfi_restore 7
 586              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccMRyWhv.s 			page 21


 587 0064 7047     		bx	lr
 588              		.cfi_endproc
 589              	.LFE131:
 591 0066 00BF     		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 592              		.align	2
 593              		.global	HAL_ADC_PollForConversion
 594              		.thumb
 595              		.thumb_func
 597              	HAL_ADC_PollForConversion:
 598              	.LFB132:
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Poll for regular conversion complete
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         conversion) are cleared by this function.
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         be performed on the complete sequence.
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.  
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 599              		.loc 1 582 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 16
 602              		@ frame_needed = 1, uses_anonymous_args = 0
 603 0000 80B5     		push	{r7, lr}
 604              	.LCFI34:
 605              		.cfi_def_cfa_offset 8
 606              		.cfi_offset 7, -8
 607              		.cfi_offset 14, -4
 608 0002 84B0     		sub	sp, sp, #16
 609              	.LCFI35:
 610              		.cfi_def_cfa_offset 24
 611 0004 00AF     		add	r7, sp, #0
 612              	.LCFI36:
 613              		.cfi_def_cfa_register 7
 614 0006 7860     		str	r0, [r7, #4]
 615 0008 3960     		str	r1, [r7]
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tickstart = 0U;
 616              		.loc 1 583 0
 617 000a 0023     		movs	r3, #0
 618 000c FB60     		str	r3, [r7, #12]
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for      */
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* each conversion:                                                       */
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* several ranks and polling for end of each conversion.                  */
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* For code simplicity sake, this particular case is generalized to       */
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* ADC configured in DMA mode and polling for end of each conversion.     */
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
ARM GAS  /tmp/ccMRyWhv.s 			page 22


 619              		.loc 1 591 0
 620 000e 7B68     		ldr	r3, [r7, #4]
 621 0010 1B68     		ldr	r3, [r3]
 622 0012 9B68     		ldr	r3, [r3, #8]
 623 0014 03F48063 		and	r3, r3, #1024
 624 0018 002B     		cmp	r3, #0
 625 001a 12D0     		beq	.L32
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 626              		.loc 1 592 0 discriminator 1
 627 001c 7B68     		ldr	r3, [r7, #4]
 628 001e 1B68     		ldr	r3, [r3]
 629 0020 9B68     		ldr	r3, [r3, #8]
 630 0022 03F48073 		and	r3, r3, #256
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 631              		.loc 1 591 0 discriminator 1
 632 0026 002B     		cmp	r3, #0
 633 0028 0BD0     		beq	.L32
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Update ADC state machine to error */
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 634              		.loc 1 595 0
 635 002a 7B68     		ldr	r3, [r7, #4]
 636 002c 1B6C     		ldr	r3, [r3, #64]
 637 002e 43F02002 		orr	r2, r3, #32
 638 0032 7B68     		ldr	r3, [r7, #4]
 639 0034 1A64     		str	r2, [r3, #64]
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Process unlocked */
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 640              		.loc 1 598 0
 641 0036 7B68     		ldr	r3, [r7, #4]
 642 0038 0022     		movs	r2, #0
 643 003a 83F83C20 		strb	r2, [r3, #60]
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     return HAL_ERROR;
 644              		.loc 1 600 0
 645 003e 0123     		movs	r3, #1
 646 0040 5CE0     		b	.L33
 647              	.L32:
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Get tick */ 
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tickstart = HAL_GetTick();
 648              		.loc 1 604 0
 649 0042 FFF7FEFF 		bl	HAL_GetTick
 650 0046 F860     		str	r0, [r7, #12]
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check End of conversion flag */
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 651              		.loc 1 607 0
 652 0048 1AE0     		b	.L34
 653              	.L36:
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 654              		.loc 1 610 0
 655 004a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccMRyWhv.s 			page 23


 656 004c B3F1FF3F 		cmp	r3, #-1
 657 0050 16D0     		beq	.L34
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 658              		.loc 1 612 0
 659 0052 3B68     		ldr	r3, [r7]
 660 0054 002B     		cmp	r3, #0
 661 0056 07D0     		beq	.L35
 662              		.loc 1 612 0 is_stmt 0 discriminator 1
 663 0058 FFF7FEFF 		bl	HAL_GetTick
 664 005c 0246     		mov	r2, r0
 665 005e FB68     		ldr	r3, [r7, #12]
 666 0060 D21A     		subs	r2, r2, r3
 667 0062 3B68     		ldr	r3, [r7]
 668 0064 9A42     		cmp	r2, r3
 669 0066 0BD9     		bls	.L34
 670              	.L35:
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 671              		.loc 1 615 0 is_stmt 1
 672 0068 7B68     		ldr	r3, [r7, #4]
 673 006a 1B6C     		ldr	r3, [r3, #64]
 674 006c 43F00402 		orr	r2, r3, #4
 675 0070 7B68     		ldr	r3, [r7, #4]
 676 0072 1A64     		str	r2, [r3, #64]
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Process unlocked */
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 677              		.loc 1 618 0
 678 0074 7B68     		ldr	r3, [r7, #4]
 679 0076 0022     		movs	r2, #0
 680 0078 83F83C20 		strb	r2, [r3, #60]
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         return HAL_TIMEOUT;
 681              		.loc 1 620 0
 682 007c 0323     		movs	r3, #3
 683 007e 3DE0     		b	.L33
 684              	.L34:
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 685              		.loc 1 607 0
 686 0080 7B68     		ldr	r3, [r7, #4]
 687 0082 1B68     		ldr	r3, [r3]
 688 0084 1B68     		ldr	r3, [r3]
 689 0086 03F00203 		and	r3, r3, #2
 690 008a 002B     		cmp	r3, #0
 691 008c DDD0     		beq	.L36
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Clear regular group conversion flag */
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 692              		.loc 1 626 0
 693 008e 7B68     		ldr	r3, [r7, #4]
 694 0090 1B68     		ldr	r3, [r3]
 695 0092 6FF01202 		mvn	r2, #18
ARM GAS  /tmp/ccMRyWhv.s 			page 24


 696 0096 1A60     		str	r2, [r3]
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Update ADC state machine */
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 697              		.loc 1 629 0
 698 0098 7B68     		ldr	r3, [r7, #4]
 699 009a 1B6C     		ldr	r3, [r3, #64]
 700 009c 43F40072 		orr	r2, r3, #512
 701 00a0 7B68     		ldr	r3, [r7, #4]
 702 00a2 1A64     		str	r2, [r3, #64]
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Note: On STM32F4, there is no independent flag of end of sequence.       */
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /*       The test of scan sequence on going is done either with scan        */
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /*       sequence disabled or with end of conversion flag set to            */
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /*       of end of sequence.                                                */
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 703              		.loc 1 637 0
 704 00a4 7B68     		ldr	r3, [r7, #4]
 705 00a6 1B68     		ldr	r3, [r3]
 706 00a8 9B68     		ldr	r3, [r3, #8]
 707 00aa 03F04053 		and	r3, r3, #805306368
 708 00ae 002B     		cmp	r3, #0
 709 00b0 23D1     		bne	.L37
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 710              		.loc 1 638 0 discriminator 1
 711 00b2 7B68     		ldr	r3, [r7, #4]
 712 00b4 9B69     		ldr	r3, [r3, #24]
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 713              		.loc 1 637 0 discriminator 1
 714 00b6 002B     		cmp	r3, #0
 715 00b8 1FD1     		bne	.L37
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 716              		.loc 1 639 0
 717 00ba 7B68     		ldr	r3, [r7, #4]
 718 00bc 1B68     		ldr	r3, [r3]
 719 00be DB6A     		ldr	r3, [r3, #44]
 720 00c0 03F47003 		and	r3, r3, #15728640
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 721              		.loc 1 638 0
 722 00c4 002B     		cmp	r3, #0
 723 00c6 06D0     		beq	.L38
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 724              		.loc 1 640 0
 725 00c8 7B68     		ldr	r3, [r7, #4]
 726 00ca 1B68     		ldr	r3, [r3]
 727 00cc 9B68     		ldr	r3, [r3, #8]
 728 00ce 03F48063 		and	r3, r3, #1024
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 729              		.loc 1 639 0
 730 00d2 002B     		cmp	r3, #0
 731 00d4 11D1     		bne	.L37
 732              	.L38:
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
ARM GAS  /tmp/ccMRyWhv.s 			page 25


 733              		.loc 1 643 0
 734 00d6 7B68     		ldr	r3, [r7, #4]
 735 00d8 1B6C     		ldr	r3, [r3, #64]
 736 00da 23F48072 		bic	r2, r3, #256
 737 00de 7B68     		ldr	r3, [r7, #4]
 738 00e0 1A64     		str	r2, [r3, #64]
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 739              		.loc 1 645 0
 740 00e2 7B68     		ldr	r3, [r7, #4]
 741 00e4 1B6C     		ldr	r3, [r3, #64]
 742 00e6 03F48053 		and	r3, r3, #4096
 743 00ea 002B     		cmp	r3, #0
 744 00ec 05D1     		bne	.L37
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     { 
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 745              		.loc 1 647 0
 746 00ee 7B68     		ldr	r3, [r7, #4]
 747 00f0 1B6C     		ldr	r3, [r3, #64]
 748 00f2 43F00102 		orr	r2, r3, #1
 749 00f6 7B68     		ldr	r3, [r7, #4]
 750 00f8 1A64     		str	r2, [r3, #64]
 751              	.L37:
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return ADC state */
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 752              		.loc 1 652 0
 753 00fa 0023     		movs	r3, #0
 754              	.L33:
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 755              		.loc 1 653 0
 756 00fc 1846     		mov	r0, r3
 757 00fe 1037     		adds	r7, r7, #16
 758              	.LCFI37:
 759              		.cfi_def_cfa_offset 8
 760 0100 BD46     		mov	sp, r7
 761              	.LCFI38:
 762              		.cfi_def_cfa_register 13
 763              		@ sp needed
 764 0102 80BD     		pop	{r7, pc}
 765              		.cfi_endproc
 766              	.LFE132:
 768              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 769              		.align	2
 770              		.global	HAL_ADC_PollForEvent
 771              		.thumb
 772              		.thumb_func
 774              	HAL_ADC_PollForEvent:
 775              	.LFB133:
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Poll for conversion event
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  EventType: the ADC event type.
ARM GAS  /tmp/ccMRyWhv.s 			page 26


 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *          This parameter can be one of the following values:
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watch Dog event.
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event.
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.   
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 776              		.loc 1 667 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 24
 779              		@ frame_needed = 1, uses_anonymous_args = 0
 780 0000 80B5     		push	{r7, lr}
 781              	.LCFI39:
 782              		.cfi_def_cfa_offset 8
 783              		.cfi_offset 7, -8
 784              		.cfi_offset 14, -4
 785 0002 86B0     		sub	sp, sp, #24
 786              	.LCFI40:
 787              		.cfi_def_cfa_offset 32
 788 0004 00AF     		add	r7, sp, #0
 789              	.LCFI41:
 790              		.cfi_def_cfa_register 7
 791 0006 F860     		str	r0, [r7, #12]
 792 0008 B960     		str	r1, [r7, #8]
 793 000a 7A60     		str	r2, [r7, #4]
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tickstart = 0U;
 794              		.loc 1 668 0
 795 000c 0023     		movs	r3, #0
 796 000e 7B61     		str	r3, [r7, #20]
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Get tick */
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tickstart = HAL_GetTick();
 797              		.loc 1 675 0
 798 0010 FFF7FEFF 		bl	HAL_GetTick
 799 0014 7861     		str	r0, [r7, #20]
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check selected event flag */
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc,EventType)))
 800              		.loc 1 678 0
 801 0016 1AE0     		b	.L40
 802              	.L43:
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Check for the Timeout */
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 803              		.loc 1 681 0
 804 0018 7B68     		ldr	r3, [r7, #4]
 805 001a B3F1FF3F 		cmp	r3, #-1
 806 001e 16D0     		beq	.L40
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 807              		.loc 1 683 0
 808 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccMRyWhv.s 			page 27


 809 0022 002B     		cmp	r3, #0
 810 0024 07D0     		beq	.L41
 811              		.loc 1 683 0 is_stmt 0 discriminator 1
 812 0026 FFF7FEFF 		bl	HAL_GetTick
 813 002a 0246     		mov	r2, r0
 814 002c 7B69     		ldr	r3, [r7, #20]
 815 002e D21A     		subs	r2, r2, r3
 816 0030 7B68     		ldr	r3, [r7, #4]
 817 0032 9A42     		cmp	r2, r3
 818 0034 0BD9     		bls	.L40
 819              	.L41:
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 820              		.loc 1 686 0 is_stmt 1
 821 0036 FB68     		ldr	r3, [r7, #12]
 822 0038 1B6C     		ldr	r3, [r3, #64]
 823 003a 43F00402 		orr	r2, r3, #4
 824 003e FB68     		ldr	r3, [r7, #12]
 825 0040 1A64     		str	r2, [r3, #64]
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Process unlocked */
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 826              		.loc 1 689 0
 827 0042 FB68     		ldr	r3, [r7, #12]
 828 0044 0022     		movs	r2, #0
 829 0046 83F83C20 		strb	r2, [r3, #60]
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         return HAL_TIMEOUT;
 830              		.loc 1 691 0
 831 004a 0323     		movs	r3, #3
 832 004c 28E0     		b	.L42
 833              	.L40:
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 834              		.loc 1 678 0
 835 004e FB68     		ldr	r3, [r7, #12]
 836 0050 1B68     		ldr	r3, [r3]
 837 0052 1A68     		ldr	r2, [r3]
 838 0054 BB68     		ldr	r3, [r7, #8]
 839 0056 1A40     		ands	r2, r2, r3
 840 0058 BB68     		ldr	r3, [r7, #8]
 841 005a 9A42     		cmp	r2, r3
 842 005c DCD1     		bne	.L43
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(EventType == ADC_AWD_EVENT)
 843              		.loc 1 697 0
 844 005e BB68     		ldr	r3, [r7, #8]
 845 0060 012B     		cmp	r3, #1
 846 0062 0BD1     		bne	.L44
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 847              		.loc 1 700 0
ARM GAS  /tmp/ccMRyWhv.s 			page 28


 848 0064 FB68     		ldr	r3, [r7, #12]
 849 0066 1B6C     		ldr	r3, [r3, #64]
 850 0068 43F48032 		orr	r2, r3, #65536
 851 006c FB68     		ldr	r3, [r7, #12]
 852 006e 1A64     		str	r2, [r3, #64]
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 853              		.loc 1 703 0
 854 0070 FB68     		ldr	r3, [r7, #12]
 855 0072 1B68     		ldr	r3, [r3]
 856 0074 6FF00102 		mvn	r2, #1
 857 0078 1A60     		str	r2, [r3]
 858 007a 10E0     		b	.L45
 859              	.L44:
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Overrun event */
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 860              		.loc 1 709 0
 861 007c FB68     		ldr	r3, [r7, #12]
 862 007e 1B6C     		ldr	r3, [r3, #64]
 863 0080 43F48062 		orr	r2, r3, #1024
 864 0084 FB68     		ldr	r3, [r7, #12]
 865 0086 1A64     		str	r2, [r3, #64]
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC error code to overrun */
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 866              		.loc 1 711 0
 867 0088 FB68     		ldr	r3, [r7, #12]
 868 008a 5B6C     		ldr	r3, [r3, #68]
 869 008c 43F00202 		orr	r2, r3, #2
 870 0090 FB68     		ldr	r3, [r7, #12]
 871 0092 5A64     		str	r2, [r3, #68]
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear ADC overrun flag */
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 872              		.loc 1 714 0
 873 0094 FB68     		ldr	r3, [r7, #12]
 874 0096 1B68     		ldr	r3, [r3]
 875 0098 6FF02002 		mvn	r2, #32
 876 009c 1A60     		str	r2, [r3]
 877              	.L45:
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return ADC state */
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 878              		.loc 1 718 0
 879 009e 0023     		movs	r3, #0
 880              	.L42:
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 881              		.loc 1 719 0
 882 00a0 1846     		mov	r0, r3
 883 00a2 1837     		adds	r7, r7, #24
 884              	.LCFI42:
 885              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccMRyWhv.s 			page 29


 886 00a4 BD46     		mov	sp, r7
 887              	.LCFI43:
 888              		.cfi_def_cfa_register 13
 889              		@ sp needed
 890 00a6 80BD     		pop	{r7, pc}
 891              		.cfi_endproc
 892              	.LFE133:
 894              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 895              		.align	2
 896              		.global	HAL_ADC_Start_IT
 897              		.thumb
 898              		.thumb_func
 900              	HAL_ADC_Start_IT:
 901              	.LFB134:
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Enables the interrupt and starts ADC conversion of regular channels.
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status.
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 902              		.loc 1 729 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 16
 905              		@ frame_needed = 1, uses_anonymous_args = 0
 906              		@ link register save eliminated.
 907 0000 80B4     		push	{r7}
 908              	.LCFI44:
 909              		.cfi_def_cfa_offset 4
 910              		.cfi_offset 7, -4
 911 0002 85B0     		sub	sp, sp, #20
 912              	.LCFI45:
 913              		.cfi_def_cfa_offset 24
 914 0004 00AF     		add	r7, sp, #0
 915              	.LCFI46:
 916              		.cfi_def_cfa_register 7
 917 0006 7860     		str	r0, [r7, #4]
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 918              		.loc 1 730 0
 919 0008 0023     		movs	r3, #0
 920 000a FB60     		str	r3, [r7, #12]
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 921              		.loc 1 737 0
 922 000c 7B68     		ldr	r3, [r7, #4]
 923 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 924 0012 012B     		cmp	r3, #1
 925 0014 01D1     		bne	.L47
 926              		.loc 1 737 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccMRyWhv.s 			page 30


 927 0016 0223     		movs	r3, #2
 928 0018 91E0     		b	.L48
 929              	.L47:
 930              		.loc 1 737 0 discriminator 2
 931 001a 7B68     		ldr	r3, [r7, #4]
 932 001c 0122     		movs	r2, #1
 933 001e 83F83C20 		strb	r2, [r3, #60]
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable the ADC peripheral */
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   Tstab time the ADC's stabilization */
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 934              		.loc 1 742 0 is_stmt 1 discriminator 2
 935 0022 7B68     		ldr	r3, [r7, #4]
 936 0024 1B68     		ldr	r3, [r3]
 937 0026 9B68     		ldr	r3, [r3, #8]
 938 0028 03F00103 		and	r3, r3, #1
 939 002c 002B     		cmp	r3, #0
 940 002e 18D1     		bne	.L49
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {  
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the Peripheral */
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 941              		.loc 1 745 0
 942 0030 7B68     		ldr	r3, [r7, #4]
 943 0032 1B68     		ldr	r3, [r3]
 944 0034 7A68     		ldr	r2, [r7, #4]
 945 0036 1268     		ldr	r2, [r2]
 946 0038 9268     		ldr	r2, [r2, #8]
 947 003a 42F00102 		orr	r2, r2, #1
 948 003e 9A60     		str	r2, [r3, #8]
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 949              		.loc 1 749 0
 950 0040 424B     		ldr	r3, .L58
 951 0042 1B68     		ldr	r3, [r3]
 952 0044 424A     		ldr	r2, .L58+4
 953 0046 A2FB0323 		umull	r2, r3, r2, r3
 954 004a 9A0C     		lsrs	r2, r3, #18
 955 004c 1346     		mov	r3, r2
 956 004e 5B00     		lsls	r3, r3, #1
 957 0050 1344     		add	r3, r3, r2
 958 0052 FB60     		str	r3, [r7, #12]
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 959              		.loc 1 750 0
 960 0054 02E0     		b	.L50
 961              	.L51:
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       counter--;
 962              		.loc 1 752 0
 963 0056 FB68     		ldr	r3, [r7, #12]
 964 0058 013B     		subs	r3, r3, #1
 965 005a FB60     		str	r3, [r7, #12]
 966              	.L50:
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 967              		.loc 1 750 0
ARM GAS  /tmp/ccMRyWhv.s 			page 31


 968 005c FB68     		ldr	r3, [r7, #12]
 969 005e 002B     		cmp	r3, #0
 970 0060 F9D1     		bne	.L51
 971              	.L49:
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 972              		.loc 1 757 0
 973 0062 7B68     		ldr	r3, [r7, #4]
 974 0064 1B68     		ldr	r3, [r3]
 975 0066 9B68     		ldr	r3, [r3, #8]
 976 0068 03F00103 		and	r3, r3, #1
 977 006c 002B     		cmp	r3, #0
 978 006e 65D0     		beq	.L52
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state                                                          */
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 979              		.loc 1 762 0
 980 0070 7B68     		ldr	r3, [r7, #4]
 981 0072 1B6C     		ldr	r3, [r3, #64]
 982 0074 23F4E063 		bic	r3, r3, #1792
 983 0078 23F00103 		bic	r3, r3, #1
 984 007c 43F48072 		orr	r2, r3, #256
 985 0080 7B68     		ldr	r3, [r7, #4]
 986 0082 1A64     		str	r2, [r3, #64]
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* update ADC state.                                                      */
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 987              		.loc 1 768 0
 988 0084 7B68     		ldr	r3, [r7, #4]
 989 0086 1B68     		ldr	r3, [r3]
 990 0088 5B68     		ldr	r3, [r3, #4]
 991 008a 03F48063 		and	r3, r3, #1024
 992 008e 002B     		cmp	r3, #0
 993 0090 07D0     		beq	.L53
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 994              		.loc 1 770 0
 995 0092 7B68     		ldr	r3, [r7, #4]
 996 0094 1B6C     		ldr	r3, [r3, #64]
 997 0096 23F44053 		bic	r3, r3, #12288
 998 009a 43F48052 		orr	r2, r3, #4096
 999 009e 7B68     		ldr	r3, [r7, #4]
 1000 00a0 1A64     		str	r2, [r3, #64]
 1001              	.L53:
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1002              		.loc 1 774 0
ARM GAS  /tmp/ccMRyWhv.s 			page 32


 1003 00a2 7B68     		ldr	r3, [r7, #4]
 1004 00a4 1B6C     		ldr	r3, [r3, #64]
 1005 00a6 03F48053 		and	r3, r3, #4096
 1006 00aa 002B     		cmp	r3, #0
 1007 00ac 06D0     		beq	.L54
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1008              		.loc 1 777 0
 1009 00ae 7B68     		ldr	r3, [r7, #4]
 1010 00b0 5B6C     		ldr	r3, [r3, #68]
 1011 00b2 23F00602 		bic	r2, r3, #6
 1012 00b6 7B68     		ldr	r3, [r7, #4]
 1013 00b8 5A64     		str	r2, [r3, #68]
 1014 00ba 02E0     		b	.L55
 1015              	.L54:
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC all error code fields */
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1016              		.loc 1 782 0
 1017 00bc 7B68     		ldr	r3, [r7, #4]
 1018 00be 0022     		movs	r2, #0
 1019 00c0 5A64     		str	r2, [r3, #68]
 1020              	.L55:
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Process unlocked */
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1021              		.loc 1 788 0
 1022 00c2 7B68     		ldr	r3, [r7, #4]
 1023 00c4 0022     		movs	r2, #0
 1024 00c6 83F83C20 		strb	r2, [r3, #60]
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 1025              		.loc 1 792 0
 1026 00ca 7B68     		ldr	r3, [r7, #4]
 1027 00cc 1B68     		ldr	r3, [r3]
 1028 00ce 6FF02202 		mvn	r2, #34
 1029 00d2 1A60     		str	r2, [r3]
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 1030              		.loc 1 795 0
 1031 00d4 7B68     		ldr	r3, [r7, #4]
 1032 00d6 1A68     		ldr	r2, [r3]
 1033 00d8 7B68     		ldr	r3, [r7, #4]
 1034 00da 1B68     		ldr	r3, [r3]
 1035 00dc 5B68     		ldr	r3, [r3, #4]
 1036 00de 43F08063 		orr	r3, r3, #67108864
 1037 00e2 43F02003 		orr	r3, r3, #32
 1038 00e6 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccMRyWhv.s 			page 33


 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Check if Multimode enabled */
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 1039              		.loc 1 798 0
 1040 00e8 1A4B     		ldr	r3, .L58+8
 1041 00ea 5B68     		ldr	r3, [r3, #4]
 1042 00ec 03F01F03 		and	r3, r3, #31
 1043 00f0 002B     		cmp	r3, #0
 1044 00f2 0FD1     		bne	.L56
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 1045              		.loc 1 801 0
 1046 00f4 7B68     		ldr	r3, [r7, #4]
 1047 00f6 1B68     		ldr	r3, [r3]
 1048 00f8 9B68     		ldr	r3, [r3, #8]
 1049 00fa 03F04053 		and	r3, r3, #805306368
 1050 00fe 002B     		cmp	r3, #0
 1051 0100 1CD1     		bne	.L52
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 1052              		.loc 1 804 0
 1053 0102 7B68     		ldr	r3, [r7, #4]
 1054 0104 1B68     		ldr	r3, [r3]
 1055 0106 7A68     		ldr	r2, [r7, #4]
 1056 0108 1268     		ldr	r2, [r2]
 1057 010a 9268     		ldr	r2, [r2, #8]
 1058 010c 42F08042 		orr	r2, r2, #1073741824
 1059 0110 9A60     		str	r2, [r3, #8]
 1060 0112 13E0     		b	.L52
 1061              	.L56:
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 1062              		.loc 1 810 0
 1063 0114 7B68     		ldr	r3, [r7, #4]
 1064 0116 1B68     		ldr	r3, [r3]
 1065 0118 0F4A     		ldr	r2, .L58+12
 1066 011a 9342     		cmp	r3, r2
 1067 011c 0ED1     		bne	.L52
 1068              		.loc 1 810 0 is_stmt 0 discriminator 1
 1069 011e 7B68     		ldr	r3, [r7, #4]
 1070 0120 1B68     		ldr	r3, [r3]
 1071 0122 9B68     		ldr	r3, [r3, #8]
 1072 0124 03F04053 		and	r3, r3, #805306368
 1073 0128 002B     		cmp	r3, #0
 1074 012a 07D1     		bne	.L52
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 1075              		.loc 1 813 0 is_stmt 1
 1076 012c 7B68     		ldr	r3, [r7, #4]
 1077 012e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccMRyWhv.s 			page 34


 1078 0130 7A68     		ldr	r2, [r7, #4]
 1079 0132 1268     		ldr	r2, [r2]
 1080 0134 9268     		ldr	r2, [r2, #8]
 1081 0136 42F08042 		orr	r2, r2, #1073741824
 1082 013a 9A60     		str	r2, [r3, #8]
 1083              	.L52:
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 1084              		.loc 1 819 0
 1085 013c 0023     		movs	r3, #0
 1086              	.L48:
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1087              		.loc 1 820 0
 1088 013e 1846     		mov	r0, r3
 1089 0140 1437     		adds	r7, r7, #20
 1090              	.LCFI47:
 1091              		.cfi_def_cfa_offset 4
 1092 0142 BD46     		mov	sp, r7
 1093              	.LCFI48:
 1094              		.cfi_def_cfa_register 13
 1095              		@ sp needed
 1096 0144 5DF8047B 		ldr	r7, [sp], #4
 1097              	.LCFI49:
 1098              		.cfi_restore 7
 1099              		.cfi_def_cfa_offset 0
 1100 0148 7047     		bx	lr
 1101              	.L59:
 1102 014a 00BF     		.align	2
 1103              	.L58:
 1104 014c 00000000 		.word	SystemCoreClock
 1105 0150 83DE1B43 		.word	1125899907
 1106 0154 00230140 		.word	1073816320
 1107 0158 00200140 		.word	1073815552
 1108              		.cfi_endproc
 1109              	.LFE134:
 1111              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1112              		.align	2
 1113              		.global	HAL_ADC_Stop_IT
 1114              		.thumb
 1115              		.thumb_func
 1117              	HAL_ADC_Stop_IT:
 1118              	.LFB135:
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Disables the interrupt and stop ADC conversion of regular channels.
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * 
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status.
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/ccMRyWhv.s 			page 35


 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 1119              		.loc 1 832 0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 8
 1122              		@ frame_needed = 1, uses_anonymous_args = 0
 1123              		@ link register save eliminated.
 1124 0000 80B4     		push	{r7}
 1125              	.LCFI50:
 1126              		.cfi_def_cfa_offset 4
 1127              		.cfi_offset 7, -4
 1128 0002 83B0     		sub	sp, sp, #12
 1129              	.LCFI51:
 1130              		.cfi_def_cfa_offset 16
 1131 0004 00AF     		add	r7, sp, #0
 1132              	.LCFI52:
 1133              		.cfi_def_cfa_register 7
 1134 0006 7860     		str	r0, [r7, #4]
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1135              		.loc 1 837 0
 1136 0008 7B68     		ldr	r3, [r7, #4]
 1137 000a 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1138 000e 012B     		cmp	r3, #1
 1139 0010 01D1     		bne	.L61
 1140              		.loc 1 837 0 is_stmt 0 discriminator 1
 1141 0012 0223     		movs	r3, #2
 1142 0014 2BE0     		b	.L62
 1143              	.L61:
 1144              		.loc 1 837 0 discriminator 2
 1145 0016 7B68     		ldr	r3, [r7, #4]
 1146 0018 0122     		movs	r2, #1
 1147 001a 83F83C20 		strb	r2, [r3, #60]
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Disable ADC peripheral */
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 1148              		.loc 1 841 0 is_stmt 1 discriminator 2
 1149 001e 7B68     		ldr	r3, [r7, #4]
 1150 0020 1B68     		ldr	r3, [r3]
 1151 0022 7A68     		ldr	r2, [r7, #4]
 1152 0024 1268     		ldr	r2, [r2]
 1153 0026 9268     		ldr	r2, [r2, #8]
 1154 0028 22F00102 		bic	r2, r2, #1
 1155 002c 9A60     		str	r2, [r3, #8]
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 1156              		.loc 1 844 0 discriminator 2
 1157 002e 7B68     		ldr	r3, [r7, #4]
 1158 0030 1B68     		ldr	r3, [r3]
 1159 0032 9B68     		ldr	r3, [r3, #8]
 1160 0034 03F00103 		and	r3, r3, #1
 1161 0038 002B     		cmp	r3, #0
 1162 003a 13D1     		bne	.L63
ARM GAS  /tmp/ccMRyWhv.s 			page 36


 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   	/* Disable ADC end of conversion interrupt for regular group */
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 1163              		.loc 1 847 0
 1164 003c 7B68     		ldr	r3, [r7, #4]
 1165 003e 1A68     		ldr	r2, [r3]
 1166 0040 7B68     		ldr	r3, [r7, #4]
 1167 0042 1B68     		ldr	r3, [r3]
 1168 0044 5B68     		ldr	r3, [r3, #4]
 1169 0046 23F08063 		bic	r3, r3, #67108864
 1170 004a 23F02003 		bic	r3, r3, #32
 1171 004e 5360     		str	r3, [r2, #4]
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1172              		.loc 1 850 0
 1173 0050 7B68     		ldr	r3, [r7, #4]
 1174 0052 1B6C     		ldr	r3, [r3, #64]
 1175 0054 23F48853 		bic	r3, r3, #4352
 1176 0058 23F00103 		bic	r3, r3, #1
 1177 005c 43F00102 		orr	r2, r3, #1
 1178 0060 7B68     		ldr	r3, [r7, #4]
 1179 0062 1A64     		str	r2, [r3, #64]
 1180              	.L63:
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1181              		.loc 1 856 0
 1182 0064 7B68     		ldr	r3, [r7, #4]
 1183 0066 0022     		movs	r2, #0
 1184 0068 83F83C20 		strb	r2, [r3, #60]
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 1185              		.loc 1 859 0
 1186 006c 0023     		movs	r3, #0
 1187              	.L62:
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1188              		.loc 1 860 0
 1189 006e 1846     		mov	r0, r3
 1190 0070 0C37     		adds	r7, r7, #12
 1191              	.LCFI53:
 1192              		.cfi_def_cfa_offset 4
 1193 0072 BD46     		mov	sp, r7
 1194              	.LCFI54:
 1195              		.cfi_def_cfa_register 13
 1196              		@ sp needed
 1197 0074 5DF8047B 		ldr	r7, [sp], #4
 1198              	.LCFI55:
 1199              		.cfi_restore 7
 1200              		.cfi_def_cfa_offset 0
 1201 0078 7047     		bx	lr
 1202              		.cfi_endproc
 1203              	.LFE135:
ARM GAS  /tmp/ccMRyWhv.s 			page 37


 1205 007a 00BF     		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1206              		.align	2
 1207              		.global	HAL_ADC_IRQHandler
 1208              		.thumb
 1209              		.thumb_func
 1211              	HAL_ADC_IRQHandler:
 1212              	.LFB136:
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 1213              		.loc 1 869 0
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 16
 1216              		@ frame_needed = 1, uses_anonymous_args = 0
 1217 0000 80B5     		push	{r7, lr}
 1218              	.LCFI56:
 1219              		.cfi_def_cfa_offset 8
 1220              		.cfi_offset 7, -8
 1221              		.cfi_offset 14, -4
 1222 0002 84B0     		sub	sp, sp, #16
 1223              	.LCFI57:
 1224              		.cfi_def_cfa_offset 24
 1225 0004 00AF     		add	r7, sp, #0
 1226              	.LCFI58:
 1227              		.cfi_def_cfa_register 7
 1228 0006 7860     		str	r0, [r7, #4]
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
 1229              		.loc 1 870 0
 1230 0008 0023     		movs	r3, #0
 1231 000a FB60     		str	r3, [r7, #12]
 1232 000c 0023     		movs	r3, #0
 1233 000e BB60     		str	r3, [r7, #8]
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 1234              		.loc 1 877 0
 1235 0010 7B68     		ldr	r3, [r7, #4]
 1236 0012 1B68     		ldr	r3, [r3]
 1237 0014 1B68     		ldr	r3, [r3]
 1238 0016 03F00203 		and	r3, r3, #2
 1239 001a 002B     		cmp	r3, #0
 1240 001c 14BF     		ite	ne
 1241 001e 0123     		movne	r3, #1
 1242 0020 0023     		moveq	r3, #0
 1243 0022 DBB2     		uxtb	r3, r3
 1244 0024 FB60     		str	r3, [r7, #12]
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
ARM GAS  /tmp/ccMRyWhv.s 			page 38


 1245              		.loc 1 878 0
 1246 0026 7B68     		ldr	r3, [r7, #4]
 1247 0028 1B68     		ldr	r3, [r3]
 1248 002a 5B68     		ldr	r3, [r3, #4]
 1249 002c 03F02003 		and	r3, r3, #32
 1250 0030 002B     		cmp	r3, #0
 1251 0032 14BF     		ite	ne
 1252 0034 0123     		movne	r3, #1
 1253 0036 0023     		moveq	r3, #0
 1254 0038 DBB2     		uxtb	r3, r3
 1255 003a BB60     		str	r3, [r7, #8]
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(tmp1 && tmp2)
 1256              		.loc 1 880 0
 1257 003c FB68     		ldr	r3, [r7, #12]
 1258 003e 002B     		cmp	r3, #0
 1259 0040 49D0     		beq	.L65
 1260              		.loc 1 880 0 is_stmt 0 discriminator 1
 1261 0042 BB68     		ldr	r3, [r7, #8]
 1262 0044 002B     		cmp	r3, #0
 1263 0046 46D0     		beq	.L65
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 1264              		.loc 1 883 0 is_stmt 1
 1265 0048 7B68     		ldr	r3, [r7, #4]
 1266 004a 1B6C     		ldr	r3, [r3, #64]
 1267 004c 03F01003 		and	r3, r3, #16
 1268 0050 002B     		cmp	r3, #0
 1269 0052 05D1     		bne	.L66
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 1270              		.loc 1 886 0
 1271 0054 7B68     		ldr	r3, [r7, #4]
 1272 0056 1B6C     		ldr	r3, [r3, #64]
 1273 0058 43F40072 		orr	r2, r3, #512
 1274 005c 7B68     		ldr	r3, [r7, #4]
 1275 005e 1A64     		str	r2, [r3, #64]
 1276              	.L66:
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Note: On STM32F4, there is no independent flag of end of sequence.   */
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       of end of sequence.                                            */
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 1277              		.loc 1 895 0
 1278 0060 7B68     		ldr	r3, [r7, #4]
 1279 0062 1B68     		ldr	r3, [r3]
 1280 0064 9B68     		ldr	r3, [r3, #8]
 1281 0066 03F04053 		and	r3, r3, #805306368
 1282 006a 002B     		cmp	r3, #0
 1283 006c 2BD1     		bne	.L67
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
ARM GAS  /tmp/ccMRyWhv.s 			page 39


 1284              		.loc 1 896 0 discriminator 1
 1285 006e 7B68     		ldr	r3, [r7, #4]
 1286 0070 9B69     		ldr	r3, [r3, #24]
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1287              		.loc 1 895 0 discriminator 1
 1288 0072 002B     		cmp	r3, #0
 1289 0074 27D1     		bne	.L67
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1290              		.loc 1 897 0
 1291 0076 7B68     		ldr	r3, [r7, #4]
 1292 0078 1B68     		ldr	r3, [r3]
 1293 007a DB6A     		ldr	r3, [r3, #44]
 1294 007c 03F47003 		and	r3, r3, #15728640
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1295              		.loc 1 896 0
 1296 0080 002B     		cmp	r3, #0
 1297 0082 06D0     		beq	.L68
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1298              		.loc 1 898 0
 1299 0084 7B68     		ldr	r3, [r7, #4]
 1300 0086 1B68     		ldr	r3, [r3]
 1301 0088 9B68     		ldr	r3, [r3, #8]
 1302 008a 03F48063 		and	r3, r3, #1024
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1303              		.loc 1 897 0
 1304 008e 002B     		cmp	r3, #0
 1305 0090 19D1     		bne	.L67
 1306              	.L68:
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1307              		.loc 1 904 0
 1308 0092 7B68     		ldr	r3, [r7, #4]
 1309 0094 1B68     		ldr	r3, [r3]
 1310 0096 7A68     		ldr	r2, [r7, #4]
 1311 0098 1268     		ldr	r2, [r2]
 1312 009a 5268     		ldr	r2, [r2, #4]
 1313 009c 22F02002 		bic	r2, r2, #32
 1314 00a0 5A60     		str	r2, [r3, #4]
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 1315              		.loc 1 907 0
 1316 00a2 7B68     		ldr	r3, [r7, #4]
 1317 00a4 1B6C     		ldr	r3, [r3, #64]
 1318 00a6 23F48072 		bic	r2, r3, #256
 1319 00aa 7B68     		ldr	r3, [r7, #4]
 1320 00ac 1A64     		str	r2, [r3, #64]
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1321              		.loc 1 909 0
 1322 00ae 7B68     		ldr	r3, [r7, #4]
 1323 00b0 1B6C     		ldr	r3, [r3, #64]
 1324 00b2 03F48053 		and	r3, r3, #4096
ARM GAS  /tmp/ccMRyWhv.s 			page 40


 1325 00b6 002B     		cmp	r3, #0
 1326 00b8 05D1     		bne	.L67
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1327              		.loc 1 911 0
 1328 00ba 7B68     		ldr	r3, [r7, #4]
 1329 00bc 1B6C     		ldr	r3, [r3, #64]
 1330 00be 43F00102 		orr	r2, r3, #1
 1331 00c2 7B68     		ldr	r3, [r7, #4]
 1332 00c4 1A64     		str	r2, [r3, #64]
 1333              	.L67:
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Conversion complete callback */ 
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 1334              		.loc 1 916 0
 1335 00c6 7868     		ldr	r0, [r7, #4]
 1336 00c8 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear regular group conversion flag */
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 1337              		.loc 1 919 0
 1338 00cc 7B68     		ldr	r3, [r7, #4]
 1339 00ce 1B68     		ldr	r3, [r3]
 1340 00d0 6FF01202 		mvn	r2, #18
 1341 00d4 1A60     		str	r2, [r3]
 1342              	.L65:
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 1343              		.loc 1 922 0
 1344 00d6 7B68     		ldr	r3, [r7, #4]
 1345 00d8 1B68     		ldr	r3, [r3]
 1346 00da 1B68     		ldr	r3, [r3]
 1347 00dc 03F00403 		and	r3, r3, #4
 1348 00e0 002B     		cmp	r3, #0
 1349 00e2 14BF     		ite	ne
 1350 00e4 0123     		movne	r3, #1
 1351 00e6 0023     		moveq	r3, #0
 1352 00e8 DBB2     		uxtb	r3, r3
 1353 00ea FB60     		str	r3, [r7, #12]
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 1354              		.loc 1 923 0
 1355 00ec 7B68     		ldr	r3, [r7, #4]
 1356 00ee 1B68     		ldr	r3, [r3]
 1357 00f0 5B68     		ldr	r3, [r3, #4]
 1358 00f2 03F08003 		and	r3, r3, #128
 1359 00f6 002B     		cmp	r3, #0
 1360 00f8 14BF     		ite	ne
 1361 00fa 0123     		movne	r3, #1
 1362 00fc 0023     		moveq	r3, #0
 1363 00fe DBB2     		uxtb	r3, r3
 1364 0100 BB60     		str	r3, [r7, #8]
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(tmp1 && tmp2)
 1365              		.loc 1 925 0
ARM GAS  /tmp/ccMRyWhv.s 			page 41


 1366 0102 FB68     		ldr	r3, [r7, #12]
 1367 0104 002B     		cmp	r3, #0
 1368 0106 57D0     		beq	.L69
 1369              		.loc 1 925 0 is_stmt 0 discriminator 1
 1370 0108 BB68     		ldr	r3, [r7, #8]
 1371 010a 002B     		cmp	r3, #0
 1372 010c 54D0     		beq	.L69
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 1373              		.loc 1 928 0 is_stmt 1
 1374 010e 7B68     		ldr	r3, [r7, #4]
 1375 0110 1B6C     		ldr	r3, [r3, #64]
 1376 0112 03F01003 		and	r3, r3, #16
 1377 0116 002B     		cmp	r3, #0
 1378 0118 05D1     		bne	.L70
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 1379              		.loc 1 931 0
 1380 011a 7B68     		ldr	r3, [r7, #4]
 1381 011c 1B6C     		ldr	r3, [r3, #64]
 1382 011e 43F40052 		orr	r2, r3, #8192
 1383 0122 7B68     		ldr	r3, [r7, #4]
 1384 0124 1A64     		str	r2, [r3, #64]
 1385              	.L70:
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group injected  */
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* by external trigger, scan sequence on going or by automatic injected */
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* conversion from group regular (same conditions as group regular      */
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* interruption disabling above).                                       */
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 1386              		.loc 1 938 0
 1387 0126 7B68     		ldr	r3, [r7, #4]
 1388 0128 1B68     		ldr	r3, [r3]
 1389 012a 9B68     		ldr	r3, [r3, #8]
 1390 012c 03F44013 		and	r3, r3, #3145728
 1391 0130 002B     		cmp	r3, #0
 1392 0132 39D1     		bne	.L71
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 1393              		.loc 1 939 0 discriminator 1
 1394 0134 7B68     		ldr	r3, [r7, #4]
 1395 0136 1B68     		ldr	r3, [r3]
 1396 0138 9B6B     		ldr	r3, [r3, #56]
 1397 013a 03F44013 		and	r3, r3, #3145728
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 1398              		.loc 1 938 0 discriminator 1
 1399 013e 002B     		cmp	r3, #0
 1400 0140 06D0     		beq	.L72
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 1401              		.loc 1 940 0
 1402 0142 7B68     		ldr	r3, [r7, #4]
 1403 0144 1B68     		ldr	r3, [r3]
 1404 0146 9B68     		ldr	r3, [r3, #8]
 1405 0148 03F48063 		and	r3, r3, #1024
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
ARM GAS  /tmp/ccMRyWhv.s 			page 42


 1406              		.loc 1 939 0
 1407 014c 002B     		cmp	r3, #0
 1408 014e 2BD1     		bne	.L71
 1409              	.L72:
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1410              		.loc 1 941 0
 1411 0150 7B68     		ldr	r3, [r7, #4]
 1412 0152 1B68     		ldr	r3, [r3]
 1413 0154 5B68     		ldr	r3, [r3, #4]
 1414 0156 03F48063 		and	r3, r3, #1024
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 1415              		.loc 1 940 0
 1416 015a 002B     		cmp	r3, #0
 1417 015c 24D1     		bne	.L71
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 1418              		.loc 1 942 0
 1419 015e 7B68     		ldr	r3, [r7, #4]
 1420 0160 1B68     		ldr	r3, [r3]
 1421 0162 9B68     		ldr	r3, [r3, #8]
 1422 0164 03F04053 		and	r3, r3, #805306368
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1423              		.loc 1 941 0
 1424 0168 002B     		cmp	r3, #0
 1425 016a 1DD1     		bne	.L71
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 1426              		.loc 1 943 0
 1427 016c 7B68     		ldr	r3, [r7, #4]
 1428 016e 9B69     		ldr	r3, [r3, #24]
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 1429              		.loc 1 942 0
 1430 0170 002B     		cmp	r3, #0
 1431 0172 19D1     		bne	.L71
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group injected */
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 1432              		.loc 1 946 0
 1433 0174 7B68     		ldr	r3, [r7, #4]
 1434 0176 1B68     		ldr	r3, [r3]
 1435 0178 7A68     		ldr	r2, [r7, #4]
 1436 017a 1268     		ldr	r2, [r2]
 1437 017c 5268     		ldr	r2, [r2, #4]
 1438 017e 22F08002 		bic	r2, r2, #128
 1439 0182 5A60     		str	r2, [r3, #4]
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 1440              		.loc 1 949 0
 1441 0184 7B68     		ldr	r3, [r7, #4]
 1442 0186 1B6C     		ldr	r3, [r3, #64]
 1443 0188 23F48052 		bic	r2, r3, #4096
 1444 018c 7B68     		ldr	r3, [r7, #4]
 1445 018e 1A64     		str	r2, [r3, #64]
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 1446              		.loc 1 951 0
 1447 0190 7B68     		ldr	r3, [r7, #4]
 1448 0192 1B6C     		ldr	r3, [r3, #64]
ARM GAS  /tmp/ccMRyWhv.s 			page 43


 1449 0194 03F48073 		and	r3, r3, #256
 1450 0198 002B     		cmp	r3, #0
 1451 019a 05D1     		bne	.L71
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       { 
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1452              		.loc 1 953 0
 1453 019c 7B68     		ldr	r3, [r7, #4]
 1454 019e 1B6C     		ldr	r3, [r3, #64]
 1455 01a0 43F00102 		orr	r2, r3, #1
 1456 01a4 7B68     		ldr	r3, [r7, #4]
 1457 01a6 1A64     		str	r2, [r3, #64]
 1458              	.L71:
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Conversion complete callback */ 
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
 1459              		.loc 1 958 0
 1460 01a8 7868     		ldr	r0, [r7, #4]
 1461 01aa FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear injected group conversion flag */
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 1462              		.loc 1 961 0
 1463 01ae 7B68     		ldr	r3, [r7, #4]
 1464 01b0 1B68     		ldr	r3, [r3]
 1465 01b2 6FF00C02 		mvn	r2, #12
 1466 01b6 1A60     		str	r2, [r3]
 1467              	.L69:
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 1468              		.loc 1 964 0
 1469 01b8 7B68     		ldr	r3, [r7, #4]
 1470 01ba 1B68     		ldr	r3, [r3]
 1471 01bc 1B68     		ldr	r3, [r3]
 1472 01be 03F00103 		and	r3, r3, #1
 1473 01c2 002B     		cmp	r3, #0
 1474 01c4 14BF     		ite	ne
 1475 01c6 0123     		movne	r3, #1
 1476 01c8 0023     		moveq	r3, #0
 1477 01ca DBB2     		uxtb	r3, r3
 1478 01cc FB60     		str	r3, [r7, #12]
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 1479              		.loc 1 965 0
 1480 01ce 7B68     		ldr	r3, [r7, #4]
 1481 01d0 1B68     		ldr	r3, [r3]
 1482 01d2 5B68     		ldr	r3, [r3, #4]
 1483 01d4 03F04003 		and	r3, r3, #64
 1484 01d8 002B     		cmp	r3, #0
 1485 01da 14BF     		ite	ne
 1486 01dc 0123     		movne	r3, #1
 1487 01de 0023     		moveq	r3, #0
 1488 01e0 DBB2     		uxtb	r3, r3
 1489 01e2 BB60     		str	r3, [r7, #8]
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check Analog watchdog flag */
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(tmp1 && tmp2)
ARM GAS  /tmp/ccMRyWhv.s 			page 44


 1490              		.loc 1 967 0
 1491 01e4 FB68     		ldr	r3, [r7, #12]
 1492 01e6 002B     		cmp	r3, #0
 1493 01e8 17D0     		beq	.L73
 1494              		.loc 1 967 0 is_stmt 0 discriminator 1
 1495 01ea BB68     		ldr	r3, [r7, #8]
 1496 01ec 002B     		cmp	r3, #0
 1497 01ee 14D0     		beq	.L73
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 1498              		.loc 1 969 0 is_stmt 1
 1499 01f0 7B68     		ldr	r3, [r7, #4]
 1500 01f2 1B68     		ldr	r3, [r3]
 1501 01f4 1B68     		ldr	r3, [r3]
 1502 01f6 03F00103 		and	r3, r3, #1
 1503 01fa 002B     		cmp	r3, #0
 1504 01fc 0DD0     		beq	.L73
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1505              		.loc 1 972 0
 1506 01fe 7B68     		ldr	r3, [r7, #4]
 1507 0200 1B6C     		ldr	r3, [r3, #64]
 1508 0202 43F48032 		orr	r2, r3, #65536
 1509 0206 7B68     		ldr	r3, [r7, #4]
 1510 0208 1A64     		str	r2, [r3, #64]
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Level out of window callback */ 
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
 1511              		.loc 1 975 0
 1512 020a 7868     		ldr	r0, [r7, #4]
 1513 020c FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 1514              		.loc 1 978 0
 1515 0210 7B68     		ldr	r3, [r7, #4]
 1516 0212 1B68     		ldr	r3, [r3]
 1517 0214 6FF00102 		mvn	r2, #1
 1518 0218 1A60     		str	r2, [r3]
 1519              	.L73:
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 1520              		.loc 1 982 0
 1521 021a 7B68     		ldr	r3, [r7, #4]
 1522 021c 1B68     		ldr	r3, [r3]
 1523 021e 1B68     		ldr	r3, [r3]
 1524 0220 03F02003 		and	r3, r3, #32
 1525 0224 002B     		cmp	r3, #0
 1526 0226 14BF     		ite	ne
 1527 0228 0123     		movne	r3, #1
 1528 022a 0023     		moveq	r3, #0
 1529 022c DBB2     		uxtb	r3, r3
 1530 022e FB60     		str	r3, [r7, #12]
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
ARM GAS  /tmp/ccMRyWhv.s 			page 45


 1531              		.loc 1 983 0
 1532 0230 7B68     		ldr	r3, [r7, #4]
 1533 0232 1B68     		ldr	r3, [r3]
 1534 0234 5B68     		ldr	r3, [r3, #4]
 1535 0236 03F08063 		and	r3, r3, #67108864
 1536 023a 002B     		cmp	r3, #0
 1537 023c 14BF     		ite	ne
 1538 023e 0123     		movne	r3, #1
 1539 0240 0023     		moveq	r3, #0
 1540 0242 DBB2     		uxtb	r3, r3
 1541 0244 BB60     		str	r3, [r7, #8]
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check Overrun flag */
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(tmp1 && tmp2)
 1542              		.loc 1 985 0
 1543 0246 FB68     		ldr	r3, [r7, #12]
 1544 0248 002B     		cmp	r3, #0
 1545 024a 15D0     		beq	.L75
 1546              		.loc 1 985 0 is_stmt 0 discriminator 1
 1547 024c BB68     		ldr	r3, [r7, #8]
 1548 024e 002B     		cmp	r3, #0
 1549 0250 12D0     		beq	.L75
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Note: On STM32F4, ADC overrun can be set through other parameters    */
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       refer to description of parameter "EOCSelection" for more      */
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       details.                                                       */
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC error code to overrun */
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 1550              		.loc 1 992 0 is_stmt 1
 1551 0252 7B68     		ldr	r3, [r7, #4]
 1552 0254 5B6C     		ldr	r3, [r3, #68]
 1553 0256 43F00202 		orr	r2, r3, #2
 1554 025a 7B68     		ldr	r3, [r7, #4]
 1555 025c 5A64     		str	r2, [r3, #68]
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear ADC overrun flag */
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 1556              		.loc 1 995 0
 1557 025e 7B68     		ldr	r3, [r7, #4]
 1558 0260 1B68     		ldr	r3, [r3]
 1559 0262 6FF02002 		mvn	r2, #32
 1560 0266 1A60     		str	r2, [r3]
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Error callback */ 
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADC_ErrorCallback(hadc);
 1561              		.loc 1 998 0
 1562 0268 7868     		ldr	r0, [r7, #4]
 1563 026a FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the Overrun flag */
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 1564              		.loc 1 1001 0
 1565 026e 7B68     		ldr	r3, [r7, #4]
 1566 0270 1B68     		ldr	r3, [r3]
 1567 0272 6FF02002 		mvn	r2, #32
 1568 0276 1A60     		str	r2, [r3]
 1569              	.L75:
ARM GAS  /tmp/ccMRyWhv.s 			page 46


1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1570              		.loc 1 1003 0
 1571 0278 00BF     		nop
 1572 027a 1037     		adds	r7, r7, #16
 1573              	.LCFI59:
 1574              		.cfi_def_cfa_offset 8
 1575 027c BD46     		mov	sp, r7
 1576              	.LCFI60:
 1577              		.cfi_def_cfa_register 13
 1578              		@ sp needed
 1579 027e 80BD     		pop	{r7, pc}
 1580              		.cfi_endproc
 1581              	.LFE136:
 1583              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1584              		.align	2
 1585              		.global	HAL_ADC_Start_DMA
 1586              		.thumb
 1587              		.thumb_func
 1589              	HAL_ADC_Start_DMA:
 1590              	.LFB137:
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Enables ADC DMA request after last transfer (Single-ADC mode) and enables ADC periphera
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 1591              		.loc 1 1014 0
 1592              		.cfi_startproc
 1593              		@ args = 0, pretend = 0, frame = 24
 1594              		@ frame_needed = 1, uses_anonymous_args = 0
 1595 0000 80B5     		push	{r7, lr}
 1596              	.LCFI61:
 1597              		.cfi_def_cfa_offset 8
 1598              		.cfi_offset 7, -8
 1599              		.cfi_offset 14, -4
 1600 0002 86B0     		sub	sp, sp, #24
 1601              	.LCFI62:
 1602              		.cfi_def_cfa_offset 32
 1603 0004 00AF     		add	r7, sp, #0
 1604              	.LCFI63:
 1605              		.cfi_def_cfa_register 7
 1606 0006 F860     		str	r0, [r7, #12]
 1607 0008 B960     		str	r1, [r7, #8]
 1608 000a 7A60     		str	r2, [r7, #4]
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 1609              		.loc 1 1015 0
 1610 000c 0023     		movs	r3, #0
 1611 000e 7B61     		str	r3, [r7, #20]
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
ARM GAS  /tmp/ccMRyWhv.s 			page 47


1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1612              		.loc 1 1022 0
 1613 0010 FB68     		ldr	r3, [r7, #12]
 1614 0012 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1615 0016 012B     		cmp	r3, #1
 1616 0018 01D1     		bne	.L77
 1617              		.loc 1 1022 0 is_stmt 0 discriminator 1
 1618 001a 0223     		movs	r3, #2
 1619 001c AEE0     		b	.L78
 1620              	.L77:
 1621              		.loc 1 1022 0 discriminator 2
 1622 001e FB68     		ldr	r3, [r7, #12]
 1623 0020 0122     		movs	r2, #1
 1624 0022 83F83C20 		strb	r2, [r3, #60]
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable the ADC peripheral */
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   Tstab time the ADC's stabilization */
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 1625              		.loc 1 1027 0 is_stmt 1 discriminator 2
 1626 0026 FB68     		ldr	r3, [r7, #12]
 1627 0028 1B68     		ldr	r3, [r3]
 1628 002a 9B68     		ldr	r3, [r3, #8]
 1629 002c 03F00103 		and	r3, r3, #1
 1630 0030 002B     		cmp	r3, #0
 1631 0032 18D1     		bne	.L79
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {  
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the Peripheral */
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 1632              		.loc 1 1030 0
 1633 0034 FB68     		ldr	r3, [r7, #12]
 1634 0036 1B68     		ldr	r3, [r3]
 1635 0038 FA68     		ldr	r2, [r7, #12]
 1636 003a 1268     		ldr	r2, [r2]
 1637 003c 9268     		ldr	r2, [r2, #8]
 1638 003e 42F00102 		orr	r2, r2, #1
 1639 0042 9A60     		str	r2, [r3, #8]
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 1640              		.loc 1 1034 0
 1641 0044 4F4B     		ldr	r3, .L88
 1642 0046 1B68     		ldr	r3, [r3]
 1643 0048 4F4A     		ldr	r2, .L88+4
 1644 004a A2FB0323 		umull	r2, r3, r2, r3
 1645 004e 9A0C     		lsrs	r2, r3, #18
 1646 0050 1346     		mov	r3, r2
 1647 0052 5B00     		lsls	r3, r3, #1
 1648 0054 1344     		add	r3, r3, r2
 1649 0056 7B61     		str	r3, [r7, #20]
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 1650              		.loc 1 1035 0
 1651 0058 02E0     		b	.L80
ARM GAS  /tmp/ccMRyWhv.s 			page 48


 1652              	.L81:
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       counter--;
 1653              		.loc 1 1037 0
 1654 005a 7B69     		ldr	r3, [r7, #20]
 1655 005c 013B     		subs	r3, r3, #1
 1656 005e 7B61     		str	r3, [r7, #20]
 1657              	.L80:
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     while(counter != 0U)
 1658              		.loc 1 1035 0
 1659 0060 7B69     		ldr	r3, [r7, #20]
 1660 0062 002B     		cmp	r3, #0
 1661 0064 F9D1     		bne	.L81
 1662              	.L79:
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 1663              		.loc 1 1042 0
 1664 0066 FB68     		ldr	r3, [r7, #12]
 1665 0068 1B68     		ldr	r3, [r3]
 1666 006a 9B68     		ldr	r3, [r3, #8]
 1667 006c 03F00103 		and	r3, r3, #1
 1668 0070 002B     		cmp	r3, #0
 1669 0072 00F08280 		beq	.L82
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state                                                          */
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1670              		.loc 1 1047 0
 1671 0076 FB68     		ldr	r3, [r7, #12]
 1672 0078 1B6C     		ldr	r3, [r3, #64]
 1673 007a 23F4E063 		bic	r3, r3, #1792
 1674 007e 23F00103 		bic	r3, r3, #1
 1675 0082 43F48072 		orr	r2, r3, #256
 1676 0086 FB68     		ldr	r3, [r7, #12]
 1677 0088 1A64     		str	r2, [r3, #64]
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* update ADC state.                                                      */
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1678              		.loc 1 1053 0
 1679 008a FB68     		ldr	r3, [r7, #12]
 1680 008c 1B68     		ldr	r3, [r3]
 1681 008e 5B68     		ldr	r3, [r3, #4]
 1682 0090 03F48063 		and	r3, r3, #1024
 1683 0094 002B     		cmp	r3, #0
 1684 0096 07D0     		beq	.L83
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1685              		.loc 1 1055 0
 1686 0098 FB68     		ldr	r3, [r7, #12]
 1687 009a 1B6C     		ldr	r3, [r3, #64]
ARM GAS  /tmp/ccMRyWhv.s 			page 49


 1688 009c 23F44053 		bic	r3, r3, #12288
 1689 00a0 43F48052 		orr	r2, r3, #4096
 1690 00a4 FB68     		ldr	r3, [r7, #12]
 1691 00a6 1A64     		str	r2, [r3, #64]
 1692              	.L83:
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1693              		.loc 1 1059 0
 1694 00a8 FB68     		ldr	r3, [r7, #12]
 1695 00aa 1B6C     		ldr	r3, [r3, #64]
 1696 00ac 03F48053 		and	r3, r3, #4096
 1697 00b0 002B     		cmp	r3, #0
 1698 00b2 06D0     		beq	.L84
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1699              		.loc 1 1062 0
 1700 00b4 FB68     		ldr	r3, [r7, #12]
 1701 00b6 5B6C     		ldr	r3, [r3, #68]
 1702 00b8 23F00602 		bic	r2, r3, #6
 1703 00bc FB68     		ldr	r3, [r7, #12]
 1704 00be 5A64     		str	r2, [r3, #68]
 1705 00c0 02E0     		b	.L85
 1706              	.L84:
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Reset ADC all error code fields */
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1707              		.loc 1 1067 0
 1708 00c2 FB68     		ldr	r3, [r7, #12]
 1709 00c4 0022     		movs	r2, #0
 1710 00c6 5A64     		str	r2, [r3, #68]
 1711              	.L85:
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Process unlocked */
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_UNLOCK(hadc);   
 1712              		.loc 1 1073 0
 1713 00c8 FB68     		ldr	r3, [r7, #12]
 1714 00ca 0022     		movs	r2, #0
 1715 00cc 83F83C20 		strb	r2, [r3, #60]
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the DMA transfer complete callback */
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1716              		.loc 1 1076 0
 1717 00d0 FB68     		ldr	r3, [r7, #12]
 1718 00d2 9B6B     		ldr	r3, [r3, #56]
 1719 00d4 2D4A     		ldr	r2, .L88+8
 1720 00d6 DA63     		str	r2, [r3, #60]
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the DMA half transfer complete callback */
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
ARM GAS  /tmp/ccMRyWhv.s 			page 50


 1721              		.loc 1 1079 0
 1722 00d8 FB68     		ldr	r3, [r7, #12]
 1723 00da 9B6B     		ldr	r3, [r3, #56]
 1724 00dc 2C4A     		ldr	r2, .L88+12
 1725 00de 1A64     		str	r2, [r3, #64]
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the DMA error callback */
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1726              		.loc 1 1082 0
 1727 00e0 FB68     		ldr	r3, [r7, #12]
 1728 00e2 9B6B     		ldr	r3, [r3, #56]
 1729 00e4 2B4A     		ldr	r2, .L88+16
 1730 00e6 DA64     		str	r2, [r3, #76]
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* start (in case of SW start):                                           */
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 1731              		.loc 1 1090 0
 1732 00e8 FB68     		ldr	r3, [r7, #12]
 1733 00ea 1B68     		ldr	r3, [r3]
 1734 00ec 6FF02202 		mvn	r2, #34
 1735 00f0 1A60     		str	r2, [r3]
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable ADC overrun interrupt */
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 1736              		.loc 1 1093 0
 1737 00f2 FB68     		ldr	r3, [r7, #12]
 1738 00f4 1B68     		ldr	r3, [r3]
 1739 00f6 FA68     		ldr	r2, [r7, #12]
 1740 00f8 1268     		ldr	r2, [r2]
 1741 00fa 5268     		ldr	r2, [r2, #4]
 1742 00fc 42F08062 		orr	r2, r2, #67108864
 1743 0100 5A60     		str	r2, [r3, #4]
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable ADC DMA mode */
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 |= ADC_CR2_DMA;
 1744              		.loc 1 1096 0
 1745 0102 FB68     		ldr	r3, [r7, #12]
 1746 0104 1B68     		ldr	r3, [r3]
 1747 0106 FA68     		ldr	r2, [r7, #12]
 1748 0108 1268     		ldr	r2, [r2]
 1749 010a 9268     		ldr	r2, [r2, #8]
 1750 010c 42F48072 		orr	r2, r2, #256
 1751 0110 9A60     		str	r2, [r3, #8]
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Start the DMA channel */
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1752              		.loc 1 1099 0
 1753 0112 FB68     		ldr	r3, [r7, #12]
 1754 0114 986B     		ldr	r0, [r3, #56]
 1755 0116 FB68     		ldr	r3, [r7, #12]
 1756 0118 1B68     		ldr	r3, [r3]
 1757 011a 4C33     		adds	r3, r3, #76
ARM GAS  /tmp/ccMRyWhv.s 			page 51


 1758 011c 1946     		mov	r1, r3
 1759 011e BA68     		ldr	r2, [r7, #8]
 1760 0120 7B68     		ldr	r3, [r7, #4]
 1761 0122 FFF7FEFF 		bl	HAL_DMA_Start_IT
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Check if Multimode enabled */
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 1762              		.loc 1 1102 0
 1763 0126 1C4B     		ldr	r3, .L88+20
 1764 0128 5B68     		ldr	r3, [r3, #4]
 1765 012a 03F01F03 		and	r3, r3, #31
 1766 012e 002B     		cmp	r3, #0
 1767 0130 0FD1     		bne	.L86
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 1768              		.loc 1 1105 0
 1769 0132 FB68     		ldr	r3, [r7, #12]
 1770 0134 1B68     		ldr	r3, [r3]
 1771 0136 9B68     		ldr	r3, [r3, #8]
 1772 0138 03F04053 		and	r3, r3, #805306368
 1773 013c 002B     		cmp	r3, #0
 1774 013e 1CD1     		bne	.L82
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 1775              		.loc 1 1108 0
 1776 0140 FB68     		ldr	r3, [r7, #12]
 1777 0142 1B68     		ldr	r3, [r3]
 1778 0144 FA68     		ldr	r2, [r7, #12]
 1779 0146 1268     		ldr	r2, [r2]
 1780 0148 9268     		ldr	r2, [r2, #8]
 1781 014a 42F08042 		orr	r2, r2, #1073741824
 1782 014e 9A60     		str	r2, [r3, #8]
 1783 0150 13E0     		b	.L82
 1784              	.L86:
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     else
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 1785              		.loc 1 1114 0
 1786 0152 FB68     		ldr	r3, [r7, #12]
 1787 0154 1B68     		ldr	r3, [r3]
 1788 0156 114A     		ldr	r2, .L88+24
 1789 0158 9342     		cmp	r3, r2
 1790 015a 0ED1     		bne	.L82
 1791              		.loc 1 1114 0 is_stmt 0 discriminator 1
 1792 015c FB68     		ldr	r3, [r7, #12]
 1793 015e 1B68     		ldr	r3, [r3]
 1794 0160 9B68     		ldr	r3, [r3, #8]
 1795 0162 03F04053 		and	r3, r3, #805306368
 1796 0166 002B     		cmp	r3, #0
 1797 0168 07D1     		bne	.L82
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
ARM GAS  /tmp/ccMRyWhv.s 			page 52


1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 1798              		.loc 1 1117 0 is_stmt 1
 1799 016a FB68     		ldr	r3, [r7, #12]
 1800 016c 1B68     		ldr	r3, [r3]
 1801 016e FA68     		ldr	r2, [r7, #12]
 1802 0170 1268     		ldr	r2, [r2]
 1803 0172 9268     		ldr	r2, [r2, #8]
 1804 0174 42F08042 		orr	r2, r2, #1073741824
 1805 0178 9A60     		str	r2, [r3, #8]
 1806              	.L82:
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 1807              		.loc 1 1123 0
 1808 017a 0023     		movs	r3, #0
 1809              	.L78:
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1810              		.loc 1 1124 0
 1811 017c 1846     		mov	r0, r3
 1812 017e 1837     		adds	r7, r7, #24
 1813              	.LCFI64:
 1814              		.cfi_def_cfa_offset 8
 1815 0180 BD46     		mov	sp, r7
 1816              	.LCFI65:
 1817              		.cfi_def_cfa_register 13
 1818              		@ sp needed
 1819 0182 80BD     		pop	{r7, pc}
 1820              	.L89:
 1821              		.align	2
 1822              	.L88:
 1823 0184 00000000 		.word	SystemCoreClock
 1824 0188 83DE1B43 		.word	1125899907
 1825 018c 00000000 		.word	ADC_DMAConvCplt
 1826 0190 00000000 		.word	ADC_DMAHalfConvCplt
 1827 0194 00000000 		.word	ADC_DMAError
 1828 0198 00230140 		.word	1073816320
 1829 019c 00200140 		.word	1073815552
 1830              		.cfi_endproc
 1831              	.LFE137:
 1833              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1834              		.align	2
 1835              		.global	HAL_ADC_Stop_DMA
 1836              		.thumb
 1837              		.thumb_func
 1839              	HAL_ADC_Stop_DMA:
 1840              	.LFB138:
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Disables ADC DMA (Single-ADC mode) and disables ADC peripheral    
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/ccMRyWhv.s 			page 53


1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 1841              		.loc 1 1133 0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 16
 1844              		@ frame_needed = 1, uses_anonymous_args = 0
 1845 0000 80B5     		push	{r7, lr}
 1846              	.LCFI66:
 1847              		.cfi_def_cfa_offset 8
 1848              		.cfi_offset 7, -8
 1849              		.cfi_offset 14, -4
 1850 0002 84B0     		sub	sp, sp, #16
 1851              	.LCFI67:
 1852              		.cfi_def_cfa_offset 24
 1853 0004 00AF     		add	r7, sp, #0
 1854              	.LCFI68:
 1855              		.cfi_def_cfa_register 7
 1856 0006 7860     		str	r0, [r7, #4]
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1857              		.loc 1 1134 0
 1858 0008 0023     		movs	r3, #0
 1859 000a FB73     		strb	r3, [r7, #15]
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1860              		.loc 1 1140 0
 1861 000c 7B68     		ldr	r3, [r7, #4]
 1862 000e 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1863 0012 012B     		cmp	r3, #1
 1864 0014 01D1     		bne	.L91
 1865              		.loc 1 1140 0 is_stmt 0 discriminator 1
 1866 0016 0223     		movs	r3, #2
 1867 0018 38E0     		b	.L92
 1868              	.L91:
 1869              		.loc 1 1140 0 discriminator 2
 1870 001a 7B68     		ldr	r3, [r7, #4]
 1871 001c 0122     		movs	r2, #1
 1872 001e 83F83C20 		strb	r2, [r3, #60]
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Disable ADC peripheral */
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 1873              		.loc 1 1144 0 is_stmt 1 discriminator 2
 1874 0022 7B68     		ldr	r3, [r7, #4]
 1875 0024 1B68     		ldr	r3, [r3]
 1876 0026 7A68     		ldr	r2, [r7, #4]
 1877 0028 1268     		ldr	r2, [r2]
 1878 002a 9268     		ldr	r2, [r2, #8]
 1879 002c 22F00102 		bic	r2, r2, #1
 1880 0030 9A60     		str	r2, [r3, #8]
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 1881              		.loc 1 1147 0 discriminator 2
 1882 0032 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccMRyWhv.s 			page 54


 1883 0034 1B68     		ldr	r3, [r3]
 1884 0036 9B68     		ldr	r3, [r3, #8]
 1885 0038 03F00103 		and	r3, r3, #1
 1886 003c 002B     		cmp	r3, #0
 1887 003e 20D1     		bne	.L93
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Disable the selected ADC DMA mode */
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 1888              		.loc 1 1150 0
 1889 0040 7B68     		ldr	r3, [r7, #4]
 1890 0042 1B68     		ldr	r3, [r3]
 1891 0044 7A68     		ldr	r2, [r7, #4]
 1892 0046 1268     		ldr	r2, [r2]
 1893 0048 9268     		ldr	r2, [r2, #8]
 1894 004a 22F48072 		bic	r2, r2, #256
 1895 004e 9A60     		str	r2, [r3, #8]
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 1896              		.loc 1 1154 0
 1897 0050 7B68     		ldr	r3, [r7, #4]
 1898 0052 9B6B     		ldr	r3, [r3, #56]
 1899 0054 1846     		mov	r0, r3
 1900 0056 FFF7FEFF 		bl	HAL_DMA_Abort
 1901 005a 0346     		mov	r3, r0
 1902 005c FB73     		strb	r3, [r7, #15]
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 1903              		.loc 1 1157 0
 1904 005e 7B68     		ldr	r3, [r7, #4]
 1905 0060 1B68     		ldr	r3, [r3]
 1906 0062 7A68     		ldr	r2, [r7, #4]
 1907 0064 1268     		ldr	r2, [r2]
 1908 0066 5268     		ldr	r2, [r2, #4]
 1909 0068 22F08062 		bic	r2, r2, #67108864
 1910 006c 5A60     		str	r2, [r3, #4]
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set ADC state */
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1911              		.loc 1 1160 0
 1912 006e 7B68     		ldr	r3, [r7, #4]
 1913 0070 1B6C     		ldr	r3, [r3, #64]
 1914 0072 23F48853 		bic	r3, r3, #4352
 1915 0076 23F00103 		bic	r3, r3, #1
 1916 007a 43F00102 		orr	r2, r3, #1
 1917 007e 7B68     		ldr	r3, [r7, #4]
 1918 0080 1A64     		str	r2, [r3, #64]
 1919              	.L93:
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1920              		.loc 1 1166 0
ARM GAS  /tmp/ccMRyWhv.s 			page 55


 1921 0082 7B68     		ldr	r3, [r7, #4]
 1922 0084 0022     		movs	r2, #0
 1923 0086 83F83C20 		strb	r2, [r3, #60]
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return tmp_hal_status;
 1924              		.loc 1 1169 0
 1925 008a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1926              	.L92:
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1927              		.loc 1 1170 0
 1928 008c 1846     		mov	r0, r3
 1929 008e 1037     		adds	r7, r7, #16
 1930              	.LCFI69:
 1931              		.cfi_def_cfa_offset 8
 1932 0090 BD46     		mov	sp, r7
 1933              	.LCFI70:
 1934              		.cfi_def_cfa_register 13
 1935              		@ sp needed
 1936 0092 80BD     		pop	{r7, pc}
 1937              		.cfi_endproc
 1938              	.LFE138:
 1940              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1941              		.align	2
 1942              		.global	HAL_ADC_GetValue
 1943              		.thumb
 1944              		.thumb_func
 1946              	HAL_ADC_GetValue:
 1947              	.LFB139:
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Gets the converted value from data register of regular channel.
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval Converted value
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {       
 1948              		.loc 1 1179 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 8
 1951              		@ frame_needed = 1, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
 1953 0000 80B4     		push	{r7}
 1954              	.LCFI71:
 1955              		.cfi_def_cfa_offset 4
 1956              		.cfi_offset 7, -4
 1957 0002 83B0     		sub	sp, sp, #12
 1958              	.LCFI72:
 1959              		.cfi_def_cfa_offset 16
 1960 0004 00AF     		add	r7, sp, #0
 1961              	.LCFI73:
 1962              		.cfi_def_cfa_register 7
 1963 0006 7860     		str	r0, [r7, #4]
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return hadc->Instance->DR;
 1964              		.loc 1 1181 0
ARM GAS  /tmp/ccMRyWhv.s 			page 56


 1965 0008 7B68     		ldr	r3, [r7, #4]
 1966 000a 1B68     		ldr	r3, [r3]
 1967 000c DB6C     		ldr	r3, [r3, #76]
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 1968              		.loc 1 1182 0
 1969 000e 1846     		mov	r0, r3
 1970 0010 0C37     		adds	r7, r7, #12
 1971              	.LCFI74:
 1972              		.cfi_def_cfa_offset 4
 1973 0012 BD46     		mov	sp, r7
 1974              	.LCFI75:
 1975              		.cfi_def_cfa_register 13
 1976              		@ sp needed
 1977 0014 5DF8047B 		ldr	r7, [sp], #4
 1978              	.LCFI76:
 1979              		.cfi_restore 7
 1980              		.cfi_def_cfa_offset 0
 1981 0018 7047     		bx	lr
 1982              		.cfi_endproc
 1983              	.LFE139:
 1985 001a 00BF     		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1986              		.align	2
 1987              		.weak	HAL_ADC_ConvCpltCallback
 1988              		.thumb
 1989              		.thumb_func
 1991              	HAL_ADC_ConvCpltCallback:
 1992              	.LFB140:
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Regular conversion complete callback in non blocking mode 
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 1993              		.loc 1 1191 0
 1994              		.cfi_startproc
 1995              		@ args = 0, pretend = 0, frame = 8
 1996              		@ frame_needed = 1, uses_anonymous_args = 0
 1997              		@ link register save eliminated.
 1998 0000 80B4     		push	{r7}
 1999              	.LCFI77:
 2000              		.cfi_def_cfa_offset 4
 2001              		.cfi_offset 7, -4
 2002 0002 83B0     		sub	sp, sp, #12
 2003              	.LCFI78:
 2004              		.cfi_def_cfa_offset 16
 2005 0004 00AF     		add	r7, sp, #0
 2006              	.LCFI79:
 2007              		.cfi_def_cfa_register 7
 2008 0006 7860     		str	r0, [r7, #4]
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_ConvCpltCallback could be implemented in the user file
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */
ARM GAS  /tmp/ccMRyWhv.s 			page 57


1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 2009              		.loc 1 1197 0
 2010 0008 00BF     		nop
 2011 000a 0C37     		adds	r7, r7, #12
 2012              	.LCFI80:
 2013              		.cfi_def_cfa_offset 4
 2014 000c BD46     		mov	sp, r7
 2015              	.LCFI81:
 2016              		.cfi_def_cfa_register 13
 2017              		@ sp needed
 2018 000e 5DF8047B 		ldr	r7, [sp], #4
 2019              	.LCFI82:
 2020              		.cfi_restore 7
 2021              		.cfi_def_cfa_offset 0
 2022 0012 7047     		bx	lr
 2023              		.cfi_endproc
 2024              	.LFE140:
 2026              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2027              		.align	2
 2028              		.weak	HAL_ADC_ConvHalfCpltCallback
 2029              		.thumb
 2030              		.thumb_func
 2032              	HAL_ADC_ConvHalfCpltCallback:
 2033              	.LFB141:
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Regular conversion half DMA transfer callback in non blocking mode 
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 2034              		.loc 1 1206 0
 2035              		.cfi_startproc
 2036              		@ args = 0, pretend = 0, frame = 8
 2037              		@ frame_needed = 1, uses_anonymous_args = 0
 2038              		@ link register save eliminated.
 2039 0000 80B4     		push	{r7}
 2040              	.LCFI83:
 2041              		.cfi_def_cfa_offset 4
 2042              		.cfi_offset 7, -4
 2043 0002 83B0     		sub	sp, sp, #12
 2044              	.LCFI84:
 2045              		.cfi_def_cfa_offset 16
 2046 0004 00AF     		add	r7, sp, #0
 2047              	.LCFI85:
 2048              		.cfi_def_cfa_register 7
 2049 0006 7860     		str	r0, [r7, #4]
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 2050              		.loc 1 1212 0
 2051 0008 00BF     		nop
ARM GAS  /tmp/ccMRyWhv.s 			page 58


 2052 000a 0C37     		adds	r7, r7, #12
 2053              	.LCFI86:
 2054              		.cfi_def_cfa_offset 4
 2055 000c BD46     		mov	sp, r7
 2056              	.LCFI87:
 2057              		.cfi_def_cfa_register 13
 2058              		@ sp needed
 2059 000e 5DF8047B 		ldr	r7, [sp], #4
 2060              	.LCFI88:
 2061              		.cfi_restore 7
 2062              		.cfi_def_cfa_offset 0
 2063 0012 7047     		bx	lr
 2064              		.cfi_endproc
 2065              	.LFE141:
 2067              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2068              		.align	2
 2069              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2070              		.thumb
 2071              		.thumb_func
 2073              	HAL_ADC_LevelOutOfWindowCallback:
 2074              	.LFB142:
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode 
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 2075              		.loc 1 1221 0
 2076              		.cfi_startproc
 2077              		@ args = 0, pretend = 0, frame = 8
 2078              		@ frame_needed = 1, uses_anonymous_args = 0
 2079              		@ link register save eliminated.
 2080 0000 80B4     		push	{r7}
 2081              	.LCFI89:
 2082              		.cfi_def_cfa_offset 4
 2083              		.cfi_offset 7, -4
 2084 0002 83B0     		sub	sp, sp, #12
 2085              	.LCFI90:
 2086              		.cfi_def_cfa_offset 16
 2087 0004 00AF     		add	r7, sp, #0
 2088              	.LCFI91:
 2089              		.cfi_def_cfa_register 7
 2090 0006 7860     		str	r0, [r7, #4]
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 2091              		.loc 1 1227 0
 2092 0008 00BF     		nop
 2093 000a 0C37     		adds	r7, r7, #12
 2094              	.LCFI92:
 2095              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccMRyWhv.s 			page 59


 2096 000c BD46     		mov	sp, r7
 2097              	.LCFI93:
 2098              		.cfi_def_cfa_register 13
 2099              		@ sp needed
 2100 000e 5DF8047B 		ldr	r7, [sp], #4
 2101              	.LCFI94:
 2102              		.cfi_restore 7
 2103              		.cfi_def_cfa_offset 0
 2104 0012 7047     		bx	lr
 2105              		.cfi_endproc
 2106              	.LFE142:
 2108              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2109              		.align	2
 2110              		.weak	HAL_ADC_ErrorCallback
 2111              		.thumb
 2112              		.thumb_func
 2114              	HAL_ADC_ErrorCallback:
 2115              	.LFB143:
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Error ADC callback.
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 2116              		.loc 1 1242 0
 2117              		.cfi_startproc
 2118              		@ args = 0, pretend = 0, frame = 8
 2119              		@ frame_needed = 1, uses_anonymous_args = 0
 2120              		@ link register save eliminated.
 2121 0000 80B4     		push	{r7}
 2122              	.LCFI95:
 2123              		.cfi_def_cfa_offset 4
 2124              		.cfi_offset 7, -4
 2125 0002 83B0     		sub	sp, sp, #12
 2126              	.LCFI96:
 2127              		.cfi_def_cfa_offset 16
 2128 0004 00AF     		add	r7, sp, #0
 2129              	.LCFI97:
 2130              		.cfi_def_cfa_register 7
 2131 0006 7860     		str	r0, [r7, #4]
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   UNUSED(hadc);
1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             the HAL_ADC_ErrorCallback could be implemented in the user file
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****    */
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 2132              		.loc 1 1248 0
 2133 0008 00BF     		nop
ARM GAS  /tmp/ccMRyWhv.s 			page 60


 2134 000a 0C37     		adds	r7, r7, #12
 2135              	.LCFI98:
 2136              		.cfi_def_cfa_offset 4
 2137 000c BD46     		mov	sp, r7
 2138              	.LCFI99:
 2139              		.cfi_def_cfa_register 13
 2140              		@ sp needed
 2141 000e 5DF8047B 		ldr	r7, [sp], #4
 2142              	.LCFI100:
 2143              		.cfi_restore 7
 2144              		.cfi_def_cfa_offset 0
 2145 0012 7047     		bx	lr
 2146              		.cfi_endproc
 2147              	.LFE143:
 2149              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2150              		.align	2
 2151              		.global	HAL_ADC_ConfigChannel
 2152              		.thumb
 2153              		.thumb_func
 2155              	HAL_ADC_ConfigChannel:
 2156              	.LFB144:
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @}
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *  @brief   	Peripheral Control functions 
1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @verbatim   
1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****              ##### Peripheral Control functions #####
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================  
1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Configure regular channels. 
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Configure injected channels.
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Configure multimode.
1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Configure the analog watch dog.
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @endverbatim
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /**
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         rank in the sequencer and its sample time.
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  sConfig: ADC configuration structure. 
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 2157              		.loc 1 1280 0
 2158              		.cfi_startproc
 2159              		@ args = 0, pretend = 0, frame = 16
 2160              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccMRyWhv.s 			page 61


 2161              		@ link register save eliminated.
 2162 0000 90B4     		push	{r4, r7}
 2163              	.LCFI101:
 2164              		.cfi_def_cfa_offset 8
 2165              		.cfi_offset 4, -8
 2166              		.cfi_offset 7, -4
 2167 0002 84B0     		sub	sp, sp, #16
 2168              	.LCFI102:
 2169              		.cfi_def_cfa_offset 24
 2170 0004 00AF     		add	r7, sp, #0
 2171              	.LCFI103:
 2172              		.cfi_def_cfa_register 7
 2173 0006 7860     		str	r0, [r7, #4]
 2174 0008 3960     		str	r1, [r7]
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 2175              		.loc 1 1281 0
 2176 000a 0023     		movs	r3, #0
 2177 000c FB60     		str	r3, [r7, #12]
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2178              		.loc 1 1289 0
 2179 000e 7B68     		ldr	r3, [r7, #4]
 2180 0010 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2181 0014 012B     		cmp	r3, #1
 2182 0016 01D1     		bne	.L101
 2183              		.loc 1 1289 0 is_stmt 0 discriminator 1
 2184 0018 0223     		movs	r3, #2
 2185 001a 00E1     		b	.L102
 2186              	.L101:
 2187              		.loc 1 1289 0 discriminator 2
 2188 001c 7B68     		ldr	r3, [r7, #4]
 2189 001e 0122     		movs	r2, #1
 2190 0020 83F83C20 		strb	r2, [r3, #60]
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if (sConfig->Channel > ADC_CHANNEL_9)
 2191              		.loc 1 1292 0 is_stmt 1 discriminator 2
 2192 0024 3B68     		ldr	r3, [r7]
 2193 0026 1B68     		ldr	r3, [r3]
 2194 0028 092B     		cmp	r3, #9
 2195 002a 24D9     		bls	.L103
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the old sample time */
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 2196              		.loc 1 1295 0
 2197 002c 7B68     		ldr	r3, [r7, #4]
 2198 002e 1968     		ldr	r1, [r3]
 2199 0030 7B68     		ldr	r3, [r7, #4]
 2200 0032 1B68     		ldr	r3, [r3]
 2201 0034 D868     		ldr	r0, [r3, #12]
 2202 0036 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccMRyWhv.s 			page 62


 2203 0038 1B68     		ldr	r3, [r3]
 2204 003a 9AB2     		uxth	r2, r3
 2205 003c 1346     		mov	r3, r2
 2206 003e 5B00     		lsls	r3, r3, #1
 2207 0040 1344     		add	r3, r3, r2
 2208 0042 1E3B     		subs	r3, r3, #30
 2209 0044 0722     		movs	r2, #7
 2210 0046 02FA03F3 		lsl	r3, r2, r3
 2211 004a DB43     		mvns	r3, r3
 2212 004c 0340     		ands	r3, r3, r0
 2213 004e CB60     		str	r3, [r1, #12]
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the new sample time */
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 2214              		.loc 1 1298 0
 2215 0050 7B68     		ldr	r3, [r7, #4]
 2216 0052 1968     		ldr	r1, [r3]
 2217 0054 7B68     		ldr	r3, [r7, #4]
 2218 0056 1B68     		ldr	r3, [r3]
 2219 0058 D868     		ldr	r0, [r3, #12]
 2220 005a 3B68     		ldr	r3, [r7]
 2221 005c 9C68     		ldr	r4, [r3, #8]
 2222 005e 3B68     		ldr	r3, [r7]
 2223 0060 1B68     		ldr	r3, [r3]
 2224 0062 9AB2     		uxth	r2, r3
 2225 0064 1346     		mov	r3, r2
 2226 0066 5B00     		lsls	r3, r3, #1
 2227 0068 1344     		add	r3, r3, r2
 2228 006a 1E3B     		subs	r3, r3, #30
 2229 006c 04FA03F3 		lsl	r3, r4, r3
 2230 0070 0343     		orrs	r3, r3, r0
 2231 0072 CB60     		str	r3, [r1, #12]
 2232 0074 21E0     		b	.L104
 2233              	.L103:
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the old sample time */
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 2234              		.loc 1 1303 0
 2235 0076 7B68     		ldr	r3, [r7, #4]
 2236 0078 1968     		ldr	r1, [r3]
 2237 007a 7B68     		ldr	r3, [r7, #4]
 2238 007c 1B68     		ldr	r3, [r3]
 2239 007e 1869     		ldr	r0, [r3, #16]
 2240 0080 3B68     		ldr	r3, [r7]
 2241 0082 1B68     		ldr	r3, [r3]
 2242 0084 9AB2     		uxth	r2, r3
 2243 0086 1346     		mov	r3, r2
 2244 0088 5B00     		lsls	r3, r3, #1
 2245 008a 1344     		add	r3, r3, r2
 2246 008c 0722     		movs	r2, #7
 2247 008e 02FA03F3 		lsl	r3, r2, r3
 2248 0092 DB43     		mvns	r3, r3
 2249 0094 0340     		ands	r3, r3, r0
 2250 0096 0B61     		str	r3, [r1, #16]
1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
ARM GAS  /tmp/ccMRyWhv.s 			page 63


1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the new sample time */
1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 2251              		.loc 1 1306 0
 2252 0098 7B68     		ldr	r3, [r7, #4]
 2253 009a 1968     		ldr	r1, [r3]
 2254 009c 7B68     		ldr	r3, [r7, #4]
 2255 009e 1B68     		ldr	r3, [r3]
 2256 00a0 1869     		ldr	r0, [r3, #16]
 2257 00a2 3B68     		ldr	r3, [r7]
 2258 00a4 9C68     		ldr	r4, [r3, #8]
 2259 00a6 3B68     		ldr	r3, [r7]
 2260 00a8 1B68     		ldr	r3, [r3]
 2261 00aa 9AB2     		uxth	r2, r3
 2262 00ac 1346     		mov	r3, r2
 2263 00ae 5B00     		lsls	r3, r3, #1
 2264 00b0 1344     		add	r3, r3, r2
 2265 00b2 04FA03F3 		lsl	r3, r4, r3
 2266 00b6 0343     		orrs	r3, r3, r0
 2267 00b8 0B61     		str	r3, [r1, #16]
 2268              	.L104:
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* For Rank 1 to 6 */
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if (sConfig->Rank < 7U)
 2269              		.loc 1 1310 0
 2270 00ba 3B68     		ldr	r3, [r7]
 2271 00bc 5B68     		ldr	r3, [r3, #4]
 2272 00be 062B     		cmp	r3, #6
 2273 00c0 23D8     		bhi	.L105
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 2274              		.loc 1 1313 0
 2275 00c2 7B68     		ldr	r3, [r7, #4]
 2276 00c4 1968     		ldr	r1, [r3]
 2277 00c6 7B68     		ldr	r3, [r7, #4]
 2278 00c8 1B68     		ldr	r3, [r3]
 2279 00ca 586B     		ldr	r0, [r3, #52]
 2280 00cc 3B68     		ldr	r3, [r7]
 2281 00ce 5A68     		ldr	r2, [r3, #4]
 2282 00d0 1346     		mov	r3, r2
 2283 00d2 9B00     		lsls	r3, r3, #2
 2284 00d4 1344     		add	r3, r3, r2
 2285 00d6 053B     		subs	r3, r3, #5
 2286 00d8 1F22     		movs	r2, #31
 2287 00da 02FA03F3 		lsl	r3, r2, r3
 2288 00de DB43     		mvns	r3, r3
 2289 00e0 0340     		ands	r3, r3, r0
 2290 00e2 4B63     		str	r3, [r1, #52]
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 2291              		.loc 1 1316 0
 2292 00e4 7B68     		ldr	r3, [r7, #4]
 2293 00e6 1968     		ldr	r1, [r3]
 2294 00e8 7B68     		ldr	r3, [r7, #4]
 2295 00ea 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccMRyWhv.s 			page 64


 2296 00ec 586B     		ldr	r0, [r3, #52]
 2297 00ee 3B68     		ldr	r3, [r7]
 2298 00f0 1B68     		ldr	r3, [r3]
 2299 00f2 9CB2     		uxth	r4, r3
 2300 00f4 3B68     		ldr	r3, [r7]
 2301 00f6 5A68     		ldr	r2, [r3, #4]
 2302 00f8 1346     		mov	r3, r2
 2303 00fa 9B00     		lsls	r3, r3, #2
 2304 00fc 1344     		add	r3, r3, r2
 2305 00fe 053B     		subs	r3, r3, #5
 2306 0100 04FA03F3 		lsl	r3, r4, r3
 2307 0104 0343     		orrs	r3, r3, r0
 2308 0106 4B63     		str	r3, [r1, #52]
 2309 0108 4AE0     		b	.L106
 2310              	.L105:
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* For Rank 7 to 12 */
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else if (sConfig->Rank < 13U)
 2311              		.loc 1 1319 0
 2312 010a 3B68     		ldr	r3, [r7]
 2313 010c 5B68     		ldr	r3, [r3, #4]
 2314 010e 0C2B     		cmp	r3, #12
 2315 0110 23D8     		bhi	.L107
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 2316              		.loc 1 1322 0
 2317 0112 7B68     		ldr	r3, [r7, #4]
 2318 0114 1968     		ldr	r1, [r3]
 2319 0116 7B68     		ldr	r3, [r7, #4]
 2320 0118 1B68     		ldr	r3, [r3]
 2321 011a 186B     		ldr	r0, [r3, #48]
 2322 011c 3B68     		ldr	r3, [r7]
 2323 011e 5A68     		ldr	r2, [r3, #4]
 2324 0120 1346     		mov	r3, r2
 2325 0122 9B00     		lsls	r3, r3, #2
 2326 0124 1344     		add	r3, r3, r2
 2327 0126 233B     		subs	r3, r3, #35
 2328 0128 1F22     		movs	r2, #31
 2329 012a 02FA03F3 		lsl	r3, r2, r3
 2330 012e DB43     		mvns	r3, r3
 2331 0130 0340     		ands	r3, r3, r0
 2332 0132 0B63     		str	r3, [r1, #48]
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 2333              		.loc 1 1325 0
 2334 0134 7B68     		ldr	r3, [r7, #4]
 2335 0136 1968     		ldr	r1, [r3]
 2336 0138 7B68     		ldr	r3, [r7, #4]
 2337 013a 1B68     		ldr	r3, [r3]
 2338 013c 186B     		ldr	r0, [r3, #48]
 2339 013e 3B68     		ldr	r3, [r7]
 2340 0140 1B68     		ldr	r3, [r3]
 2341 0142 9CB2     		uxth	r4, r3
 2342 0144 3B68     		ldr	r3, [r7]
 2343 0146 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/ccMRyWhv.s 			page 65


 2344 0148 1346     		mov	r3, r2
 2345 014a 9B00     		lsls	r3, r3, #2
 2346 014c 1344     		add	r3, r3, r2
 2347 014e 233B     		subs	r3, r3, #35
 2348 0150 04FA03F3 		lsl	r3, r4, r3
 2349 0154 0343     		orrs	r3, r3, r0
 2350 0156 0B63     		str	r3, [r1, #48]
 2351 0158 22E0     		b	.L106
 2352              	.L107:
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* For Rank 13 to 16 */
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 2353              		.loc 1 1331 0
 2354 015a 7B68     		ldr	r3, [r7, #4]
 2355 015c 1968     		ldr	r1, [r3]
 2356 015e 7B68     		ldr	r3, [r7, #4]
 2357 0160 1B68     		ldr	r3, [r3]
 2358 0162 D86A     		ldr	r0, [r3, #44]
 2359 0164 3B68     		ldr	r3, [r7]
 2360 0166 5A68     		ldr	r2, [r3, #4]
 2361 0168 1346     		mov	r3, r2
 2362 016a 9B00     		lsls	r3, r3, #2
 2363 016c 1344     		add	r3, r3, r2
 2364 016e 413B     		subs	r3, r3, #65
 2365 0170 1F22     		movs	r2, #31
 2366 0172 02FA03F3 		lsl	r3, r2, r3
 2367 0176 DB43     		mvns	r3, r3
 2368 0178 0340     		ands	r3, r3, r0
 2369 017a CB62     		str	r3, [r1, #44]
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 2370              		.loc 1 1334 0
 2371 017c 7B68     		ldr	r3, [r7, #4]
 2372 017e 1968     		ldr	r1, [r3]
 2373 0180 7B68     		ldr	r3, [r7, #4]
 2374 0182 1B68     		ldr	r3, [r3]
 2375 0184 D86A     		ldr	r0, [r3, #44]
 2376 0186 3B68     		ldr	r3, [r7]
 2377 0188 1B68     		ldr	r3, [r3]
 2378 018a 9CB2     		uxth	r4, r3
 2379 018c 3B68     		ldr	r3, [r7]
 2380 018e 5A68     		ldr	r2, [r3, #4]
 2381 0190 1346     		mov	r3, r2
 2382 0192 9B00     		lsls	r3, r3, #2
 2383 0194 1344     		add	r3, r3, r2
 2384 0196 413B     		subs	r3, r3, #65
 2385 0198 04FA03F3 		lsl	r3, r4, r3
 2386 019c 0343     		orrs	r3, r3, r0
 2387 019e CB62     		str	r3, [r1, #44]
 2388              	.L106:
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* if ADC1 Channel_18 is selected enable VBAT Channel */
ARM GAS  /tmp/ccMRyWhv.s 			page 66


1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 2389              		.loc 1 1338 0
 2390 01a0 7B68     		ldr	r3, [r7, #4]
 2391 01a2 1B68     		ldr	r3, [r3]
 2392 01a4 204A     		ldr	r2, .L113
 2393 01a6 9342     		cmp	r3, r2
 2394 01a8 09D1     		bne	.L108
 2395              		.loc 1 1338 0 is_stmt 0 discriminator 1
 2396 01aa 3B68     		ldr	r3, [r7]
 2397 01ac 1B68     		ldr	r3, [r3]
 2398 01ae 122B     		cmp	r3, #18
 2399 01b0 05D1     		bne	.L108
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the VBAT channel*/
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_VBATE;
 2400              		.loc 1 1341 0 is_stmt 1
 2401 01b2 1E4A     		ldr	r2, .L113+4
 2402 01b4 1D4B     		ldr	r3, .L113+4
 2403 01b6 5B68     		ldr	r3, [r3, #4]
 2404 01b8 43F48003 		orr	r3, r3, #4194304
 2405 01bc 5360     		str	r3, [r2, #4]
 2406              	.L108:
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VRE
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channe
 2407              		.loc 1 1345 0
 2408 01be 7B68     		ldr	r3, [r7, #4]
 2409 01c0 1B68     		ldr	r3, [r3]
 2410 01c2 194A     		ldr	r2, .L113
 2411 01c4 9342     		cmp	r3, r2
 2412 01c6 25D1     		bne	.L109
 2413              		.loc 1 1345 0 is_stmt 0 discriminator 1
 2414 01c8 3B68     		ldr	r3, [r7]
 2415 01ca 1B68     		ldr	r3, [r3]
 2416 01cc 184A     		ldr	r2, .L113+8
 2417 01ce 9342     		cmp	r3, r2
 2418 01d0 03D0     		beq	.L110
 2419              		.loc 1 1345 0 discriminator 2
 2420 01d2 3B68     		ldr	r3, [r7]
 2421 01d4 1B68     		ldr	r3, [r3]
 2422 01d6 112B     		cmp	r3, #17
 2423 01d8 1CD1     		bne	.L109
 2424              	.L110:
1346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the TSVREFE channel*/
1348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_TSVREFE;
 2425              		.loc 1 1348 0 is_stmt 1
 2426 01da 144A     		ldr	r2, .L113+4
 2427 01dc 134B     		ldr	r3, .L113+4
 2428 01de 5B68     		ldr	r3, [r3, #4]
 2429 01e0 43F40003 		orr	r3, r3, #8388608
 2430 01e4 5360     		str	r3, [r2, #4]
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 2431              		.loc 1 1350 0
 2432 01e6 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccMRyWhv.s 			page 67


 2433 01e8 1B68     		ldr	r3, [r3]
 2434 01ea 114A     		ldr	r2, .L113+8
 2435 01ec 9342     		cmp	r3, r2
 2436 01ee 11D1     		bne	.L109
1351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Delay for temperature sensor stabilization time */
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Compute number of CPU cycles to wait for */
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 2437              		.loc 1 1354 0
 2438 01f0 104B     		ldr	r3, .L113+12
 2439 01f2 1B68     		ldr	r3, [r3]
 2440 01f4 104A     		ldr	r2, .L113+16
 2441 01f6 A2FB0323 		umull	r2, r3, r2, r3
 2442 01fa 9A0C     		lsrs	r2, r3, #18
 2443 01fc 1346     		mov	r3, r2
 2444 01fe 9B00     		lsls	r3, r3, #2
 2445 0200 1344     		add	r3, r3, r2
 2446 0202 5B00     		lsls	r3, r3, #1
 2447 0204 FB60     		str	r3, [r7, #12]
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       while(counter != 0U)
 2448              		.loc 1 1355 0
 2449 0206 02E0     		b	.L111
 2450              	.L112:
1356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         counter--;
 2451              		.loc 1 1357 0
 2452 0208 FB68     		ldr	r3, [r7, #12]
 2453 020a 013B     		subs	r3, r3, #1
 2454 020c FB60     		str	r3, [r7, #12]
 2455              	.L111:
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       while(counter != 0U)
 2456              		.loc 1 1355 0
 2457 020e FB68     		ldr	r3, [r7, #12]
 2458 0210 002B     		cmp	r3, #0
 2459 0212 F9D1     		bne	.L112
 2460              	.L109:
1358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
1359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2461              		.loc 1 1363 0
 2462 0214 7B68     		ldr	r3, [r7, #4]
 2463 0216 0022     		movs	r2, #0
 2464 0218 83F83C20 		strb	r2, [r3, #60]
1364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
1366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 2465              		.loc 1 1366 0
 2466 021c 0023     		movs	r3, #0
 2467              	.L102:
1367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 2468              		.loc 1 1367 0
 2469 021e 1846     		mov	r0, r3
 2470 0220 1037     		adds	r7, r7, #16
 2471              	.LCFI104:
ARM GAS  /tmp/ccMRyWhv.s 			page 68


 2472              		.cfi_def_cfa_offset 8
 2473 0222 BD46     		mov	sp, r7
 2474              	.LCFI105:
 2475              		.cfi_def_cfa_register 13
 2476              		@ sp needed
 2477 0224 90BC     		pop	{r4, r7}
 2478              	.LCFI106:
 2479              		.cfi_restore 7
 2480              		.cfi_restore 4
 2481              		.cfi_def_cfa_offset 0
 2482 0226 7047     		bx	lr
 2483              	.L114:
 2484              		.align	2
 2485              	.L113:
 2486 0228 00200140 		.word	1073815552
 2487 022c 00230140 		.word	1073816320
 2488 0230 12000010 		.word	268435474
 2489 0234 00000000 		.word	SystemCoreClock
 2490 0238 83DE1B43 		.word	1125899907
 2491              		.cfi_endproc
 2492              	.LFE144:
 2494              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2495              		.align	2
 2496              		.global	HAL_ADC_AnalogWDGConfig
 2497              		.thumb
 2498              		.thumb_func
 2500              	HAL_ADC_AnalogWDGConfig:
 2501              	.LFB145:
1368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @note Analog watchdog thresholds can be modified while ADC conversion
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * is on going.
1373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * In this case, some constraints must be taken into account:
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * The programmed threshold values are effective from the next
1375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * ADC EOC (end of unitary conversion).
1376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * Considering that registers write delay may happen due to
1377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * bus activity, this might cause an uncertainty on the
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * effective timing of the new programmed threshold values.
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  AnalogWDGConfig : pointer to an ADC_AnalogWDGConfTypeDef structure 
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         that contains the configuration information of ADC analog watchdog.
1383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL status	  
1384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 2502              		.loc 1 1386 0
 2503              		.cfi_startproc
 2504              		@ args = 0, pretend = 0, frame = 8
 2505              		@ frame_needed = 1, uses_anonymous_args = 0
 2506              		@ link register save eliminated.
 2507 0000 80B4     		push	{r7}
 2508              	.LCFI107:
 2509              		.cfi_def_cfa_offset 4
 2510              		.cfi_offset 7, -4
 2511 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccMRyWhv.s 			page 69


 2512              	.LCFI108:
 2513              		.cfi_def_cfa_offset 16
 2514 0004 00AF     		add	r7, sp, #0
 2515              	.LCFI109:
 2516              		.cfi_def_cfa_register 7
 2517 0006 7860     		str	r0, [r7, #4]
 2518 0008 3960     		str	r1, [r7]
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   uint32_t tmp = 0U;
1389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */  
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Check the parameters */
1392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(AnalogWDGConfig->WatchdogMode));
1393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   tmp = ADC_GET_RESOLUTION(hadc);
1398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
1399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
1400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */
1401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process locked */
1403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2519              		.loc 1 1403 0
 2520 000a 7B68     		ldr	r3, [r7, #4]
 2521 000c 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 2522 0010 012B     		cmp	r3, #1
 2523 0012 01D1     		bne	.L116
 2524              		.loc 1 1403 0 is_stmt 0 discriminator 1
 2525 0014 0223     		movs	r3, #2
 2526 0016 4CE0     		b	.L117
 2527              	.L116:
 2528              		.loc 1 1403 0 discriminator 2
 2529 0018 7B68     		ldr	r3, [r7, #4]
 2530 001a 0122     		movs	r2, #1
 2531 001c 83F83C20 		strb	r2, [r3, #60]
1404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
 2532              		.loc 1 1405 0 is_stmt 1 discriminator 2
 2533 0020 3B68     		ldr	r3, [r7]
 2534 0022 1B69     		ldr	r3, [r3, #16]
 2535 0024 012B     		cmp	r3, #1
 2536 0026 08D1     		bne	.L118
1406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 2537              		.loc 1 1408 0
 2538 0028 7B68     		ldr	r3, [r7, #4]
 2539 002a 1B68     		ldr	r3, [r3]
 2540 002c 7A68     		ldr	r2, [r7, #4]
 2541 002e 1268     		ldr	r2, [r2]
 2542 0030 5268     		ldr	r2, [r2, #4]
 2543 0032 42F04002 		orr	r2, r2, #64
 2544 0036 5A60     		str	r2, [r3, #4]
 2545 0038 07E0     		b	.L119
 2546              	.L118:
ARM GAS  /tmp/ccMRyWhv.s 			page 70


1409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 2547              		.loc 1 1413 0
 2548 003a 7B68     		ldr	r3, [r7, #4]
 2549 003c 1B68     		ldr	r3, [r3]
 2550 003e 7A68     		ldr	r2, [r7, #4]
 2551 0040 1268     		ldr	r2, [r2]
 2552 0042 5268     		ldr	r2, [r2, #4]
 2553 0044 22F04002 		bic	r2, r2, #64
 2554 0048 5A60     		str	r2, [r3, #4]
 2555              	.L119:
1414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
1417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 2556              		.loc 1 1417 0
 2557 004a 7B68     		ldr	r3, [r7, #4]
 2558 004c 1A68     		ldr	r2, [r3]
 2559 004e 7B68     		ldr	r3, [r7, #4]
 2560 0050 1B68     		ldr	r3, [r3]
 2561 0052 5B68     		ldr	r3, [r3, #4]
 2562 0054 23F44003 		bic	r3, r3, #12582912
 2563 0058 23F40073 		bic	r3, r3, #512
 2564 005c 5360     		str	r3, [r2, #4]
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set the analog watchdog enable mode */
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 2565              		.loc 1 1420 0
 2566 005e 7B68     		ldr	r3, [r7, #4]
 2567 0060 1B68     		ldr	r3, [r3]
 2568 0062 7A68     		ldr	r2, [r7, #4]
 2569 0064 1268     		ldr	r2, [r2]
 2570 0066 5168     		ldr	r1, [r2, #4]
 2571 0068 3A68     		ldr	r2, [r7]
 2572 006a 1268     		ldr	r2, [r2]
 2573 006c 0A43     		orrs	r2, r2, r1
 2574 006e 5A60     		str	r2, [r3, #4]
1421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set the high threshold */
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 2575              		.loc 1 1423 0
 2576 0070 7B68     		ldr	r3, [r7, #4]
 2577 0072 1B68     		ldr	r3, [r3]
 2578 0074 3A68     		ldr	r2, [r7]
 2579 0076 5268     		ldr	r2, [r2, #4]
 2580 0078 5A62     		str	r2, [r3, #36]
1424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set the low threshold */
1426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 2581              		.loc 1 1426 0
 2582 007a 7B68     		ldr	r3, [r7, #4]
 2583 007c 1B68     		ldr	r3, [r3]
 2584 007e 3A68     		ldr	r2, [r7]
 2585 0080 9268     		ldr	r2, [r2, #8]
ARM GAS  /tmp/ccMRyWhv.s 			page 71


 2586 0082 9A62     		str	r2, [r3, #40]
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Clear the Analog watchdog channel select bits */
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 2587              		.loc 1 1429 0
 2588 0084 7B68     		ldr	r3, [r7, #4]
 2589 0086 1B68     		ldr	r3, [r3]
 2590 0088 7A68     		ldr	r2, [r7, #4]
 2591 008a 1268     		ldr	r2, [r2]
 2592 008c 5268     		ldr	r2, [r2, #4]
 2593 008e 22F01F02 		bic	r2, r2, #31
 2594 0092 5A60     		str	r2, [r3, #4]
1430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set the Analog watchdog channel */
1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 2595              		.loc 1 1432 0
 2596 0094 7B68     		ldr	r3, [r7, #4]
 2597 0096 1B68     		ldr	r3, [r3]
 2598 0098 7A68     		ldr	r2, [r7, #4]
 2599 009a 1268     		ldr	r2, [r2]
 2600 009c 5168     		ldr	r1, [r2, #4]
 2601 009e 3A68     		ldr	r2, [r7]
 2602 00a0 D268     		ldr	r2, [r2, #12]
 2603 00a2 92B2     		uxth	r2, r2
 2604 00a4 0A43     		orrs	r2, r2, r1
 2605 00a6 5A60     		str	r2, [r3, #4]
1433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Process unlocked */
1435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2606              		.loc 1 1435 0
 2607 00a8 7B68     		ldr	r3, [r7, #4]
 2608 00aa 0022     		movs	r2, #0
 2609 00ac 83F83C20 		strb	r2, [r3, #60]
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return function status */
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return HAL_OK;
 2610              		.loc 1 1438 0
 2611 00b0 0023     		movs	r3, #0
 2612              	.L117:
1439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 2613              		.loc 1 1439 0
 2614 00b2 1846     		mov	r0, r3
 2615 00b4 0C37     		adds	r7, r7, #12
 2616              	.LCFI110:
 2617              		.cfi_def_cfa_offset 4
 2618 00b6 BD46     		mov	sp, r7
 2619              	.LCFI111:
 2620              		.cfi_def_cfa_register 13
 2621              		@ sp needed
 2622 00b8 5DF8047B 		ldr	r7, [sp], #4
 2623              	.LCFI112:
 2624              		.cfi_restore 7
 2625              		.cfi_def_cfa_offset 0
 2626 00bc 7047     		bx	lr
 2627              		.cfi_endproc
 2628              	.LFE145:
 2630 00be 00BF     		.section	.text.HAL_ADC_GetState,"ax",%progbits
ARM GAS  /tmp/ccMRyWhv.s 			page 72


 2631              		.align	2
 2632              		.global	HAL_ADC_GetState
 2633              		.thumb
 2634              		.thumb_func
 2636              	HAL_ADC_GetState:
 2637              	.LFB146:
1440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @}
1443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 ADC Peripheral State functions
1446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *  @brief   ADC Peripheral State functions 
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  *
1448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @verbatim   
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****             ##### Peripheral State and errors functions #####
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****  ===============================================================================  
1452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     [..]
1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     This subsection provides functions allowing to
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Check the ADC state
1455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       (+) Check the ADC Error
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****          
1457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** @endverbatim
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  return the ADC state
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval HAL state
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 2638              		.loc 1 1468 0
 2639              		.cfi_startproc
 2640              		@ args = 0, pretend = 0, frame = 8
 2641              		@ frame_needed = 1, uses_anonymous_args = 0
 2642              		@ link register save eliminated.
 2643 0000 80B4     		push	{r7}
 2644              	.LCFI113:
 2645              		.cfi_def_cfa_offset 4
 2646              		.cfi_offset 7, -4
 2647 0002 83B0     		sub	sp, sp, #12
 2648              	.LCFI114:
 2649              		.cfi_def_cfa_offset 16
 2650 0004 00AF     		add	r7, sp, #0
 2651              	.LCFI115:
 2652              		.cfi_def_cfa_register 7
 2653 0006 7860     		str	r0, [r7, #4]
1469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Return ADC state */
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return hadc->State;
 2654              		.loc 1 1470 0
 2655 0008 7B68     		ldr	r3, [r7, #4]
 2656 000a 1B6C     		ldr	r3, [r3, #64]
1471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
ARM GAS  /tmp/ccMRyWhv.s 			page 73


 2657              		.loc 1 1471 0
 2658 000c 1846     		mov	r0, r3
 2659 000e 0C37     		adds	r7, r7, #12
 2660              	.LCFI116:
 2661              		.cfi_def_cfa_offset 4
 2662 0010 BD46     		mov	sp, r7
 2663              	.LCFI117:
 2664              		.cfi_def_cfa_register 13
 2665              		@ sp needed
 2666 0012 5DF8047B 		ldr	r7, [sp], #4
 2667              	.LCFI118:
 2668              		.cfi_restore 7
 2669              		.cfi_def_cfa_offset 0
 2670 0016 7047     		bx	lr
 2671              		.cfi_endproc
 2672              	.LFE146:
 2674              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2675              		.align	2
 2676              		.global	HAL_ADC_GetError
 2677              		.thumb
 2678              		.thumb_func
 2680              	HAL_ADC_GetError:
 2681              	.LFB147:
1472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Return the ADC error code
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval ADC Error Code
1478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 2682              		.loc 1 1480 0
 2683              		.cfi_startproc
 2684              		@ args = 0, pretend = 0, frame = 8
 2685              		@ frame_needed = 1, uses_anonymous_args = 0
 2686              		@ link register save eliminated.
 2687 0000 80B4     		push	{r7}
 2688              	.LCFI119:
 2689              		.cfi_def_cfa_offset 4
 2690              		.cfi_offset 7, -4
 2691 0002 83B0     		sub	sp, sp, #12
 2692              	.LCFI120:
 2693              		.cfi_def_cfa_offset 16
 2694 0004 00AF     		add	r7, sp, #0
 2695              	.LCFI121:
 2696              		.cfi_def_cfa_register 7
 2697 0006 7860     		str	r0, [r7, #4]
1481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   return hadc->ErrorCode;
 2698              		.loc 1 1481 0
 2699 0008 7B68     		ldr	r3, [r7, #4]
 2700 000a 5B6C     		ldr	r3, [r3, #68]
1482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 2701              		.loc 1 1482 0
 2702 000c 1846     		mov	r0, r3
 2703 000e 0C37     		adds	r7, r7, #12
 2704              	.LCFI122:
ARM GAS  /tmp/ccMRyWhv.s 			page 74


 2705              		.cfi_def_cfa_offset 4
 2706 0010 BD46     		mov	sp, r7
 2707              	.LCFI123:
 2708              		.cfi_def_cfa_register 13
 2709              		@ sp needed
 2710 0012 5DF8047B 		ldr	r7, [sp], #4
 2711              	.LCFI124:
 2712              		.cfi_restore 7
 2713              		.cfi_def_cfa_offset 0
 2714 0016 7047     		bx	lr
 2715              		.cfi_endproc
 2716              	.LFE147:
 2718              		.section	.text.ADC_Init,"ax",%progbits
 2719              		.align	2
 2720              		.thumb
 2721              		.thumb_func
 2723              	ADC_Init:
 2724              	.LFB148:
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @}
1486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /** @addtogroup ADC_Private_Functions
1489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @{
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         in the ADC_InitStruct without initializing the ADC MSP.       
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
1496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc)
1500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 2725              		.loc 1 1500 0
 2726              		.cfi_startproc
 2727              		@ args = 0, pretend = 0, frame = 16
 2728              		@ frame_needed = 1, uses_anonymous_args = 0
 2729              		@ link register save eliminated.
 2730 0000 80B4     		push	{r7}
 2731              	.LCFI125:
 2732              		.cfi_def_cfa_offset 4
 2733              		.cfi_offset 7, -4
 2734 0002 85B0     		sub	sp, sp, #20
 2735              	.LCFI126:
 2736              		.cfi_def_cfa_offset 24
 2737 0004 00AF     		add	r7, sp, #0
 2738              	.LCFI127:
 2739              		.cfi_def_cfa_register 7
 2740 0006 7860     		str	r0, [r7, #4]
1501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC parameters */
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set the ADC clock prescaler */
1503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC->CCR &= ~(ADC_CCR_ADCPRE);
 2741              		.loc 1 1503 0
 2742 0008 7C4A     		ldr	r2, .L130
ARM GAS  /tmp/ccMRyWhv.s 			page 75


 2743 000a 7C4B     		ldr	r3, .L130
 2744 000c 5B68     		ldr	r3, [r3, #4]
 2745 000e 23F44033 		bic	r3, r3, #196608
 2746 0012 5360     		str	r3, [r2, #4]
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC->CCR |=  hadc->Init.ClockPrescaler;
 2747              		.loc 1 1504 0
 2748 0014 7949     		ldr	r1, .L130
 2749 0016 794B     		ldr	r3, .L130
 2750 0018 5A68     		ldr	r2, [r3, #4]
 2751 001a 7B68     		ldr	r3, [r7, #4]
 2752 001c 5B68     		ldr	r3, [r3, #4]
 2753 001e 1343     		orrs	r3, r3, r2
 2754 0020 4B60     		str	r3, [r1, #4]
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC scan mode */
1507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 2755              		.loc 1 1507 0
 2756 0022 7B68     		ldr	r3, [r7, #4]
 2757 0024 1B68     		ldr	r3, [r3]
 2758 0026 7A68     		ldr	r2, [r7, #4]
 2759 0028 1268     		ldr	r2, [r2]
 2760 002a 5268     		ldr	r2, [r2, #4]
 2761 002c 22F48072 		bic	r2, r2, #256
 2762 0030 5A60     		str	r2, [r3, #4]
1508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 2763              		.loc 1 1508 0
 2764 0032 7B68     		ldr	r3, [r7, #4]
 2765 0034 1B68     		ldr	r3, [r3]
 2766 0036 7A68     		ldr	r2, [r7, #4]
 2767 0038 1268     		ldr	r2, [r2]
 2768 003a 5168     		ldr	r1, [r2, #4]
 2769 003c 7A68     		ldr	r2, [r7, #4]
 2770 003e 1269     		ldr	r2, [r2, #16]
 2771 0040 1202     		lsls	r2, r2, #8
 2772 0042 0A43     		orrs	r2, r2, r1
 2773 0044 5A60     		str	r2, [r3, #4]
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC resolution */
1511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 2774              		.loc 1 1511 0
 2775 0046 7B68     		ldr	r3, [r7, #4]
 2776 0048 1B68     		ldr	r3, [r3]
 2777 004a 7A68     		ldr	r2, [r7, #4]
 2778 004c 1268     		ldr	r2, [r2]
 2779 004e 5268     		ldr	r2, [r2, #4]
 2780 0050 22F04072 		bic	r2, r2, #50331648
 2781 0054 5A60     		str	r2, [r3, #4]
1512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR1 |=  hadc->Init.Resolution;
 2782              		.loc 1 1512 0
 2783 0056 7B68     		ldr	r3, [r7, #4]
 2784 0058 1B68     		ldr	r3, [r3]
 2785 005a 7A68     		ldr	r2, [r7, #4]
 2786 005c 1268     		ldr	r2, [r2]
 2787 005e 5168     		ldr	r1, [r2, #4]
 2788 0060 7A68     		ldr	r2, [r7, #4]
 2789 0062 9268     		ldr	r2, [r2, #8]
 2790 0064 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccMRyWhv.s 			page 76


 2791 0066 5A60     		str	r2, [r3, #4]
1513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC data alignment */
1515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 2792              		.loc 1 1515 0
 2793 0068 7B68     		ldr	r3, [r7, #4]
 2794 006a 1B68     		ldr	r3, [r3]
 2795 006c 7A68     		ldr	r2, [r7, #4]
 2796 006e 1268     		ldr	r2, [r2]
 2797 0070 9268     		ldr	r2, [r2, #8]
 2798 0072 22F40062 		bic	r2, r2, #2048
 2799 0076 9A60     		str	r2, [r3, #8]
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 |= hadc->Init.DataAlign;
 2800              		.loc 1 1516 0
 2801 0078 7B68     		ldr	r3, [r7, #4]
 2802 007a 1B68     		ldr	r3, [r3]
 2803 007c 7A68     		ldr	r2, [r7, #4]
 2804 007e 1268     		ldr	r2, [r2]
 2805 0080 9168     		ldr	r1, [r2, #8]
 2806 0082 7A68     		ldr	r2, [r7, #4]
 2807 0084 D268     		ldr	r2, [r2, #12]
 2808 0086 0A43     		orrs	r2, r2, r1
 2809 0088 9A60     		str	r2, [r3, #8]
1517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable external trigger if trigger selection is different of software  */
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* start.                                                                 */
1520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Note: This configuration keeps the hardware feature of parameter       */
1521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
1522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /*       software start.                                                  */
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 2810              		.loc 1 1523 0
 2811 008a 7B68     		ldr	r3, [r7, #4]
 2812 008c 9B6A     		ldr	r3, [r3, #40]
 2813 008e 5C4A     		ldr	r2, .L130+4
 2814 0090 9342     		cmp	r3, r2
 2815 0092 22D0     		beq	.L125
1524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Select external trigger to start conversion */
1526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 2816              		.loc 1 1526 0
 2817 0094 7B68     		ldr	r3, [r7, #4]
 2818 0096 1B68     		ldr	r3, [r3]
 2819 0098 7A68     		ldr	r2, [r7, #4]
 2820 009a 1268     		ldr	r2, [r2]
 2821 009c 9268     		ldr	r2, [r2, #8]
 2822 009e 22F07062 		bic	r2, r2, #251658240
 2823 00a2 9A60     		str	r2, [r3, #8]
1527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 2824              		.loc 1 1527 0
 2825 00a4 7B68     		ldr	r3, [r7, #4]
 2826 00a6 1B68     		ldr	r3, [r3]
 2827 00a8 7A68     		ldr	r2, [r7, #4]
 2828 00aa 1268     		ldr	r2, [r2]
 2829 00ac 9168     		ldr	r1, [r2, #8]
 2830 00ae 7A68     		ldr	r2, [r7, #4]
 2831 00b0 926A     		ldr	r2, [r2, #40]
 2832 00b2 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccMRyWhv.s 			page 77


 2833 00b4 9A60     		str	r2, [r3, #8]
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Select external trigger polarity */
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 2834              		.loc 1 1530 0
 2835 00b6 7B68     		ldr	r3, [r7, #4]
 2836 00b8 1B68     		ldr	r3, [r3]
 2837 00ba 7A68     		ldr	r2, [r7, #4]
 2838 00bc 1268     		ldr	r2, [r2]
 2839 00be 9268     		ldr	r2, [r2, #8]
 2840 00c0 22F04052 		bic	r2, r2, #805306368
 2841 00c4 9A60     		str	r2, [r3, #8]
1531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 2842              		.loc 1 1531 0
 2843 00c6 7B68     		ldr	r3, [r7, #4]
 2844 00c8 1B68     		ldr	r3, [r3]
 2845 00ca 7A68     		ldr	r2, [r7, #4]
 2846 00cc 1268     		ldr	r2, [r2]
 2847 00ce 9168     		ldr	r1, [r2, #8]
 2848 00d0 7A68     		ldr	r2, [r7, #4]
 2849 00d2 D26A     		ldr	r2, [r2, #44]
 2850 00d4 0A43     		orrs	r2, r2, r1
 2851 00d6 9A60     		str	r2, [r3, #8]
 2852 00d8 0FE0     		b	.L126
 2853              	.L125:
1532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
1534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Reset the external trigger */
1536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 2854              		.loc 1 1536 0
 2855 00da 7B68     		ldr	r3, [r7, #4]
 2856 00dc 1B68     		ldr	r3, [r3]
 2857 00de 7A68     		ldr	r2, [r7, #4]
 2858 00e0 1268     		ldr	r2, [r2]
 2859 00e2 9268     		ldr	r2, [r2, #8]
 2860 00e4 22F07062 		bic	r2, r2, #251658240
 2861 00e8 9A60     		str	r2, [r3, #8]
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 2862              		.loc 1 1537 0
 2863 00ea 7B68     		ldr	r3, [r7, #4]
 2864 00ec 1B68     		ldr	r3, [r3]
 2865 00ee 7A68     		ldr	r2, [r7, #4]
 2866 00f0 1268     		ldr	r2, [r2]
 2867 00f2 9268     		ldr	r2, [r2, #8]
 2868 00f4 22F04052 		bic	r2, r2, #805306368
 2869 00f8 9A60     		str	r2, [r3, #8]
 2870              	.L126:
1538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable or disable ADC continuous conversion mode */
1541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 2871              		.loc 1 1541 0
 2872 00fa 7B68     		ldr	r3, [r7, #4]
 2873 00fc 1B68     		ldr	r3, [r3]
 2874 00fe 7A68     		ldr	r2, [r7, #4]
 2875 0100 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccMRyWhv.s 			page 78


 2876 0102 9268     		ldr	r2, [r2, #8]
 2877 0104 22F00202 		bic	r2, r2, #2
 2878 0108 9A60     		str	r2, [r3, #8]
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 2879              		.loc 1 1542 0
 2880 010a 7B68     		ldr	r3, [r7, #4]
 2881 010c 1B68     		ldr	r3, [r3]
 2882 010e 7A68     		ldr	r2, [r7, #4]
 2883 0110 1268     		ldr	r2, [r2]
 2884 0112 9168     		ldr	r1, [r2, #8]
 2885 0114 7A68     		ldr	r2, [r7, #4]
 2886 0116 9269     		ldr	r2, [r2, #24]
 2887 0118 5200     		lsls	r2, r2, #1
 2888 011a 0A43     		orrs	r2, r2, r1
 2889 011c 9A60     		str	r2, [r3, #8]
1543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if(hadc->Init.DiscontinuousConvMode != DISABLE)
 2890              		.loc 1 1544 0
 2891 011e 7B68     		ldr	r3, [r7, #4]
 2892 0120 1B6A     		ldr	r3, [r3, #32]
 2893 0122 002B     		cmp	r3, #0
 2894 0124 25D0     		beq	.L127
1545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
1549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 2895              		.loc 1 1549 0
 2896 0126 7B68     		ldr	r3, [r7, #4]
 2897 0128 1B68     		ldr	r3, [r3]
 2898 012a 7A68     		ldr	r2, [r7, #4]
 2899 012c 1268     		ldr	r2, [r2]
 2900 012e 5268     		ldr	r2, [r2, #4]
 2901 0130 42F40062 		orr	r2, r2, #2048
 2902 0134 5A60     		str	r2, [r3, #4]
1550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Set the number of channels to be converted in discontinuous mode */
1552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 2903              		.loc 1 1552 0
 2904 0136 7B68     		ldr	r3, [r7, #4]
 2905 0138 1B68     		ldr	r3, [r3]
 2906 013a 7A68     		ldr	r2, [r7, #4]
 2907 013c 1268     		ldr	r2, [r2]
 2908 013e 5268     		ldr	r2, [r2, #4]
 2909 0140 22F46042 		bic	r2, r2, #57344
 2910 0144 5A60     		str	r2, [r3, #4]
1553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 2911              		.loc 1 1553 0
 2912 0146 7B68     		ldr	r3, [r7, #4]
 2913 0148 5B6A     		ldr	r3, [r3, #36]
 2914 014a 5A1E     		subs	r2, r3, #1
 2915 014c 4FF46043 		mov	r3, #57344
 2916 0150 FB60     		str	r3, [r7, #12]
 2917              	.LBB4:
 2918              	.LBB5:
 2919              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
ARM GAS  /tmp/ccMRyWhv.s 			page 79


   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
ARM GAS  /tmp/ccMRyWhv.s 			page 80


  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
ARM GAS  /tmp/ccMRyWhv.s 			page 81


 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccMRyWhv.s 			page 82


 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccMRyWhv.s 			page 83


 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccMRyWhv.s 			page 84


 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccMRyWhv.s 			page 85


 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccMRyWhv.s 			page 86


 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
ARM GAS  /tmp/ccMRyWhv.s 			page 87


 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
ARM GAS  /tmp/ccMRyWhv.s 			page 88


 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 2920              		.loc 2 531 0
 2921 0152 FB68     		ldr	r3, [r7, #12]
 2922              		.syntax unified
 2923              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2924 0154 93FAA3F3 		rbit r3, r3
 2925              	@ 0 "" 2
 2926              		.thumb
 2927              		.syntax unified
 2928 0158 BB60     		str	r3, [r7, #8]
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 2929              		.loc 2 544 0
 2930 015a BB68     		ldr	r3, [r7, #8]
 2931              	.LBE5:
 2932              	.LBE4:
 2933              		.loc 1 1553 0
 2934 015c B3FA83F3 		clz	r3, r3
 2935 0160 9A40     		lsls	r2, r2, r3
 2936 0162 7B68     		ldr	r3, [r7, #4]
 2937 0164 1B68     		ldr	r3, [r3]
 2938 0166 7968     		ldr	r1, [r7, #4]
 2939 0168 0968     		ldr	r1, [r1]
 2940 016a 4968     		ldr	r1, [r1, #4]
 2941 016c 0A43     		orrs	r2, r2, r1
 2942 016e 5A60     		str	r2, [r3, #4]
 2943 0170 07E0     		b	.L129
 2944              	.L127:
1554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
ARM GAS  /tmp/ccMRyWhv.s 			page 89


1556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
1558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 2945              		.loc 1 1558 0
 2946 0172 7B68     		ldr	r3, [r7, #4]
 2947 0174 1B68     		ldr	r3, [r3]
 2948 0176 7A68     		ldr	r2, [r7, #4]
 2949 0178 1268     		ldr	r2, [r2]
 2950 017a 5268     		ldr	r2, [r2, #4]
 2951 017c 22F40062 		bic	r2, r2, #2048
 2952 0180 5A60     		str	r2, [r3, #4]
 2953              	.L129:
1559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC number of conversion */
1562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 2954              		.loc 1 1562 0
 2955 0182 7B68     		ldr	r3, [r7, #4]
 2956 0184 1B68     		ldr	r3, [r3]
 2957 0186 7A68     		ldr	r2, [r7, #4]
 2958 0188 1268     		ldr	r2, [r2]
 2959 018a D26A     		ldr	r2, [r2, #44]
 2960 018c 22F47002 		bic	r2, r2, #15728640
 2961 0190 DA62     		str	r2, [r3, #44]
1563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 2962              		.loc 1 1563 0
 2963 0192 7B68     		ldr	r3, [r7, #4]
 2964 0194 1B68     		ldr	r3, [r3]
 2965 0196 7A68     		ldr	r2, [r7, #4]
 2966 0198 1268     		ldr	r2, [r2]
 2967 019a D16A     		ldr	r1, [r2, #44]
 2968 019c 7A68     		ldr	r2, [r7, #4]
 2969 019e D269     		ldr	r2, [r2, #28]
 2970 01a0 013A     		subs	r2, r2, #1
 2971 01a2 1205     		lsls	r2, r2, #20
 2972 01a4 0A43     		orrs	r2, r2, r1
 2973 01a6 DA62     		str	r2, [r3, #44]
1564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable or disable ADC DMA continuous request */
1566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 2974              		.loc 1 1566 0
 2975 01a8 7B68     		ldr	r3, [r7, #4]
 2976 01aa 1B68     		ldr	r3, [r3]
 2977 01ac 7A68     		ldr	r2, [r7, #4]
 2978 01ae 1268     		ldr	r2, [r2]
 2979 01b0 9268     		ldr	r2, [r2, #8]
 2980 01b2 22F40072 		bic	r2, r2, #512
 2981 01b6 9A60     		str	r2, [r3, #8]
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 2982              		.loc 1 1567 0
 2983 01b8 7B68     		ldr	r3, [r7, #4]
 2984 01ba 1B68     		ldr	r3, [r3]
 2985 01bc 7A68     		ldr	r2, [r7, #4]
 2986 01be 1268     		ldr	r2, [r2]
 2987 01c0 9168     		ldr	r1, [r2, #8]
 2988 01c2 7A68     		ldr	r2, [r7, #4]
 2989 01c4 126B     		ldr	r2, [r2, #48]
ARM GAS  /tmp/ccMRyWhv.s 			page 90


 2990 01c6 5202     		lsls	r2, r2, #9
 2991 01c8 0A43     		orrs	r2, r2, r1
 2992 01ca 9A60     		str	r2, [r3, #8]
1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Enable or disable ADC end of conversion selection */
1570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 2993              		.loc 1 1570 0
 2994 01cc 7B68     		ldr	r3, [r7, #4]
 2995 01ce 1B68     		ldr	r3, [r3]
 2996 01d0 7A68     		ldr	r2, [r7, #4]
 2997 01d2 1268     		ldr	r2, [r2]
 2998 01d4 9268     		ldr	r2, [r2, #8]
 2999 01d6 22F48062 		bic	r2, r2, #1024
 3000 01da 9A60     		str	r2, [r3, #8]
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 3001              		.loc 1 1571 0
 3002 01dc 7B68     		ldr	r3, [r7, #4]
 3003 01de 1B68     		ldr	r3, [r3]
 3004 01e0 7A68     		ldr	r2, [r7, #4]
 3005 01e2 1268     		ldr	r2, [r2]
 3006 01e4 9168     		ldr	r1, [r2, #8]
 3007 01e6 7A68     		ldr	r2, [r7, #4]
 3008 01e8 5269     		ldr	r2, [r2, #20]
 3009 01ea 9202     		lsls	r2, r2, #10
 3010 01ec 0A43     		orrs	r2, r2, r1
 3011 01ee 9A60     		str	r2, [r3, #8]
1572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 3012              		.loc 1 1572 0
 3013 01f0 00BF     		nop
 3014 01f2 1437     		adds	r7, r7, #20
 3015              	.LCFI128:
 3016              		.cfi_def_cfa_offset 4
 3017 01f4 BD46     		mov	sp, r7
 3018              	.LCFI129:
 3019              		.cfi_def_cfa_register 13
 3020              		@ sp needed
 3021 01f6 5DF8047B 		ldr	r7, [sp], #4
 3022              	.LCFI130:
 3023              		.cfi_restore 7
 3024              		.cfi_def_cfa_offset 0
 3025 01fa 7047     		bx	lr
 3026              	.L131:
 3027              		.align	2
 3028              	.L130:
 3029 01fc 00230140 		.word	1073816320
 3030 0200 0100000F 		.word	251658241
 3031              		.cfi_endproc
 3032              	.LFE148:
 3034              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 3035              		.align	2
 3036              		.thumb
 3037              		.thumb_func
 3039              	ADC_DMAConvCplt:
 3040              	.LFB149:
1573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
ARM GAS  /tmp/ccMRyWhv.s 			page 91


1576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
1581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 3041              		.loc 1 1581 0
 3042              		.cfi_startproc
 3043              		@ args = 0, pretend = 0, frame = 16
 3044              		@ frame_needed = 1, uses_anonymous_args = 0
 3045 0000 80B5     		push	{r7, lr}
 3046              	.LCFI131:
 3047              		.cfi_def_cfa_offset 8
 3048              		.cfi_offset 7, -8
 3049              		.cfi_offset 14, -4
 3050 0002 84B0     		sub	sp, sp, #16
 3051              	.LCFI132:
 3052              		.cfi_def_cfa_offset 24
 3053 0004 00AF     		add	r7, sp, #0
 3054              	.LCFI133:
 3055              		.cfi_def_cfa_register 7
 3056 0006 7860     		str	r0, [r7, #4]
1582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3057              		.loc 1 1583 0
 3058 0008 7B68     		ldr	r3, [r7, #4]
 3059 000a 9B6B     		ldr	r3, [r3, #56]
 3060 000c FB60     		str	r3, [r7, #12]
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
1586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 3061              		.loc 1 1586 0
 3062 000e FB68     		ldr	r3, [r7, #12]
 3063 0010 1B6C     		ldr	r3, [r3, #64]
 3064 0012 03F05003 		and	r3, r3, #80
 3065 0016 002B     		cmp	r3, #0
 3066 0018 3CD1     		bne	.L133
1587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Update ADC state machine */
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 3067              		.loc 1 1589 0
 3068 001a FB68     		ldr	r3, [r7, #12]
 3069 001c 1B6C     		ldr	r3, [r3, #64]
 3070 001e 43F40072 		orr	r2, r3, #512
 3071 0022 FB68     		ldr	r3, [r7, #12]
 3072 0024 1A64     		str	r2, [r3, #64]
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Note: On STM32F4, there is no independent flag of end of sequence.   */
1594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
1595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /*       of end of sequence.                                            */
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 3073              		.loc 1 1597 0
 3074 0026 FB68     		ldr	r3, [r7, #12]
 3075 0028 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccMRyWhv.s 			page 92


 3076 002a 9B68     		ldr	r3, [r3, #8]
 3077 002c 03F04053 		and	r3, r3, #805306368
 3078 0030 002B     		cmp	r3, #0
 3079 0032 2BD1     		bne	.L134
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 3080              		.loc 1 1598 0 discriminator 1
 3081 0034 FB68     		ldr	r3, [r7, #12]
 3082 0036 9B69     		ldr	r3, [r3, #24]
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 3083              		.loc 1 1597 0 discriminator 1
 3084 0038 002B     		cmp	r3, #0
 3085 003a 27D1     		bne	.L134
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 3086              		.loc 1 1599 0
 3087 003c FB68     		ldr	r3, [r7, #12]
 3088 003e 1B68     		ldr	r3, [r3]
 3089 0040 DB6A     		ldr	r3, [r3, #44]
 3090 0042 03F47003 		and	r3, r3, #15728640
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 3091              		.loc 1 1598 0
 3092 0046 002B     		cmp	r3, #0
 3093 0048 06D0     		beq	.L135
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 3094              		.loc 1 1600 0
 3095 004a FB68     		ldr	r3, [r7, #12]
 3096 004c 1B68     		ldr	r3, [r3]
 3097 004e 9B68     		ldr	r3, [r3, #8]
 3098 0050 03F48063 		and	r3, r3, #1024
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 3099              		.loc 1 1599 0
 3100 0054 002B     		cmp	r3, #0
 3101 0056 19D1     		bne	.L134
 3102              	.L135:
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     {
1602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
1603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
1606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 3103              		.loc 1 1606 0
 3104 0058 FB68     		ldr	r3, [r7, #12]
 3105 005a 1B68     		ldr	r3, [r3]
 3106 005c FA68     		ldr	r2, [r7, #12]
 3107 005e 1268     		ldr	r2, [r2]
 3108 0060 5268     		ldr	r2, [r2, #4]
 3109 0062 22F02002 		bic	r2, r2, #32
 3110 0066 5A60     		str	r2, [r3, #4]
1607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
1608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       /* Set ADC state */
1609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 3111              		.loc 1 1609 0
 3112 0068 FB68     		ldr	r3, [r7, #12]
 3113 006a 1B6C     		ldr	r3, [r3, #64]
 3114 006c 23F48072 		bic	r2, r3, #256
 3115 0070 FB68     		ldr	r3, [r7, #12]
 3116 0072 1A64     		str	r2, [r3, #64]
1610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       
ARM GAS  /tmp/ccMRyWhv.s 			page 93


1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 3117              		.loc 1 1611 0
 3118 0074 FB68     		ldr	r3, [r7, #12]
 3119 0076 1B6C     		ldr	r3, [r3, #64]
 3120 0078 03F48053 		and	r3, r3, #4096
 3121 007c 002B     		cmp	r3, #0
 3122 007e 05D1     		bne	.L134
1612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       {
1613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3123              		.loc 1 1613 0
 3124 0080 FB68     		ldr	r3, [r7, #12]
 3125 0082 1B6C     		ldr	r3, [r3, #64]
 3126 0084 43F00102 		orr	r2, r3, #1
 3127 0088 FB68     		ldr	r3, [r7, #12]
 3128 008a 1A64     		str	r2, [r3, #64]
 3129              	.L134:
1614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****       }
1615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     }
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     
1617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Conversion complete callback */
1618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 3130              		.loc 1 1618 0
 3131 008c F868     		ldr	r0, [r7, #12]
 3132 008e FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
1619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   else
1621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   {
1622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     /* Call DMA error callback */
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
1624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
1625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 3133              		.loc 1 1625 0
 3134 0092 04E0     		b	.L137
 3135              	.L133:
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   }
 3136              		.loc 1 1623 0
 3137 0094 FB68     		ldr	r3, [r7, #12]
 3138 0096 9B6B     		ldr	r3, [r3, #56]
 3139 0098 DB6C     		ldr	r3, [r3, #76]
 3140 009a 7868     		ldr	r0, [r7, #4]
 3141 009c 9847     		blx	r3
 3142              	.L137:
 3143              		.loc 1 1625 0
 3144 009e 00BF     		nop
 3145 00a0 1037     		adds	r7, r7, #16
 3146              	.LCFI134:
 3147              		.cfi_def_cfa_offset 8
 3148 00a2 BD46     		mov	sp, r7
 3149              	.LCFI135:
 3150              		.cfi_def_cfa_register 13
 3151              		@ sp needed
 3152 00a4 80BD     		pop	{r7, pc}
 3153              		.cfi_endproc
 3154              	.LFE149:
 3156 00a6 00BF     		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 3157              		.align	2
 3158              		.thumb
ARM GAS  /tmp/ccMRyWhv.s 			page 94


 3159              		.thumb_func
 3161              	ADC_DMAHalfConvCplt:
 3162              	.LFB150:
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
1634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 3163              		.loc 1 1634 0
 3164              		.cfi_startproc
 3165              		@ args = 0, pretend = 0, frame = 16
 3166              		@ frame_needed = 1, uses_anonymous_args = 0
 3167 0000 80B5     		push	{r7, lr}
 3168              	.LCFI136:
 3169              		.cfi_def_cfa_offset 8
 3170              		.cfi_offset 7, -8
 3171              		.cfi_offset 14, -4
 3172 0002 84B0     		sub	sp, sp, #16
 3173              	.LCFI137:
 3174              		.cfi_def_cfa_offset 24
 3175 0004 00AF     		add	r7, sp, #0
 3176              	.LCFI138:
 3177              		.cfi_def_cfa_register 7
 3178 0006 7860     		str	r0, [r7, #4]
1635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3179              		.loc 1 1635 0
 3180 0008 7B68     		ldr	r3, [r7, #4]
 3181 000a 9B6B     		ldr	r3, [r3, #56]
 3182 000c FB60     		str	r3, [r7, #12]
1636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Conversion complete callback */
1637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 3183              		.loc 1 1637 0
 3184 000e F868     		ldr	r0, [r7, #12]
 3185 0010 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
1638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 3186              		.loc 1 1638 0
 3187 0014 00BF     		nop
 3188 0016 1037     		adds	r7, r7, #16
 3189              	.LCFI139:
 3190              		.cfi_def_cfa_offset 8
 3191 0018 BD46     		mov	sp, r7
 3192              	.LCFI140:
 3193              		.cfi_def_cfa_register 13
 3194              		@ sp needed
 3195 001a 80BD     		pop	{r7, pc}
 3196              		.cfi_endproc
 3197              	.LFE150:
 3199              		.section	.text.ADC_DMAError,"ax",%progbits
 3200              		.align	2
 3201              		.thumb
 3202              		.thumb_func
 3204              	ADC_DMAError:
 3205              	.LFB151:
ARM GAS  /tmp/ccMRyWhv.s 			page 95


1639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** 
1640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** /**
1641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @brief  DMA error callback 
1642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
1643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   * @retval None
1645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   */
1646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
1647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** {
 3206              		.loc 1 1647 0
 3207              		.cfi_startproc
 3208              		@ args = 0, pretend = 0, frame = 16
 3209              		@ frame_needed = 1, uses_anonymous_args = 0
 3210 0000 80B5     		push	{r7, lr}
 3211              	.LCFI141:
 3212              		.cfi_def_cfa_offset 8
 3213              		.cfi_offset 7, -8
 3214              		.cfi_offset 14, -4
 3215 0002 84B0     		sub	sp, sp, #16
 3216              	.LCFI142:
 3217              		.cfi_def_cfa_offset 24
 3218 0004 00AF     		add	r7, sp, #0
 3219              	.LCFI143:
 3220              		.cfi_def_cfa_register 7
 3221 0006 7860     		str	r0, [r7, #4]
1648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3222              		.loc 1 1648 0
 3223 0008 7B68     		ldr	r3, [r7, #4]
 3224 000a 9B6B     		ldr	r3, [r3, #56]
 3225 000c FB60     		str	r3, [r7, #12]
1649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->State= HAL_ADC_STATE_ERROR_DMA;
 3226              		.loc 1 1649 0
 3227 000e FB68     		ldr	r3, [r7, #12]
 3228 0010 4022     		movs	r2, #64
 3229 0012 1A64     		str	r2, [r3, #64]
1650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   /* Set ADC error code to DMA error */
1651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 3230              		.loc 1 1651 0
 3231 0014 FB68     		ldr	r3, [r7, #12]
 3232 0016 5B6C     		ldr	r3, [r3, #68]
 3233 0018 43F00402 		orr	r2, r3, #4
 3234 001c FB68     		ldr	r3, [r7, #12]
 3235 001e 5A64     		str	r2, [r3, #68]
1652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 3236              		.loc 1 1652 0
 3237 0020 F868     		ldr	r0, [r7, #12]
 3238 0022 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
1653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c **** }
 3239              		.loc 1 1653 0
 3240 0026 00BF     		nop
 3241 0028 1037     		adds	r7, r7, #16
 3242              	.LCFI144:
 3243              		.cfi_def_cfa_offset 8
 3244 002a BD46     		mov	sp, r7
 3245              	.LCFI145:
 3246              		.cfi_def_cfa_register 13
 3247              		@ sp needed
ARM GAS  /tmp/ccMRyWhv.s 			page 96


 3248 002c 80BD     		pop	{r7, pc}
 3249              		.cfi_endproc
 3250              	.LFE151:
 3252 002e 00BF     		.text
 3253              	.Letext0:
 3254              		.file 3 "/usr/local/gcc-arm-none-eabi-5_4-2016q2/arm-none-eabi/include/machine/_default_types.h"
 3255              		.file 4 "/usr/local/gcc-arm-none-eabi-5_4-2016q2/arm-none-eabi/include/sys/_stdint.h"
 3256              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 3257              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3258              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3259              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 3260              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 3261              		.file 10 "Drivers/CMSIS/Include/core_cm4.h"
 3262              		.file 11 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
ARM GAS  /tmp/ccMRyWhv.s 			page 97


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hal_adc.c
     /tmp/ccMRyWhv.s:22     .text.HAL_ADC_Init:00000000 $t
     /tmp/ccMRyWhv.s:27     .text.HAL_ADC_Init:00000000 HAL_ADC_Init
     /tmp/ccMRyWhv.s:222    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
     /tmp/ccMRyWhv.s:2723   .text.ADC_Init:00000000 ADC_Init
     /tmp/ccMRyWhv.s:129    .text.HAL_ADC_DeInit:00000000 $t
     /tmp/ccMRyWhv.s:134    .text.HAL_ADC_DeInit:00000000 HAL_ADC_DeInit
     /tmp/ccMRyWhv.s:263    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
     /tmp/ccMRyWhv.s:217    .text.HAL_ADC_MspInit:00000000 $t
     /tmp/ccMRyWhv.s:258    .text.HAL_ADC_MspDeInit:00000000 $t
     /tmp/ccMRyWhv.s:299    .text.HAL_ADC_Start:00000000 $t
     /tmp/ccMRyWhv.s:304    .text.HAL_ADC_Start:00000000 HAL_ADC_Start
     /tmp/ccMRyWhv.s:499    .text.HAL_ADC_Start:00000138 $d
     /tmp/ccMRyWhv.s:507    .text.HAL_ADC_Stop:00000000 $t
     /tmp/ccMRyWhv.s:512    .text.HAL_ADC_Stop:00000000 HAL_ADC_Stop
     /tmp/ccMRyWhv.s:592    .text.HAL_ADC_PollForConversion:00000000 $t
     /tmp/ccMRyWhv.s:597    .text.HAL_ADC_PollForConversion:00000000 HAL_ADC_PollForConversion
     /tmp/ccMRyWhv.s:769    .text.HAL_ADC_PollForEvent:00000000 $t
     /tmp/ccMRyWhv.s:774    .text.HAL_ADC_PollForEvent:00000000 HAL_ADC_PollForEvent
     /tmp/ccMRyWhv.s:895    .text.HAL_ADC_Start_IT:00000000 $t
     /tmp/ccMRyWhv.s:900    .text.HAL_ADC_Start_IT:00000000 HAL_ADC_Start_IT
     /tmp/ccMRyWhv.s:1104   .text.HAL_ADC_Start_IT:0000014c $d
     /tmp/ccMRyWhv.s:1112   .text.HAL_ADC_Stop_IT:00000000 $t
     /tmp/ccMRyWhv.s:1117   .text.HAL_ADC_Stop_IT:00000000 HAL_ADC_Stop_IT
     /tmp/ccMRyWhv.s:1206   .text.HAL_ADC_IRQHandler:00000000 $t
     /tmp/ccMRyWhv.s:1211   .text.HAL_ADC_IRQHandler:00000000 HAL_ADC_IRQHandler
     /tmp/ccMRyWhv.s:1991   .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccMRyWhv.s:2073   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccMRyWhv.s:2114   .text.HAL_ADC_ErrorCallback:00000000 HAL_ADC_ErrorCallback
     /tmp/ccMRyWhv.s:1584   .text.HAL_ADC_Start_DMA:00000000 $t
     /tmp/ccMRyWhv.s:1589   .text.HAL_ADC_Start_DMA:00000000 HAL_ADC_Start_DMA
     /tmp/ccMRyWhv.s:1823   .text.HAL_ADC_Start_DMA:00000184 $d
     /tmp/ccMRyWhv.s:3039   .text.ADC_DMAConvCplt:00000000 ADC_DMAConvCplt
     /tmp/ccMRyWhv.s:3161   .text.ADC_DMAHalfConvCplt:00000000 ADC_DMAHalfConvCplt
     /tmp/ccMRyWhv.s:3204   .text.ADC_DMAError:00000000 ADC_DMAError
     /tmp/ccMRyWhv.s:1834   .text.HAL_ADC_Stop_DMA:00000000 $t
     /tmp/ccMRyWhv.s:1839   .text.HAL_ADC_Stop_DMA:00000000 HAL_ADC_Stop_DMA
     /tmp/ccMRyWhv.s:1941   .text.HAL_ADC_GetValue:00000000 $t
     /tmp/ccMRyWhv.s:1946   .text.HAL_ADC_GetValue:00000000 HAL_ADC_GetValue
     /tmp/ccMRyWhv.s:1986   .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccMRyWhv.s:2027   .text.HAL_ADC_ConvHalfCpltCallback:00000000 $t
     /tmp/ccMRyWhv.s:2032   .text.HAL_ADC_ConvHalfCpltCallback:00000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccMRyWhv.s:2068   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 $t
     /tmp/ccMRyWhv.s:2109   .text.HAL_ADC_ErrorCallback:00000000 $t
     /tmp/ccMRyWhv.s:2150   .text.HAL_ADC_ConfigChannel:00000000 $t
     /tmp/ccMRyWhv.s:2155   .text.HAL_ADC_ConfigChannel:00000000 HAL_ADC_ConfigChannel
     /tmp/ccMRyWhv.s:2486   .text.HAL_ADC_ConfigChannel:00000228 $d
     /tmp/ccMRyWhv.s:2495   .text.HAL_ADC_AnalogWDGConfig:00000000 $t
     /tmp/ccMRyWhv.s:2500   .text.HAL_ADC_AnalogWDGConfig:00000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccMRyWhv.s:2631   .text.HAL_ADC_GetState:00000000 $t
     /tmp/ccMRyWhv.s:2636   .text.HAL_ADC_GetState:00000000 HAL_ADC_GetState
     /tmp/ccMRyWhv.s:2675   .text.HAL_ADC_GetError:00000000 $t
     /tmp/ccMRyWhv.s:2680   .text.HAL_ADC_GetError:00000000 HAL_ADC_GetError
     /tmp/ccMRyWhv.s:2719   .text.ADC_Init:00000000 $t
     /tmp/ccMRyWhv.s:3029   .text.ADC_Init:000001fc $d
     /tmp/ccMRyWhv.s:3035   .text.ADC_DMAConvCplt:00000000 $t
ARM GAS  /tmp/ccMRyWhv.s 			page 98


     /tmp/ccMRyWhv.s:3157   .text.ADC_DMAHalfConvCplt:00000000 $t
     /tmp/ccMRyWhv.s:3200   .text.ADC_DMAError:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_ADCEx_InjectedConvCpltCallback
HAL_DMA_Start_IT
HAL_DMA_Abort
